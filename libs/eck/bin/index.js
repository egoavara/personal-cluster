"use strict";
// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.types = exports.stackconfigpolicy = exports.maps = exports.logstash = exports.kibana = exports.enterprisesearch = exports.elasticsearch = exports.beat = exports.autoscaling = exports.apm = exports.agent = exports.Provider = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
exports.Provider = null;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));
// Export sub-modules:
const agent = require("./agent");
exports.agent = agent;
const apm = require("./apm");
exports.apm = apm;
const autoscaling = require("./autoscaling");
exports.autoscaling = autoscaling;
const beat = require("./beat");
exports.beat = beat;
const elasticsearch = require("./elasticsearch");
exports.elasticsearch = elasticsearch;
const enterprisesearch = require("./enterprisesearch");
exports.enterprisesearch = enterprisesearch;
const kibana = require("./kibana");
exports.kibana = kibana;
const logstash = require("./logstash");
exports.logstash = logstash;
const maps = require("./maps");
exports.maps = maps;
const stackconfigpolicy = require("./stackconfigpolicy");
exports.stackconfigpolicy = stackconfigpolicy;
const types = require("./types");
exports.types = types;
pulumi.runtime.registerResourcePackage("eck", {
    version: utilities.getVersion(),
    constructProvider: (name, type, urn) => {
        if (type !== "pulumi:providers:kubernetes") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new exports.Provider(name, undefined, { urn });
    },
});
//# sourceMappingURL=index.js.map