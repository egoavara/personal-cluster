// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export namespace jaegertracing {
    export namespace v1 {
        export interface Jaeger {
            /**
             * APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
             */
            apiVersion?: pulumi.Input<"jaegertracing.io/v1">;
            /**
             * Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<"Jaeger">;
            /**
             * Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            metadata?: pulumi.Input<inputs.meta.v1.ObjectMeta>;
            spec?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpec>;
            status?: pulumi.Input<inputs.jaegertracing.v1.JaegerStatus>;
        }

        export interface JaegerSpec {
            affinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinity>;
            agent?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgent>;
            allInOne?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOne>;
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            collector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollector>;
            containerSecurityContext?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecContainerSecurityContext>;
            imagePullPolicy?: pulumi.Input<string>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecImagePullSecrets>[]>;
            ingester?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngester>;
            ingress?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngress>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            livenessProbe?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecLivenessProbe>;
            query?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQuery>;
            resources?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecResources>;
            sampling?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecSampling>;
            securityContext?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecSecurityContext>;
            serviceAccount?: pulumi.Input<string>;
            storage?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorage>;
            strategy?: pulumi.Input<string>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecTolerations>[]>;
            ui?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecUi>;
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumeMounts>[]>;
            volumes?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumes>[]>;
        }

        export interface JaegerSpecAffinity {
            nodeAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityNodeAffinity>;
            podAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityPodAffinity>;
            podAntiAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityPodAntiAffinity>;
        }

        export interface JaegerSpecAffinityNodeAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution>;
        }

        export interface JaegerSpecAffinityNodeAffinityPatch {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch>;
        }

        export interface JaegerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            preference?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields>[]>;
        }

        export interface JaegerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch>[]>;
        }

        export interface JaegerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            nodeSelectorTerms?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms>[]>;
        }

        export interface JaegerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields>[]>;
        }

        export interface JaegerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch>[]>;
        }

        export interface JaegerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            nodeSelectorTerms?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch>[]>;
        }

        export interface JaegerSpecAffinityPatch {
            nodeAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityNodeAffinityPatch>;
            podAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityPodAffinityPatch>;
            podAntiAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityPodAntiAffinityPatch>;
        }

        export interface JaegerSpecAffinityPodAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface JaegerSpecAffinityPodAffinityPatch {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
        }

        export interface JaegerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecAffinityPodAntiAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface JaegerSpecAffinityPodAntiAffinityPatch {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
        }

        export interface JaegerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgent {
            affinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinity>;
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            config?: pulumi.Input<{[key: string]: any}>;
            containerSecurityContext?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentContainerSecurityContext>;
            dnsPolicy?: pulumi.Input<string>;
            hostNetwork?: pulumi.Input<boolean>;
            image?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentImagePullSecrets>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            livenessProbe?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentLivenessProbe>;
            options?: pulumi.Input<{[key: string]: any}>;
            priorityClassName?: pulumi.Input<string>;
            resources?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentResources>;
            securityContext?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentSecurityContext>;
            serviceAccount?: pulumi.Input<string>;
            sidecarSecurityContext?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentSidecarSecurityContext>;
            strategy?: pulumi.Input<string>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentTolerations>[]>;
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumeMounts>[]>;
            volumes?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumes>[]>;
        }

        export interface JaegerSpecAgentAffinity {
            nodeAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityNodeAffinity>;
            podAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityPodAffinity>;
            podAntiAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityPodAntiAffinity>;
        }

        export interface JaegerSpecAgentAffinityNodeAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution>;
        }

        export interface JaegerSpecAgentAffinityNodeAffinityPatch {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch>;
        }

        export interface JaegerSpecAgentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecAgentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            preference?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecAgentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields>[]>;
        }

        export interface JaegerSpecAgentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAgentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAgentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAgentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAgentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch>[]>;
        }

        export interface JaegerSpecAgentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            nodeSelectorTerms?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms>[]>;
        }

        export interface JaegerSpecAgentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields>[]>;
        }

        export interface JaegerSpecAgentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAgentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAgentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAgentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAgentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch>[]>;
        }

        export interface JaegerSpecAgentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            nodeSelectorTerms?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch>[]>;
        }

        export interface JaegerSpecAgentAffinityPatch {
            nodeAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityNodeAffinityPatch>;
            podAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityPodAffinityPatch>;
            podAntiAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityPodAntiAffinityPatch>;
        }

        export interface JaegerSpecAgentAffinityPodAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface JaegerSpecAgentAffinityPodAffinityPatch {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
        }

        export interface JaegerSpecAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecAgentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAgentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAgentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecAgentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecAgentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAgentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAgentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecAgentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentAffinityPodAntiAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface JaegerSpecAgentAffinityPodAntiAffinityPatch {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
        }

        export interface JaegerSpecAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecAgentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAgentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAgentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecAgentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecAgentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAgentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAgentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecAgentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentContainerSecurityContext {
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            capabilities?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentContainerSecurityContextCapabilities>;
            privileged?: pulumi.Input<boolean>;
            procMount?: pulumi.Input<string>;
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentContainerSecurityContextSeLinuxOptions>;
            seccompProfile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentContainerSecurityContextSeccompProfile>;
            windowsOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentContainerSecurityContextWindowsOptions>;
        }

        export interface JaegerSpecAgentContainerSecurityContextCapabilities {
            add?: pulumi.Input<pulumi.Input<string>[]>;
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAgentContainerSecurityContextCapabilitiesPatch {
            add?: pulumi.Input<pulumi.Input<string>[]>;
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAgentContainerSecurityContextPatch {
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            capabilities?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentContainerSecurityContextCapabilitiesPatch>;
            privileged?: pulumi.Input<boolean>;
            procMount?: pulumi.Input<string>;
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentContainerSecurityContextSeLinuxOptionsPatch>;
            seccompProfile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentContainerSecurityContextSeccompProfilePatch>;
            windowsOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentContainerSecurityContextWindowsOptionsPatch>;
        }

        export interface JaegerSpecAgentContainerSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentContainerSecurityContextSeLinuxOptionsPatch {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentContainerSecurityContextSeccompProfile {
            localhostProfile?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentContainerSecurityContextSeccompProfilePatch {
            localhostProfile?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentContainerSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            hostProcess?: pulumi.Input<boolean>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentContainerSecurityContextWindowsOptionsPatch {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            hostProcess?: pulumi.Input<boolean>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentImagePullSecrets {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentImagePullSecretsPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentLivenessProbe {
            exec?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentLivenessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            grpc?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentLivenessProbeGrpc>;
            httpGet?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentLivenessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentLivenessProbeTcpSocket>;
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface JaegerSpecAgentLivenessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAgentLivenessProbeExecPatch {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAgentLivenessProbeGrpc {
            port?: pulumi.Input<number>;
            service?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentLivenessProbeGrpcPatch {
            port?: pulumi.Input<number>;
            service?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentLivenessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentLivenessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port?: pulumi.Input<number | string>;
            scheme?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentLivenessProbeHttpGetHttpHeaders {
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentLivenessProbeHttpGetHttpHeadersPatch {
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentLivenessProbeHttpGetPatch {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentLivenessProbeHttpGetHttpHeadersPatch>[]>;
            path?: pulumi.Input<string>;
            port?: pulumi.Input<number | string>;
            scheme?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentLivenessProbePatch {
            exec?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentLivenessProbeExecPatch>;
            failureThreshold?: pulumi.Input<number>;
            grpc?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentLivenessProbeGrpcPatch>;
            httpGet?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentLivenessProbeHttpGetPatch>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentLivenessProbeTcpSocketPatch>;
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface JaegerSpecAgentLivenessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port?: pulumi.Input<number | string>;
        }

        export interface JaegerSpecAgentLivenessProbeTcpSocketPatch {
            host?: pulumi.Input<string>;
            port?: pulumi.Input<number | string>;
        }

        export interface JaegerSpecAgentPatch {
            affinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentAffinityPatch>;
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            config?: pulumi.Input<{[key: string]: any}>;
            containerSecurityContext?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentContainerSecurityContextPatch>;
            dnsPolicy?: pulumi.Input<string>;
            hostNetwork?: pulumi.Input<boolean>;
            image?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentImagePullSecretsPatch>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            livenessProbe?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentLivenessProbePatch>;
            options?: pulumi.Input<{[key: string]: any}>;
            priorityClassName?: pulumi.Input<string>;
            resources?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentResourcesPatch>;
            securityContext?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentSecurityContextPatch>;
            serviceAccount?: pulumi.Input<string>;
            sidecarSecurityContext?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentSidecarSecurityContextPatch>;
            strategy?: pulumi.Input<string>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentTolerationsPatch>[]>;
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumeMountsPatch>[]>;
            volumes?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesPatch>[]>;
        }

        export interface JaegerSpecAgentResources {
            claims?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentResourcesClaims>[]>;
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        export interface JaegerSpecAgentResourcesClaims {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentResourcesClaimsPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentResourcesPatch {
            claims?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentResourcesClaimsPatch>[]>;
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        export interface JaegerSpecAgentSecurityContext {
            fsGroup?: pulumi.Input<number>;
            fsGroupChangePolicy?: pulumi.Input<string>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentSecurityContextSeLinuxOptions>;
            seccompProfile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentSecurityContextSeccompProfile>;
            supplementalGroups?: pulumi.Input<pulumi.Input<number>[]>;
            sysctls?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentSecurityContextSysctls>[]>;
            windowsOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentSecurityContextWindowsOptions>;
        }

        export interface JaegerSpecAgentSecurityContextPatch {
            fsGroup?: pulumi.Input<number>;
            fsGroupChangePolicy?: pulumi.Input<string>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentSecurityContextSeLinuxOptionsPatch>;
            seccompProfile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentSecurityContextSeccompProfilePatch>;
            supplementalGroups?: pulumi.Input<pulumi.Input<number>[]>;
            sysctls?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentSecurityContextSysctlsPatch>[]>;
            windowsOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentSecurityContextWindowsOptionsPatch>;
        }

        export interface JaegerSpecAgentSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentSecurityContextSeLinuxOptionsPatch {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentSecurityContextSeccompProfile {
            localhostProfile?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentSecurityContextSeccompProfilePatch {
            localhostProfile?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentSecurityContextSysctls {
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentSecurityContextSysctlsPatch {
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            hostProcess?: pulumi.Input<boolean>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentSecurityContextWindowsOptionsPatch {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            hostProcess?: pulumi.Input<boolean>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentSidecarSecurityContext {
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            capabilities?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentSidecarSecurityContextCapabilities>;
            privileged?: pulumi.Input<boolean>;
            procMount?: pulumi.Input<string>;
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentSidecarSecurityContextSeLinuxOptions>;
            seccompProfile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentSidecarSecurityContextSeccompProfile>;
            windowsOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentSidecarSecurityContextWindowsOptions>;
        }

        export interface JaegerSpecAgentSidecarSecurityContextCapabilities {
            add?: pulumi.Input<pulumi.Input<string>[]>;
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAgentSidecarSecurityContextCapabilitiesPatch {
            add?: pulumi.Input<pulumi.Input<string>[]>;
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAgentSidecarSecurityContextPatch {
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            capabilities?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentSidecarSecurityContextCapabilitiesPatch>;
            privileged?: pulumi.Input<boolean>;
            procMount?: pulumi.Input<string>;
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentSidecarSecurityContextSeLinuxOptionsPatch>;
            seccompProfile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentSidecarSecurityContextSeccompProfilePatch>;
            windowsOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentSidecarSecurityContextWindowsOptionsPatch>;
        }

        export interface JaegerSpecAgentSidecarSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentSidecarSecurityContextSeLinuxOptionsPatch {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentSidecarSecurityContextSeccompProfile {
            localhostProfile?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentSidecarSecurityContextSeccompProfilePatch {
            localhostProfile?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentSidecarSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            hostProcess?: pulumi.Input<boolean>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentSidecarSecurityContextWindowsOptionsPatch {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            hostProcess?: pulumi.Input<boolean>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentTolerations {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentTolerationsPatch {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumeMounts {
            mountPath?: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumeMountsPatch {
            mountPath?: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumes {
            awsElasticBlockStore?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesAwsElasticBlockStore>;
            azureDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesAzureDisk>;
            azureFile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesAzureFile>;
            cephfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesCephfs>;
            cinder?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesCinder>;
            configMap?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesConfigMap>;
            csi?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesCsi>;
            downwardAPI?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesDownwardAPI>;
            emptyDir?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesEmptyDir>;
            ephemeral?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesEphemeral>;
            fc?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesFc>;
            flexVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesFlexVolume>;
            flocker?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesFlocker>;
            gcePersistentDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesGcePersistentDisk>;
            gitRepo?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesGitRepo>;
            glusterfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesGlusterfs>;
            hostPath?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesHostPath>;
            iscsi?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesIscsi>;
            name?: pulumi.Input<string>;
            nfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesNfs>;
            persistentVolumeClaim?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesPersistentVolumeClaim>;
            photonPersistentDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesPhotonPersistentDisk>;
            portworxVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesPortworxVolume>;
            projected?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesProjected>;
            quobyte?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesQuobyte>;
            rbd?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesRbd>;
            scaleIO?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesScaleIO>;
            secret?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesSecret>;
            storageos?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesStorageos>;
            vsphereVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesVsphereVolume>;
        }

        export interface JaegerSpecAgentVolumesAwsElasticBlockStore {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesAwsElasticBlockStorePatch {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesAzureDisk {
            cachingMode?: pulumi.Input<string>;
            diskName?: pulumi.Input<string>;
            diskURI?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecAgentVolumesAzureDiskPatch {
            cachingMode?: pulumi.Input<string>;
            diskName?: pulumi.Input<string>;
            diskURI?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecAgentVolumesAzureFile {
            readOnly?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
            shareName?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesAzureFilePatch {
            readOnly?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
            shareName?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesCephfs {
            monitors?: pulumi.Input<pulumi.Input<string>[]>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretFile?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesCephfsSecretRef>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesCephfsPatch {
            monitors?: pulumi.Input<pulumi.Input<string>[]>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretFile?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesCephfsSecretRefPatch>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesCephfsSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesCephfsSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesCinder {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesCinderSecretRef>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesCinderPatch {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesCinderSecretRefPatch>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesCinderSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesCinderSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesConfigMap {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecAgentVolumesConfigMapItems {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesConfigMapItemsPatch {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesConfigMapPatch {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesConfigMapItemsPatch>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecAgentVolumesCsi {
            driver?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            nodePublishSecretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesCsiNodePublishSecretRef>;
            readOnly?: pulumi.Input<boolean>;
            volumeAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecAgentVolumesCsiNodePublishSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesCsiNodePublishSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesCsiPatch {
            driver?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            nodePublishSecretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesCsiNodePublishSecretRefPatch>;
            readOnly?: pulumi.Input<boolean>;
            volumeAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecAgentVolumesDownwardAPI {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesDownwardAPIItems>[]>;
        }

        export interface JaegerSpecAgentVolumesDownwardAPIItems {
            fieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesDownwardAPIItemsFieldRef>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesDownwardAPIItemsResourceFieldRef>;
        }

        export interface JaegerSpecAgentVolumesDownwardAPIItemsFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesDownwardAPIItemsFieldRefPatch {
            apiVersion?: pulumi.Input<string>;
            fieldPath?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesDownwardAPIItemsPatch {
            fieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesDownwardAPIItemsFieldRefPatch>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesDownwardAPIItemsResourceFieldRefPatch>;
        }

        export interface JaegerSpecAgentVolumesDownwardAPIItemsResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<number | string>;
            resource?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesDownwardAPIItemsResourceFieldRefPatch {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<number | string>;
            resource?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesDownwardAPIPatch {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesDownwardAPIItemsPatch>[]>;
        }

        export interface JaegerSpecAgentVolumesEmptyDir {
            medium?: pulumi.Input<string>;
            sizeLimit?: pulumi.Input<number | string>;
        }

        export interface JaegerSpecAgentVolumesEmptyDirPatch {
            medium?: pulumi.Input<string>;
            sizeLimit?: pulumi.Input<number | string>;
        }

        export interface JaegerSpecAgentVolumesEphemeral {
            volumeClaimTemplate?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesEphemeralVolumeClaimTemplate>;
        }

        export interface JaegerSpecAgentVolumesEphemeralPatch {
            volumeClaimTemplate?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesEphemeralVolumeClaimTemplatePatch>;
        }

        export interface JaegerSpecAgentVolumesEphemeralVolumeClaimTemplate {
            metadata?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesEphemeralVolumeClaimTemplateMetadata>;
            spec?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesEphemeralVolumeClaimTemplateSpec>;
        }

        export interface JaegerSpecAgentVolumesEphemeralVolumeClaimTemplateMetadata {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesEphemeralVolumeClaimTemplateMetadataPatch {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesEphemeralVolumeClaimTemplatePatch {
            metadata?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesEphemeralVolumeClaimTemplateMetadataPatch>;
            spec?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesEphemeralVolumeClaimTemplateSpecPatch>;
        }

        export interface JaegerSpecAgentVolumesEphemeralVolumeClaimTemplateSpec {
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            dataSource?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesEphemeralVolumeClaimTemplateSpecDataSource>;
            dataSourceRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef>;
            resources?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesEphemeralVolumeClaimTemplateSpecResources>;
            selector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesEphemeralVolumeClaimTemplateSpecSelector>;
            storageClassName?: pulumi.Input<string>;
            volumeMode?: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesEphemeralVolumeClaimTemplateSpecDataSource {
            apiGroup?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch {
            apiGroup?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef {
            apiGroup?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch {
            apiGroup?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesEphemeralVolumeClaimTemplateSpecPatch {
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            dataSource?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch>;
            dataSourceRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch>;
            resources?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesEphemeralVolumeClaimTemplateSpecResourcesPatch>;
            selector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesEphemeralVolumeClaimTemplateSpecSelectorPatch>;
            storageClassName?: pulumi.Input<string>;
            volumeMode?: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesEphemeralVolumeClaimTemplateSpecResources {
            claims?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesEphemeralVolumeClaimTemplateSpecResourcesClaims>[]>;
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        export interface JaegerSpecAgentVolumesEphemeralVolumeClaimTemplateSpecResourcesClaims {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesEphemeralVolumeClaimTemplateSpecResourcesClaimsPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesEphemeralVolumeClaimTemplateSpecResourcesPatch {
            claims?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesEphemeralVolumeClaimTemplateSpecResourcesClaimsPatch>[]>;
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        export interface JaegerSpecAgentVolumesEphemeralVolumeClaimTemplateSpecSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecAgentVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAgentVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAgentVolumesEphemeralVolumeClaimTemplateSpecSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecAgentVolumesFc {
            fsType?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            targetWWNs?: pulumi.Input<pulumi.Input<string>[]>;
            wwids?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAgentVolumesFcPatch {
            fsType?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            targetWWNs?: pulumi.Input<pulumi.Input<string>[]>;
            wwids?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAgentVolumesFlexVolume {
            driver?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesFlexVolumeSecretRef>;
        }

        export interface JaegerSpecAgentVolumesFlexVolumePatch {
            driver?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesFlexVolumeSecretRefPatch>;
        }

        export interface JaegerSpecAgentVolumesFlexVolumeSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesFlexVolumeSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesFlocker {
            datasetName?: pulumi.Input<string>;
            datasetUUID?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesFlockerPatch {
            datasetName?: pulumi.Input<string>;
            datasetUUID?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesGcePersistentDisk {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            pdName?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecAgentVolumesGcePersistentDiskPatch {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            pdName?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecAgentVolumesGitRepo {
            directory?: pulumi.Input<string>;
            repository?: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesGitRepoPatch {
            directory?: pulumi.Input<string>;
            repository?: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesGlusterfs {
            endpoints?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecAgentVolumesGlusterfsPatch {
            endpoints?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecAgentVolumesHostPath {
            path?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesHostPathPatch {
            path?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesIscsi {
            chapAuthDiscovery?: pulumi.Input<boolean>;
            chapAuthSession?: pulumi.Input<boolean>;
            fsType?: pulumi.Input<string>;
            initiatorName?: pulumi.Input<string>;
            iqn?: pulumi.Input<string>;
            iscsiInterface?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            portals?: pulumi.Input<pulumi.Input<string>[]>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesIscsiSecretRef>;
            targetPortal?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesIscsiPatch {
            chapAuthDiscovery?: pulumi.Input<boolean>;
            chapAuthSession?: pulumi.Input<boolean>;
            fsType?: pulumi.Input<string>;
            initiatorName?: pulumi.Input<string>;
            iqn?: pulumi.Input<string>;
            iscsiInterface?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            portals?: pulumi.Input<pulumi.Input<string>[]>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesIscsiSecretRefPatch>;
            targetPortal?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesIscsiSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesIscsiSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesNfs {
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            server?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesNfsPatch {
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            server?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesPatch {
            awsElasticBlockStore?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesAwsElasticBlockStorePatch>;
            azureDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesAzureDiskPatch>;
            azureFile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesAzureFilePatch>;
            cephfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesCephfsPatch>;
            cinder?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesCinderPatch>;
            configMap?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesConfigMapPatch>;
            csi?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesCsiPatch>;
            downwardAPI?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesDownwardAPIPatch>;
            emptyDir?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesEmptyDirPatch>;
            ephemeral?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesEphemeralPatch>;
            fc?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesFcPatch>;
            flexVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesFlexVolumePatch>;
            flocker?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesFlockerPatch>;
            gcePersistentDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesGcePersistentDiskPatch>;
            gitRepo?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesGitRepoPatch>;
            glusterfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesGlusterfsPatch>;
            hostPath?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesHostPathPatch>;
            iscsi?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesIscsiPatch>;
            name?: pulumi.Input<string>;
            nfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesNfsPatch>;
            persistentVolumeClaim?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesPersistentVolumeClaimPatch>;
            photonPersistentDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesPhotonPersistentDiskPatch>;
            portworxVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesPortworxVolumePatch>;
            projected?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesProjectedPatch>;
            quobyte?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesQuobytePatch>;
            rbd?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesRbdPatch>;
            scaleIO?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesScaleIOPatch>;
            secret?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesSecretPatch>;
            storageos?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesStorageosPatch>;
            vsphereVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesVsphereVolumePatch>;
        }

        export interface JaegerSpecAgentVolumesPersistentVolumeClaim {
            claimName?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecAgentVolumesPersistentVolumeClaimPatch {
            claimName?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecAgentVolumesPhotonPersistentDisk {
            fsType?: pulumi.Input<string>;
            pdID?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesPhotonPersistentDiskPatch {
            fsType?: pulumi.Input<string>;
            pdID?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesPortworxVolume {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesPortworxVolumePatch {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesProjected {
            defaultMode?: pulumi.Input<number>;
            sources?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesProjectedSources>[]>;
        }

        export interface JaegerSpecAgentVolumesProjectedPatch {
            defaultMode?: pulumi.Input<number>;
            sources?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesProjectedSourcesPatch>[]>;
        }

        export interface JaegerSpecAgentVolumesProjectedSources {
            configMap?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesProjectedSourcesConfigMap>;
            downwardAPI?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesProjectedSourcesDownwardAPI>;
            secret?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesProjectedSourcesSecret>;
            serviceAccountToken?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesProjectedSourcesServiceAccountToken>;
        }

        export interface JaegerSpecAgentVolumesProjectedSourcesConfigMap {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesProjectedSourcesConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecAgentVolumesProjectedSourcesConfigMapItems {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesProjectedSourcesConfigMapItemsPatch {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesProjectedSourcesConfigMapPatch {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesProjectedSourcesConfigMapItemsPatch>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecAgentVolumesProjectedSourcesDownwardAPI {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesProjectedSourcesDownwardAPIItems>[]>;
        }

        export interface JaegerSpecAgentVolumesProjectedSourcesDownwardAPIItems {
            fieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesProjectedSourcesDownwardAPIItemsFieldRef>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef>;
        }

        export interface JaegerSpecAgentVolumesProjectedSourcesDownwardAPIItemsFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesProjectedSourcesDownwardAPIItemsFieldRefPatch {
            apiVersion?: pulumi.Input<string>;
            fieldPath?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesProjectedSourcesDownwardAPIItemsPatch {
            fieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesProjectedSourcesDownwardAPIItemsFieldRefPatch>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatch>;
        }

        export interface JaegerSpecAgentVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<number | string>;
            resource?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatch {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<number | string>;
            resource?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesProjectedSourcesDownwardAPIPatch {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesProjectedSourcesDownwardAPIItemsPatch>[]>;
        }

        export interface JaegerSpecAgentVolumesProjectedSourcesPatch {
            configMap?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesProjectedSourcesConfigMapPatch>;
            downwardAPI?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesProjectedSourcesDownwardAPIPatch>;
            secret?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesProjectedSourcesSecretPatch>;
            serviceAccountToken?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesProjectedSourcesServiceAccountTokenPatch>;
        }

        export interface JaegerSpecAgentVolumesProjectedSourcesSecret {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesProjectedSourcesSecretItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecAgentVolumesProjectedSourcesSecretItems {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesProjectedSourcesSecretItemsPatch {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesProjectedSourcesSecretPatch {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesProjectedSourcesSecretItemsPatch>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecAgentVolumesProjectedSourcesServiceAccountToken {
            audience?: pulumi.Input<string>;
            expirationSeconds?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesProjectedSourcesServiceAccountTokenPatch {
            audience?: pulumi.Input<string>;
            expirationSeconds?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesQuobyte {
            group?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            registry?: pulumi.Input<string>;
            tenant?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
            volume?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesQuobytePatch {
            group?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            registry?: pulumi.Input<string>;
            tenant?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
            volume?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesRbd {
            fsType?: pulumi.Input<string>;
            image?: pulumi.Input<string>;
            keyring?: pulumi.Input<string>;
            monitors?: pulumi.Input<pulumi.Input<string>[]>;
            pool?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesRbdSecretRef>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesRbdPatch {
            fsType?: pulumi.Input<string>;
            image?: pulumi.Input<string>;
            keyring?: pulumi.Input<string>;
            monitors?: pulumi.Input<pulumi.Input<string>[]>;
            pool?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesRbdSecretRefPatch>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesRbdSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesRbdSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesScaleIO {
            fsType?: pulumi.Input<string>;
            gateway?: pulumi.Input<string>;
            protectionDomain?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesScaleIOSecretRef>;
            sslEnabled?: pulumi.Input<boolean>;
            storageMode?: pulumi.Input<string>;
            storagePool?: pulumi.Input<string>;
            system?: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesScaleIOPatch {
            fsType?: pulumi.Input<string>;
            gateway?: pulumi.Input<string>;
            protectionDomain?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesScaleIOSecretRefPatch>;
            sslEnabled?: pulumi.Input<boolean>;
            storageMode?: pulumi.Input<string>;
            storagePool?: pulumi.Input<string>;
            system?: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesScaleIOSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesScaleIOSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesSecret {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesSecretItems>[]>;
            optional?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesSecretItems {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesSecretItemsPatch {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesSecretPatch {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesSecretItemsPatch>[]>;
            optional?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesStorageos {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesStorageosSecretRef>;
            volumeName?: pulumi.Input<string>;
            volumeNamespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesStorageosPatch {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentVolumesStorageosSecretRefPatch>;
            volumeName?: pulumi.Input<string>;
            volumeNamespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesStorageosSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesStorageosSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesVsphereVolume {
            fsType?: pulumi.Input<string>;
            storagePolicyID?: pulumi.Input<string>;
            storagePolicyName?: pulumi.Input<string>;
            volumePath?: pulumi.Input<string>;
        }

        export interface JaegerSpecAgentVolumesVsphereVolumePatch {
            fsType?: pulumi.Input<string>;
            storagePolicyID?: pulumi.Input<string>;
            storagePolicyName?: pulumi.Input<string>;
            volumePath?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOne {
            affinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinity>;
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            config?: pulumi.Input<{[key: string]: any}>;
            containerSecurityContext?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneContainerSecurityContext>;
            image?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneImagePullSecrets>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            livenessProbe?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneLivenessProbe>;
            metricsStorage?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneMetricsStorage>;
            options?: pulumi.Input<{[key: string]: any}>;
            priorityClassName?: pulumi.Input<string>;
            resources?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneResources>;
            securityContext?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneSecurityContext>;
            serviceAccount?: pulumi.Input<string>;
            strategy?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneStrategy>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneTolerations>[]>;
            tracingEnabled?: pulumi.Input<boolean>;
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumeMounts>[]>;
            volumes?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumes>[]>;
        }

        export interface JaegerSpecAllInOneAffinity {
            nodeAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityNodeAffinity>;
            podAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityPodAffinity>;
            podAntiAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityPodAntiAffinity>;
        }

        export interface JaegerSpecAllInOneAffinityNodeAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution>;
        }

        export interface JaegerSpecAllInOneAffinityNodeAffinityPatch {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch>;
        }

        export interface JaegerSpecAllInOneAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecAllInOneAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            preference?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecAllInOneAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields>[]>;
        }

        export interface JaegerSpecAllInOneAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAllInOneAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAllInOneAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAllInOneAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAllInOneAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch>[]>;
        }

        export interface JaegerSpecAllInOneAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            nodeSelectorTerms?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms>[]>;
        }

        export interface JaegerSpecAllInOneAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields>[]>;
        }

        export interface JaegerSpecAllInOneAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAllInOneAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAllInOneAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAllInOneAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAllInOneAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch>[]>;
        }

        export interface JaegerSpecAllInOneAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            nodeSelectorTerms?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch>[]>;
        }

        export interface JaegerSpecAllInOneAffinityPatch {
            nodeAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityNodeAffinityPatch>;
            podAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityPodAffinityPatch>;
            podAntiAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityPodAntiAffinityPatch>;
        }

        export interface JaegerSpecAllInOneAffinityPodAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface JaegerSpecAllInOneAffinityPodAffinityPatch {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
        }

        export interface JaegerSpecAllInOneAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecAllInOneAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecAllInOneAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecAllInOneAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAllInOneAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAllInOneAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecAllInOneAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecAllInOneAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAllInOneAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAllInOneAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecAllInOneAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecAllInOneAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAllInOneAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAllInOneAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecAllInOneAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecAllInOneAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAllInOneAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAllInOneAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecAllInOneAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneAffinityPodAntiAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface JaegerSpecAllInOneAffinityPodAntiAffinityPatch {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
        }

        export interface JaegerSpecAllInOneAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecAllInOneAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecAllInOneAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecAllInOneAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAllInOneAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAllInOneAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecAllInOneAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecAllInOneAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAllInOneAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAllInOneAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecAllInOneAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecAllInOneAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAllInOneAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAllInOneAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecAllInOneAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecAllInOneAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAllInOneAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAllInOneAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecAllInOneAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneContainerSecurityContext {
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            capabilities?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneContainerSecurityContextCapabilities>;
            privileged?: pulumi.Input<boolean>;
            procMount?: pulumi.Input<string>;
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneContainerSecurityContextSeLinuxOptions>;
            seccompProfile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneContainerSecurityContextSeccompProfile>;
            windowsOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneContainerSecurityContextWindowsOptions>;
        }

        export interface JaegerSpecAllInOneContainerSecurityContextCapabilities {
            add?: pulumi.Input<pulumi.Input<string>[]>;
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAllInOneContainerSecurityContextCapabilitiesPatch {
            add?: pulumi.Input<pulumi.Input<string>[]>;
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAllInOneContainerSecurityContextPatch {
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            capabilities?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneContainerSecurityContextCapabilitiesPatch>;
            privileged?: pulumi.Input<boolean>;
            procMount?: pulumi.Input<string>;
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneContainerSecurityContextSeLinuxOptionsPatch>;
            seccompProfile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneContainerSecurityContextSeccompProfilePatch>;
            windowsOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneContainerSecurityContextWindowsOptionsPatch>;
        }

        export interface JaegerSpecAllInOneContainerSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneContainerSecurityContextSeLinuxOptionsPatch {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneContainerSecurityContextSeccompProfile {
            localhostProfile?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneContainerSecurityContextSeccompProfilePatch {
            localhostProfile?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneContainerSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            hostProcess?: pulumi.Input<boolean>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneContainerSecurityContextWindowsOptionsPatch {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            hostProcess?: pulumi.Input<boolean>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneImagePullSecrets {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneImagePullSecretsPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneLivenessProbe {
            exec?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneLivenessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            grpc?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneLivenessProbeGrpc>;
            httpGet?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneLivenessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneLivenessProbeTcpSocket>;
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface JaegerSpecAllInOneLivenessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAllInOneLivenessProbeExecPatch {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAllInOneLivenessProbeGrpc {
            port?: pulumi.Input<number>;
            service?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneLivenessProbeGrpcPatch {
            port?: pulumi.Input<number>;
            service?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneLivenessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneLivenessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port?: pulumi.Input<number | string>;
            scheme?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneLivenessProbeHttpGetHttpHeaders {
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneLivenessProbeHttpGetHttpHeadersPatch {
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneLivenessProbeHttpGetPatch {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneLivenessProbeHttpGetHttpHeadersPatch>[]>;
            path?: pulumi.Input<string>;
            port?: pulumi.Input<number | string>;
            scheme?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneLivenessProbePatch {
            exec?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneLivenessProbeExecPatch>;
            failureThreshold?: pulumi.Input<number>;
            grpc?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneLivenessProbeGrpcPatch>;
            httpGet?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneLivenessProbeHttpGetPatch>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneLivenessProbeTcpSocketPatch>;
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface JaegerSpecAllInOneLivenessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port?: pulumi.Input<number | string>;
        }

        export interface JaegerSpecAllInOneLivenessProbeTcpSocketPatch {
            host?: pulumi.Input<string>;
            port?: pulumi.Input<number | string>;
        }

        export interface JaegerSpecAllInOneMetricsStorage {
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneMetricsStoragePatch {
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOnePatch {
            affinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneAffinityPatch>;
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            config?: pulumi.Input<{[key: string]: any}>;
            containerSecurityContext?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneContainerSecurityContextPatch>;
            image?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneImagePullSecretsPatch>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            livenessProbe?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneLivenessProbePatch>;
            metricsStorage?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneMetricsStoragePatch>;
            options?: pulumi.Input<{[key: string]: any}>;
            priorityClassName?: pulumi.Input<string>;
            resources?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneResourcesPatch>;
            securityContext?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneSecurityContextPatch>;
            serviceAccount?: pulumi.Input<string>;
            strategy?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneStrategyPatch>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneTolerationsPatch>[]>;
            tracingEnabled?: pulumi.Input<boolean>;
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumeMountsPatch>[]>;
            volumes?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesPatch>[]>;
        }

        export interface JaegerSpecAllInOneResources {
            claims?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneResourcesClaims>[]>;
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        export interface JaegerSpecAllInOneResourcesClaims {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneResourcesClaimsPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneResourcesPatch {
            claims?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneResourcesClaimsPatch>[]>;
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        export interface JaegerSpecAllInOneSecurityContext {
            fsGroup?: pulumi.Input<number>;
            fsGroupChangePolicy?: pulumi.Input<string>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneSecurityContextSeLinuxOptions>;
            seccompProfile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneSecurityContextSeccompProfile>;
            supplementalGroups?: pulumi.Input<pulumi.Input<number>[]>;
            sysctls?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneSecurityContextSysctls>[]>;
            windowsOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneSecurityContextWindowsOptions>;
        }

        export interface JaegerSpecAllInOneSecurityContextPatch {
            fsGroup?: pulumi.Input<number>;
            fsGroupChangePolicy?: pulumi.Input<string>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneSecurityContextSeLinuxOptionsPatch>;
            seccompProfile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneSecurityContextSeccompProfilePatch>;
            supplementalGroups?: pulumi.Input<pulumi.Input<number>[]>;
            sysctls?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneSecurityContextSysctlsPatch>[]>;
            windowsOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneSecurityContextWindowsOptionsPatch>;
        }

        export interface JaegerSpecAllInOneSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneSecurityContextSeLinuxOptionsPatch {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneSecurityContextSeccompProfile {
            localhostProfile?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneSecurityContextSeccompProfilePatch {
            localhostProfile?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneSecurityContextSysctls {
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneSecurityContextSysctlsPatch {
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            hostProcess?: pulumi.Input<boolean>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneSecurityContextWindowsOptionsPatch {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            hostProcess?: pulumi.Input<boolean>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneStrategy {
            rollingUpdate?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneStrategyRollingUpdate>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneStrategyPatch {
            rollingUpdate?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneStrategyRollingUpdatePatch>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneStrategyRollingUpdate {
            maxSurge?: pulumi.Input<number | string>;
            maxUnavailable?: pulumi.Input<number | string>;
        }

        export interface JaegerSpecAllInOneStrategyRollingUpdatePatch {
            maxSurge?: pulumi.Input<number | string>;
            maxUnavailable?: pulumi.Input<number | string>;
        }

        export interface JaegerSpecAllInOneTolerations {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneTolerationsPatch {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumeMounts {
            mountPath?: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumeMountsPatch {
            mountPath?: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumes {
            awsElasticBlockStore?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesAwsElasticBlockStore>;
            azureDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesAzureDisk>;
            azureFile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesAzureFile>;
            cephfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesCephfs>;
            cinder?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesCinder>;
            configMap?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesConfigMap>;
            csi?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesCsi>;
            downwardAPI?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesDownwardAPI>;
            emptyDir?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesEmptyDir>;
            ephemeral?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesEphemeral>;
            fc?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesFc>;
            flexVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesFlexVolume>;
            flocker?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesFlocker>;
            gcePersistentDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesGcePersistentDisk>;
            gitRepo?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesGitRepo>;
            glusterfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesGlusterfs>;
            hostPath?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesHostPath>;
            iscsi?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesIscsi>;
            name?: pulumi.Input<string>;
            nfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesNfs>;
            persistentVolumeClaim?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesPersistentVolumeClaim>;
            photonPersistentDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesPhotonPersistentDisk>;
            portworxVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesPortworxVolume>;
            projected?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesProjected>;
            quobyte?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesQuobyte>;
            rbd?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesRbd>;
            scaleIO?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesScaleIO>;
            secret?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesSecret>;
            storageos?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesStorageos>;
            vsphereVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesVsphereVolume>;
        }

        export interface JaegerSpecAllInOneVolumesAwsElasticBlockStore {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesAwsElasticBlockStorePatch {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesAzureDisk {
            cachingMode?: pulumi.Input<string>;
            diskName?: pulumi.Input<string>;
            diskURI?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecAllInOneVolumesAzureDiskPatch {
            cachingMode?: pulumi.Input<string>;
            diskName?: pulumi.Input<string>;
            diskURI?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecAllInOneVolumesAzureFile {
            readOnly?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
            shareName?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesAzureFilePatch {
            readOnly?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
            shareName?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesCephfs {
            monitors?: pulumi.Input<pulumi.Input<string>[]>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretFile?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesCephfsSecretRef>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesCephfsPatch {
            monitors?: pulumi.Input<pulumi.Input<string>[]>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretFile?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesCephfsSecretRefPatch>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesCephfsSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesCephfsSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesCinder {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesCinderSecretRef>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesCinderPatch {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesCinderSecretRefPatch>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesCinderSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesCinderSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesConfigMap {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecAllInOneVolumesConfigMapItems {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesConfigMapItemsPatch {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesConfigMapPatch {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesConfigMapItemsPatch>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecAllInOneVolumesCsi {
            driver?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            nodePublishSecretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesCsiNodePublishSecretRef>;
            readOnly?: pulumi.Input<boolean>;
            volumeAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecAllInOneVolumesCsiNodePublishSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesCsiNodePublishSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesCsiPatch {
            driver?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            nodePublishSecretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesCsiNodePublishSecretRefPatch>;
            readOnly?: pulumi.Input<boolean>;
            volumeAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecAllInOneVolumesDownwardAPI {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesDownwardAPIItems>[]>;
        }

        export interface JaegerSpecAllInOneVolumesDownwardAPIItems {
            fieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesDownwardAPIItemsFieldRef>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesDownwardAPIItemsResourceFieldRef>;
        }

        export interface JaegerSpecAllInOneVolumesDownwardAPIItemsFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesDownwardAPIItemsFieldRefPatch {
            apiVersion?: pulumi.Input<string>;
            fieldPath?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesDownwardAPIItemsPatch {
            fieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesDownwardAPIItemsFieldRefPatch>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesDownwardAPIItemsResourceFieldRefPatch>;
        }

        export interface JaegerSpecAllInOneVolumesDownwardAPIItemsResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<number | string>;
            resource?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesDownwardAPIItemsResourceFieldRefPatch {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<number | string>;
            resource?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesDownwardAPIPatch {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesDownwardAPIItemsPatch>[]>;
        }

        export interface JaegerSpecAllInOneVolumesEmptyDir {
            medium?: pulumi.Input<string>;
            sizeLimit?: pulumi.Input<number | string>;
        }

        export interface JaegerSpecAllInOneVolumesEmptyDirPatch {
            medium?: pulumi.Input<string>;
            sizeLimit?: pulumi.Input<number | string>;
        }

        export interface JaegerSpecAllInOneVolumesEphemeral {
            volumeClaimTemplate?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesEphemeralVolumeClaimTemplate>;
        }

        export interface JaegerSpecAllInOneVolumesEphemeralPatch {
            volumeClaimTemplate?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesEphemeralVolumeClaimTemplatePatch>;
        }

        export interface JaegerSpecAllInOneVolumesEphemeralVolumeClaimTemplate {
            metadata?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesEphemeralVolumeClaimTemplateMetadata>;
            spec?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesEphemeralVolumeClaimTemplateSpec>;
        }

        export interface JaegerSpecAllInOneVolumesEphemeralVolumeClaimTemplateMetadata {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesEphemeralVolumeClaimTemplateMetadataPatch {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesEphemeralVolumeClaimTemplatePatch {
            metadata?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesEphemeralVolumeClaimTemplateMetadataPatch>;
            spec?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesEphemeralVolumeClaimTemplateSpecPatch>;
        }

        export interface JaegerSpecAllInOneVolumesEphemeralVolumeClaimTemplateSpec {
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            dataSource?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesEphemeralVolumeClaimTemplateSpecDataSource>;
            dataSourceRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef>;
            resources?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesEphemeralVolumeClaimTemplateSpecResources>;
            selector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesEphemeralVolumeClaimTemplateSpecSelector>;
            storageClassName?: pulumi.Input<string>;
            volumeMode?: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesEphemeralVolumeClaimTemplateSpecDataSource {
            apiGroup?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch {
            apiGroup?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef {
            apiGroup?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch {
            apiGroup?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesEphemeralVolumeClaimTemplateSpecPatch {
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            dataSource?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch>;
            dataSourceRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch>;
            resources?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesEphemeralVolumeClaimTemplateSpecResourcesPatch>;
            selector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesEphemeralVolumeClaimTemplateSpecSelectorPatch>;
            storageClassName?: pulumi.Input<string>;
            volumeMode?: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesEphemeralVolumeClaimTemplateSpecResources {
            claims?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesEphemeralVolumeClaimTemplateSpecResourcesClaims>[]>;
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        export interface JaegerSpecAllInOneVolumesEphemeralVolumeClaimTemplateSpecResourcesClaims {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesEphemeralVolumeClaimTemplateSpecResourcesClaimsPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesEphemeralVolumeClaimTemplateSpecResourcesPatch {
            claims?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesEphemeralVolumeClaimTemplateSpecResourcesClaimsPatch>[]>;
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        export interface JaegerSpecAllInOneVolumesEphemeralVolumeClaimTemplateSpecSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecAllInOneVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAllInOneVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAllInOneVolumesEphemeralVolumeClaimTemplateSpecSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecAllInOneVolumesFc {
            fsType?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            targetWWNs?: pulumi.Input<pulumi.Input<string>[]>;
            wwids?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAllInOneVolumesFcPatch {
            fsType?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            targetWWNs?: pulumi.Input<pulumi.Input<string>[]>;
            wwids?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecAllInOneVolumesFlexVolume {
            driver?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesFlexVolumeSecretRef>;
        }

        export interface JaegerSpecAllInOneVolumesFlexVolumePatch {
            driver?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesFlexVolumeSecretRefPatch>;
        }

        export interface JaegerSpecAllInOneVolumesFlexVolumeSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesFlexVolumeSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesFlocker {
            datasetName?: pulumi.Input<string>;
            datasetUUID?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesFlockerPatch {
            datasetName?: pulumi.Input<string>;
            datasetUUID?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesGcePersistentDisk {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            pdName?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecAllInOneVolumesGcePersistentDiskPatch {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            pdName?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecAllInOneVolumesGitRepo {
            directory?: pulumi.Input<string>;
            repository?: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesGitRepoPatch {
            directory?: pulumi.Input<string>;
            repository?: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesGlusterfs {
            endpoints?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecAllInOneVolumesGlusterfsPatch {
            endpoints?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecAllInOneVolumesHostPath {
            path?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesHostPathPatch {
            path?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesIscsi {
            chapAuthDiscovery?: pulumi.Input<boolean>;
            chapAuthSession?: pulumi.Input<boolean>;
            fsType?: pulumi.Input<string>;
            initiatorName?: pulumi.Input<string>;
            iqn?: pulumi.Input<string>;
            iscsiInterface?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            portals?: pulumi.Input<pulumi.Input<string>[]>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesIscsiSecretRef>;
            targetPortal?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesIscsiPatch {
            chapAuthDiscovery?: pulumi.Input<boolean>;
            chapAuthSession?: pulumi.Input<boolean>;
            fsType?: pulumi.Input<string>;
            initiatorName?: pulumi.Input<string>;
            iqn?: pulumi.Input<string>;
            iscsiInterface?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            portals?: pulumi.Input<pulumi.Input<string>[]>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesIscsiSecretRefPatch>;
            targetPortal?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesIscsiSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesIscsiSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesNfs {
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            server?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesNfsPatch {
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            server?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesPatch {
            awsElasticBlockStore?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesAwsElasticBlockStorePatch>;
            azureDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesAzureDiskPatch>;
            azureFile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesAzureFilePatch>;
            cephfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesCephfsPatch>;
            cinder?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesCinderPatch>;
            configMap?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesConfigMapPatch>;
            csi?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesCsiPatch>;
            downwardAPI?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesDownwardAPIPatch>;
            emptyDir?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesEmptyDirPatch>;
            ephemeral?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesEphemeralPatch>;
            fc?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesFcPatch>;
            flexVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesFlexVolumePatch>;
            flocker?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesFlockerPatch>;
            gcePersistentDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesGcePersistentDiskPatch>;
            gitRepo?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesGitRepoPatch>;
            glusterfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesGlusterfsPatch>;
            hostPath?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesHostPathPatch>;
            iscsi?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesIscsiPatch>;
            name?: pulumi.Input<string>;
            nfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesNfsPatch>;
            persistentVolumeClaim?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesPersistentVolumeClaimPatch>;
            photonPersistentDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesPhotonPersistentDiskPatch>;
            portworxVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesPortworxVolumePatch>;
            projected?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesProjectedPatch>;
            quobyte?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesQuobytePatch>;
            rbd?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesRbdPatch>;
            scaleIO?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesScaleIOPatch>;
            secret?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesSecretPatch>;
            storageos?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesStorageosPatch>;
            vsphereVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesVsphereVolumePatch>;
        }

        export interface JaegerSpecAllInOneVolumesPersistentVolumeClaim {
            claimName?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecAllInOneVolumesPersistentVolumeClaimPatch {
            claimName?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecAllInOneVolumesPhotonPersistentDisk {
            fsType?: pulumi.Input<string>;
            pdID?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesPhotonPersistentDiskPatch {
            fsType?: pulumi.Input<string>;
            pdID?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesPortworxVolume {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesPortworxVolumePatch {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesProjected {
            defaultMode?: pulumi.Input<number>;
            sources?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesProjectedSources>[]>;
        }

        export interface JaegerSpecAllInOneVolumesProjectedPatch {
            defaultMode?: pulumi.Input<number>;
            sources?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesProjectedSourcesPatch>[]>;
        }

        export interface JaegerSpecAllInOneVolumesProjectedSources {
            configMap?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesProjectedSourcesConfigMap>;
            downwardAPI?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesProjectedSourcesDownwardAPI>;
            secret?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesProjectedSourcesSecret>;
            serviceAccountToken?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesProjectedSourcesServiceAccountToken>;
        }

        export interface JaegerSpecAllInOneVolumesProjectedSourcesConfigMap {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesProjectedSourcesConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecAllInOneVolumesProjectedSourcesConfigMapItems {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesProjectedSourcesConfigMapItemsPatch {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesProjectedSourcesConfigMapPatch {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesProjectedSourcesConfigMapItemsPatch>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecAllInOneVolumesProjectedSourcesDownwardAPI {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesProjectedSourcesDownwardAPIItems>[]>;
        }

        export interface JaegerSpecAllInOneVolumesProjectedSourcesDownwardAPIItems {
            fieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesProjectedSourcesDownwardAPIItemsFieldRef>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef>;
        }

        export interface JaegerSpecAllInOneVolumesProjectedSourcesDownwardAPIItemsFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesProjectedSourcesDownwardAPIItemsFieldRefPatch {
            apiVersion?: pulumi.Input<string>;
            fieldPath?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesProjectedSourcesDownwardAPIItemsPatch {
            fieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesProjectedSourcesDownwardAPIItemsFieldRefPatch>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatch>;
        }

        export interface JaegerSpecAllInOneVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<number | string>;
            resource?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatch {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<number | string>;
            resource?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesProjectedSourcesDownwardAPIPatch {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesProjectedSourcesDownwardAPIItemsPatch>[]>;
        }

        export interface JaegerSpecAllInOneVolumesProjectedSourcesPatch {
            configMap?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesProjectedSourcesConfigMapPatch>;
            downwardAPI?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesProjectedSourcesDownwardAPIPatch>;
            secret?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesProjectedSourcesSecretPatch>;
            serviceAccountToken?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesProjectedSourcesServiceAccountTokenPatch>;
        }

        export interface JaegerSpecAllInOneVolumesProjectedSourcesSecret {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesProjectedSourcesSecretItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecAllInOneVolumesProjectedSourcesSecretItems {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesProjectedSourcesSecretItemsPatch {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesProjectedSourcesSecretPatch {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesProjectedSourcesSecretItemsPatch>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecAllInOneVolumesProjectedSourcesServiceAccountToken {
            audience?: pulumi.Input<string>;
            expirationSeconds?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesProjectedSourcesServiceAccountTokenPatch {
            audience?: pulumi.Input<string>;
            expirationSeconds?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesQuobyte {
            group?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            registry?: pulumi.Input<string>;
            tenant?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
            volume?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesQuobytePatch {
            group?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            registry?: pulumi.Input<string>;
            tenant?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
            volume?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesRbd {
            fsType?: pulumi.Input<string>;
            image?: pulumi.Input<string>;
            keyring?: pulumi.Input<string>;
            monitors?: pulumi.Input<pulumi.Input<string>[]>;
            pool?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesRbdSecretRef>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesRbdPatch {
            fsType?: pulumi.Input<string>;
            image?: pulumi.Input<string>;
            keyring?: pulumi.Input<string>;
            monitors?: pulumi.Input<pulumi.Input<string>[]>;
            pool?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesRbdSecretRefPatch>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesRbdSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesRbdSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesScaleIO {
            fsType?: pulumi.Input<string>;
            gateway?: pulumi.Input<string>;
            protectionDomain?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesScaleIOSecretRef>;
            sslEnabled?: pulumi.Input<boolean>;
            storageMode?: pulumi.Input<string>;
            storagePool?: pulumi.Input<string>;
            system?: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesScaleIOPatch {
            fsType?: pulumi.Input<string>;
            gateway?: pulumi.Input<string>;
            protectionDomain?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesScaleIOSecretRefPatch>;
            sslEnabled?: pulumi.Input<boolean>;
            storageMode?: pulumi.Input<string>;
            storagePool?: pulumi.Input<string>;
            system?: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesScaleIOSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesScaleIOSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesSecret {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesSecretItems>[]>;
            optional?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesSecretItems {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesSecretItemsPatch {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesSecretPatch {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesSecretItemsPatch>[]>;
            optional?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesStorageos {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesStorageosSecretRef>;
            volumeName?: pulumi.Input<string>;
            volumeNamespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesStorageosPatch {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOneVolumesStorageosSecretRefPatch>;
            volumeName?: pulumi.Input<string>;
            volumeNamespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesStorageosSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesStorageosSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesVsphereVolume {
            fsType?: pulumi.Input<string>;
            storagePolicyID?: pulumi.Input<string>;
            storagePolicyName?: pulumi.Input<string>;
            volumePath?: pulumi.Input<string>;
        }

        export interface JaegerSpecAllInOneVolumesVsphereVolumePatch {
            fsType?: pulumi.Input<string>;
            storagePolicyID?: pulumi.Input<string>;
            storagePolicyName?: pulumi.Input<string>;
            volumePath?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollector {
            affinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinity>;
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            autoscale?: pulumi.Input<boolean>;
            config?: pulumi.Input<{[key: string]: any}>;
            containerSecurityContext?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorContainerSecurityContext>;
            image?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorImagePullSecrets>[]>;
            kafkaSecretName?: pulumi.Input<string>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            livenessProbe?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorLivenessProbe>;
            maxReplicas?: pulumi.Input<number>;
            minReplicas?: pulumi.Input<number>;
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            options?: pulumi.Input<{[key: string]: any}>;
            priorityClassName?: pulumi.Input<string>;
            replicas?: pulumi.Input<number>;
            resources?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorResources>;
            securityContext?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorSecurityContext>;
            serviceAccount?: pulumi.Input<string>;
            serviceType?: pulumi.Input<string>;
            strategy?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorStrategy>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorTolerations>[]>;
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumeMounts>[]>;
            volumes?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumes>[]>;
        }

        export interface JaegerSpecCollectorAffinity {
            nodeAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityNodeAffinity>;
            podAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityPodAffinity>;
            podAntiAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityPodAntiAffinity>;
        }

        export interface JaegerSpecCollectorAffinityNodeAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution>;
        }

        export interface JaegerSpecCollectorAffinityNodeAffinityPatch {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch>;
        }

        export interface JaegerSpecCollectorAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecCollectorAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            preference?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecCollectorAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields>[]>;
        }

        export interface JaegerSpecCollectorAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecCollectorAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecCollectorAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecCollectorAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecCollectorAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch>[]>;
        }

        export interface JaegerSpecCollectorAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            nodeSelectorTerms?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms>[]>;
        }

        export interface JaegerSpecCollectorAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields>[]>;
        }

        export interface JaegerSpecCollectorAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecCollectorAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecCollectorAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecCollectorAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecCollectorAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch>[]>;
        }

        export interface JaegerSpecCollectorAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            nodeSelectorTerms?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch>[]>;
        }

        export interface JaegerSpecCollectorAffinityPatch {
            nodeAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityNodeAffinityPatch>;
            podAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityPodAffinityPatch>;
            podAntiAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityPodAntiAffinityPatch>;
        }

        export interface JaegerSpecCollectorAffinityPodAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface JaegerSpecCollectorAffinityPodAffinityPatch {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
        }

        export interface JaegerSpecCollectorAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecCollectorAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecCollectorAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecCollectorAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecCollectorAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecCollectorAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecCollectorAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecCollectorAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecCollectorAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecCollectorAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecCollectorAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecCollectorAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecCollectorAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecCollectorAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecCollectorAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecCollectorAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecCollectorAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecCollectorAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecCollectorAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorAffinityPodAntiAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface JaegerSpecCollectorAffinityPodAntiAffinityPatch {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
        }

        export interface JaegerSpecCollectorAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecCollectorAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecCollectorAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecCollectorAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecCollectorAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecCollectorAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecCollectorAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecCollectorAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecCollectorAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecCollectorAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecCollectorAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecCollectorAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecCollectorAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecCollectorAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecCollectorAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecCollectorAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecCollectorAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecCollectorAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecCollectorAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorContainerSecurityContext {
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            capabilities?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorContainerSecurityContextCapabilities>;
            privileged?: pulumi.Input<boolean>;
            procMount?: pulumi.Input<string>;
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorContainerSecurityContextSeLinuxOptions>;
            seccompProfile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorContainerSecurityContextSeccompProfile>;
            windowsOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorContainerSecurityContextWindowsOptions>;
        }

        export interface JaegerSpecCollectorContainerSecurityContextCapabilities {
            add?: pulumi.Input<pulumi.Input<string>[]>;
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecCollectorContainerSecurityContextCapabilitiesPatch {
            add?: pulumi.Input<pulumi.Input<string>[]>;
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecCollectorContainerSecurityContextPatch {
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            capabilities?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorContainerSecurityContextCapabilitiesPatch>;
            privileged?: pulumi.Input<boolean>;
            procMount?: pulumi.Input<string>;
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorContainerSecurityContextSeLinuxOptionsPatch>;
            seccompProfile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorContainerSecurityContextSeccompProfilePatch>;
            windowsOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorContainerSecurityContextWindowsOptionsPatch>;
        }

        export interface JaegerSpecCollectorContainerSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorContainerSecurityContextSeLinuxOptionsPatch {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorContainerSecurityContextSeccompProfile {
            localhostProfile?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorContainerSecurityContextSeccompProfilePatch {
            localhostProfile?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorContainerSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            hostProcess?: pulumi.Input<boolean>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorContainerSecurityContextWindowsOptionsPatch {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            hostProcess?: pulumi.Input<boolean>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorImagePullSecrets {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorImagePullSecretsPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorLivenessProbe {
            exec?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorLivenessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            grpc?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorLivenessProbeGrpc>;
            httpGet?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorLivenessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorLivenessProbeTcpSocket>;
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface JaegerSpecCollectorLivenessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecCollectorLivenessProbeExecPatch {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecCollectorLivenessProbeGrpc {
            port?: pulumi.Input<number>;
            service?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorLivenessProbeGrpcPatch {
            port?: pulumi.Input<number>;
            service?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorLivenessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorLivenessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port?: pulumi.Input<number | string>;
            scheme?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorLivenessProbeHttpGetHttpHeaders {
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorLivenessProbeHttpGetHttpHeadersPatch {
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorLivenessProbeHttpGetPatch {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorLivenessProbeHttpGetHttpHeadersPatch>[]>;
            path?: pulumi.Input<string>;
            port?: pulumi.Input<number | string>;
            scheme?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorLivenessProbePatch {
            exec?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorLivenessProbeExecPatch>;
            failureThreshold?: pulumi.Input<number>;
            grpc?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorLivenessProbeGrpcPatch>;
            httpGet?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorLivenessProbeHttpGetPatch>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorLivenessProbeTcpSocketPatch>;
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface JaegerSpecCollectorLivenessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port?: pulumi.Input<number | string>;
        }

        export interface JaegerSpecCollectorLivenessProbeTcpSocketPatch {
            host?: pulumi.Input<string>;
            port?: pulumi.Input<number | string>;
        }

        export interface JaegerSpecCollectorPatch {
            affinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorAffinityPatch>;
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            autoscale?: pulumi.Input<boolean>;
            config?: pulumi.Input<{[key: string]: any}>;
            containerSecurityContext?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorContainerSecurityContextPatch>;
            image?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorImagePullSecretsPatch>[]>;
            kafkaSecretName?: pulumi.Input<string>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            livenessProbe?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorLivenessProbePatch>;
            maxReplicas?: pulumi.Input<number>;
            minReplicas?: pulumi.Input<number>;
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            options?: pulumi.Input<{[key: string]: any}>;
            priorityClassName?: pulumi.Input<string>;
            replicas?: pulumi.Input<number>;
            resources?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorResourcesPatch>;
            securityContext?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorSecurityContextPatch>;
            serviceAccount?: pulumi.Input<string>;
            serviceType?: pulumi.Input<string>;
            strategy?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorStrategyPatch>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorTolerationsPatch>[]>;
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumeMountsPatch>[]>;
            volumes?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesPatch>[]>;
        }

        export interface JaegerSpecCollectorResources {
            claims?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorResourcesClaims>[]>;
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        export interface JaegerSpecCollectorResourcesClaims {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorResourcesClaimsPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorResourcesPatch {
            claims?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorResourcesClaimsPatch>[]>;
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        export interface JaegerSpecCollectorSecurityContext {
            fsGroup?: pulumi.Input<number>;
            fsGroupChangePolicy?: pulumi.Input<string>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorSecurityContextSeLinuxOptions>;
            seccompProfile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorSecurityContextSeccompProfile>;
            supplementalGroups?: pulumi.Input<pulumi.Input<number>[]>;
            sysctls?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorSecurityContextSysctls>[]>;
            windowsOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorSecurityContextWindowsOptions>;
        }

        export interface JaegerSpecCollectorSecurityContextPatch {
            fsGroup?: pulumi.Input<number>;
            fsGroupChangePolicy?: pulumi.Input<string>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorSecurityContextSeLinuxOptionsPatch>;
            seccompProfile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorSecurityContextSeccompProfilePatch>;
            supplementalGroups?: pulumi.Input<pulumi.Input<number>[]>;
            sysctls?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorSecurityContextSysctlsPatch>[]>;
            windowsOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorSecurityContextWindowsOptionsPatch>;
        }

        export interface JaegerSpecCollectorSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorSecurityContextSeLinuxOptionsPatch {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorSecurityContextSeccompProfile {
            localhostProfile?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorSecurityContextSeccompProfilePatch {
            localhostProfile?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorSecurityContextSysctls {
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorSecurityContextSysctlsPatch {
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            hostProcess?: pulumi.Input<boolean>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorSecurityContextWindowsOptionsPatch {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            hostProcess?: pulumi.Input<boolean>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorStrategy {
            rollingUpdate?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorStrategyRollingUpdate>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorStrategyPatch {
            rollingUpdate?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorStrategyRollingUpdatePatch>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorStrategyRollingUpdate {
            maxSurge?: pulumi.Input<number | string>;
            maxUnavailable?: pulumi.Input<number | string>;
        }

        export interface JaegerSpecCollectorStrategyRollingUpdatePatch {
            maxSurge?: pulumi.Input<number | string>;
            maxUnavailable?: pulumi.Input<number | string>;
        }

        export interface JaegerSpecCollectorTolerations {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorTolerationsPatch {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumeMounts {
            mountPath?: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumeMountsPatch {
            mountPath?: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumes {
            awsElasticBlockStore?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesAwsElasticBlockStore>;
            azureDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesAzureDisk>;
            azureFile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesAzureFile>;
            cephfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesCephfs>;
            cinder?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesCinder>;
            configMap?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesConfigMap>;
            csi?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesCsi>;
            downwardAPI?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesDownwardAPI>;
            emptyDir?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesEmptyDir>;
            ephemeral?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesEphemeral>;
            fc?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesFc>;
            flexVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesFlexVolume>;
            flocker?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesFlocker>;
            gcePersistentDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesGcePersistentDisk>;
            gitRepo?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesGitRepo>;
            glusterfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesGlusterfs>;
            hostPath?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesHostPath>;
            iscsi?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesIscsi>;
            name?: pulumi.Input<string>;
            nfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesNfs>;
            persistentVolumeClaim?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesPersistentVolumeClaim>;
            photonPersistentDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesPhotonPersistentDisk>;
            portworxVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesPortworxVolume>;
            projected?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesProjected>;
            quobyte?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesQuobyte>;
            rbd?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesRbd>;
            scaleIO?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesScaleIO>;
            secret?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesSecret>;
            storageos?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesStorageos>;
            vsphereVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesVsphereVolume>;
        }

        export interface JaegerSpecCollectorVolumesAwsElasticBlockStore {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesAwsElasticBlockStorePatch {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesAzureDisk {
            cachingMode?: pulumi.Input<string>;
            diskName?: pulumi.Input<string>;
            diskURI?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecCollectorVolumesAzureDiskPatch {
            cachingMode?: pulumi.Input<string>;
            diskName?: pulumi.Input<string>;
            diskURI?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecCollectorVolumesAzureFile {
            readOnly?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
            shareName?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesAzureFilePatch {
            readOnly?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
            shareName?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesCephfs {
            monitors?: pulumi.Input<pulumi.Input<string>[]>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretFile?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesCephfsSecretRef>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesCephfsPatch {
            monitors?: pulumi.Input<pulumi.Input<string>[]>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretFile?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesCephfsSecretRefPatch>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesCephfsSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesCephfsSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesCinder {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesCinderSecretRef>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesCinderPatch {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesCinderSecretRefPatch>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesCinderSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesCinderSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesConfigMap {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecCollectorVolumesConfigMapItems {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesConfigMapItemsPatch {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesConfigMapPatch {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesConfigMapItemsPatch>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecCollectorVolumesCsi {
            driver?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            nodePublishSecretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesCsiNodePublishSecretRef>;
            readOnly?: pulumi.Input<boolean>;
            volumeAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecCollectorVolumesCsiNodePublishSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesCsiNodePublishSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesCsiPatch {
            driver?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            nodePublishSecretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesCsiNodePublishSecretRefPatch>;
            readOnly?: pulumi.Input<boolean>;
            volumeAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecCollectorVolumesDownwardAPI {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesDownwardAPIItems>[]>;
        }

        export interface JaegerSpecCollectorVolumesDownwardAPIItems {
            fieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesDownwardAPIItemsFieldRef>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesDownwardAPIItemsResourceFieldRef>;
        }

        export interface JaegerSpecCollectorVolumesDownwardAPIItemsFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesDownwardAPIItemsFieldRefPatch {
            apiVersion?: pulumi.Input<string>;
            fieldPath?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesDownwardAPIItemsPatch {
            fieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesDownwardAPIItemsFieldRefPatch>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesDownwardAPIItemsResourceFieldRefPatch>;
        }

        export interface JaegerSpecCollectorVolumesDownwardAPIItemsResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<number | string>;
            resource?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesDownwardAPIItemsResourceFieldRefPatch {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<number | string>;
            resource?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesDownwardAPIPatch {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesDownwardAPIItemsPatch>[]>;
        }

        export interface JaegerSpecCollectorVolumesEmptyDir {
            medium?: pulumi.Input<string>;
            sizeLimit?: pulumi.Input<number | string>;
        }

        export interface JaegerSpecCollectorVolumesEmptyDirPatch {
            medium?: pulumi.Input<string>;
            sizeLimit?: pulumi.Input<number | string>;
        }

        export interface JaegerSpecCollectorVolumesEphemeral {
            volumeClaimTemplate?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesEphemeralVolumeClaimTemplate>;
        }

        export interface JaegerSpecCollectorVolumesEphemeralPatch {
            volumeClaimTemplate?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesEphemeralVolumeClaimTemplatePatch>;
        }

        export interface JaegerSpecCollectorVolumesEphemeralVolumeClaimTemplate {
            metadata?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesEphemeralVolumeClaimTemplateMetadata>;
            spec?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesEphemeralVolumeClaimTemplateSpec>;
        }

        export interface JaegerSpecCollectorVolumesEphemeralVolumeClaimTemplateMetadata {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesEphemeralVolumeClaimTemplateMetadataPatch {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesEphemeralVolumeClaimTemplatePatch {
            metadata?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesEphemeralVolumeClaimTemplateMetadataPatch>;
            spec?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesEphemeralVolumeClaimTemplateSpecPatch>;
        }

        export interface JaegerSpecCollectorVolumesEphemeralVolumeClaimTemplateSpec {
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            dataSource?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesEphemeralVolumeClaimTemplateSpecDataSource>;
            dataSourceRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef>;
            resources?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesEphemeralVolumeClaimTemplateSpecResources>;
            selector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesEphemeralVolumeClaimTemplateSpecSelector>;
            storageClassName?: pulumi.Input<string>;
            volumeMode?: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesEphemeralVolumeClaimTemplateSpecDataSource {
            apiGroup?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch {
            apiGroup?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef {
            apiGroup?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch {
            apiGroup?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesEphemeralVolumeClaimTemplateSpecPatch {
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            dataSource?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch>;
            dataSourceRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch>;
            resources?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesEphemeralVolumeClaimTemplateSpecResourcesPatch>;
            selector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesEphemeralVolumeClaimTemplateSpecSelectorPatch>;
            storageClassName?: pulumi.Input<string>;
            volumeMode?: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesEphemeralVolumeClaimTemplateSpecResources {
            claims?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesEphemeralVolumeClaimTemplateSpecResourcesClaims>[]>;
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        export interface JaegerSpecCollectorVolumesEphemeralVolumeClaimTemplateSpecResourcesClaims {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesEphemeralVolumeClaimTemplateSpecResourcesClaimsPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesEphemeralVolumeClaimTemplateSpecResourcesPatch {
            claims?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesEphemeralVolumeClaimTemplateSpecResourcesClaimsPatch>[]>;
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        export interface JaegerSpecCollectorVolumesEphemeralVolumeClaimTemplateSpecSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecCollectorVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecCollectorVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecCollectorVolumesEphemeralVolumeClaimTemplateSpecSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecCollectorVolumesFc {
            fsType?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            targetWWNs?: pulumi.Input<pulumi.Input<string>[]>;
            wwids?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecCollectorVolumesFcPatch {
            fsType?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            targetWWNs?: pulumi.Input<pulumi.Input<string>[]>;
            wwids?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecCollectorVolumesFlexVolume {
            driver?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesFlexVolumeSecretRef>;
        }

        export interface JaegerSpecCollectorVolumesFlexVolumePatch {
            driver?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesFlexVolumeSecretRefPatch>;
        }

        export interface JaegerSpecCollectorVolumesFlexVolumeSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesFlexVolumeSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesFlocker {
            datasetName?: pulumi.Input<string>;
            datasetUUID?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesFlockerPatch {
            datasetName?: pulumi.Input<string>;
            datasetUUID?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesGcePersistentDisk {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            pdName?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecCollectorVolumesGcePersistentDiskPatch {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            pdName?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecCollectorVolumesGitRepo {
            directory?: pulumi.Input<string>;
            repository?: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesGitRepoPatch {
            directory?: pulumi.Input<string>;
            repository?: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesGlusterfs {
            endpoints?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecCollectorVolumesGlusterfsPatch {
            endpoints?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecCollectorVolumesHostPath {
            path?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesHostPathPatch {
            path?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesIscsi {
            chapAuthDiscovery?: pulumi.Input<boolean>;
            chapAuthSession?: pulumi.Input<boolean>;
            fsType?: pulumi.Input<string>;
            initiatorName?: pulumi.Input<string>;
            iqn?: pulumi.Input<string>;
            iscsiInterface?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            portals?: pulumi.Input<pulumi.Input<string>[]>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesIscsiSecretRef>;
            targetPortal?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesIscsiPatch {
            chapAuthDiscovery?: pulumi.Input<boolean>;
            chapAuthSession?: pulumi.Input<boolean>;
            fsType?: pulumi.Input<string>;
            initiatorName?: pulumi.Input<string>;
            iqn?: pulumi.Input<string>;
            iscsiInterface?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            portals?: pulumi.Input<pulumi.Input<string>[]>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesIscsiSecretRefPatch>;
            targetPortal?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesIscsiSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesIscsiSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesNfs {
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            server?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesNfsPatch {
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            server?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesPatch {
            awsElasticBlockStore?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesAwsElasticBlockStorePatch>;
            azureDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesAzureDiskPatch>;
            azureFile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesAzureFilePatch>;
            cephfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesCephfsPatch>;
            cinder?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesCinderPatch>;
            configMap?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesConfigMapPatch>;
            csi?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesCsiPatch>;
            downwardAPI?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesDownwardAPIPatch>;
            emptyDir?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesEmptyDirPatch>;
            ephemeral?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesEphemeralPatch>;
            fc?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesFcPatch>;
            flexVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesFlexVolumePatch>;
            flocker?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesFlockerPatch>;
            gcePersistentDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesGcePersistentDiskPatch>;
            gitRepo?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesGitRepoPatch>;
            glusterfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesGlusterfsPatch>;
            hostPath?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesHostPathPatch>;
            iscsi?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesIscsiPatch>;
            name?: pulumi.Input<string>;
            nfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesNfsPatch>;
            persistentVolumeClaim?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesPersistentVolumeClaimPatch>;
            photonPersistentDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesPhotonPersistentDiskPatch>;
            portworxVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesPortworxVolumePatch>;
            projected?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesProjectedPatch>;
            quobyte?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesQuobytePatch>;
            rbd?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesRbdPatch>;
            scaleIO?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesScaleIOPatch>;
            secret?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesSecretPatch>;
            storageos?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesStorageosPatch>;
            vsphereVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesVsphereVolumePatch>;
        }

        export interface JaegerSpecCollectorVolumesPersistentVolumeClaim {
            claimName?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecCollectorVolumesPersistentVolumeClaimPatch {
            claimName?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecCollectorVolumesPhotonPersistentDisk {
            fsType?: pulumi.Input<string>;
            pdID?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesPhotonPersistentDiskPatch {
            fsType?: pulumi.Input<string>;
            pdID?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesPortworxVolume {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesPortworxVolumePatch {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesProjected {
            defaultMode?: pulumi.Input<number>;
            sources?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesProjectedSources>[]>;
        }

        export interface JaegerSpecCollectorVolumesProjectedPatch {
            defaultMode?: pulumi.Input<number>;
            sources?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesProjectedSourcesPatch>[]>;
        }

        export interface JaegerSpecCollectorVolumesProjectedSources {
            configMap?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesProjectedSourcesConfigMap>;
            downwardAPI?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesProjectedSourcesDownwardAPI>;
            secret?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesProjectedSourcesSecret>;
            serviceAccountToken?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesProjectedSourcesServiceAccountToken>;
        }

        export interface JaegerSpecCollectorVolumesProjectedSourcesConfigMap {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesProjectedSourcesConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecCollectorVolumesProjectedSourcesConfigMapItems {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesProjectedSourcesConfigMapItemsPatch {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesProjectedSourcesConfigMapPatch {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesProjectedSourcesConfigMapItemsPatch>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecCollectorVolumesProjectedSourcesDownwardAPI {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesProjectedSourcesDownwardAPIItems>[]>;
        }

        export interface JaegerSpecCollectorVolumesProjectedSourcesDownwardAPIItems {
            fieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesProjectedSourcesDownwardAPIItemsFieldRef>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef>;
        }

        export interface JaegerSpecCollectorVolumesProjectedSourcesDownwardAPIItemsFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesProjectedSourcesDownwardAPIItemsFieldRefPatch {
            apiVersion?: pulumi.Input<string>;
            fieldPath?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesProjectedSourcesDownwardAPIItemsPatch {
            fieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesProjectedSourcesDownwardAPIItemsFieldRefPatch>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatch>;
        }

        export interface JaegerSpecCollectorVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<number | string>;
            resource?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatch {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<number | string>;
            resource?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesProjectedSourcesDownwardAPIPatch {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesProjectedSourcesDownwardAPIItemsPatch>[]>;
        }

        export interface JaegerSpecCollectorVolumesProjectedSourcesPatch {
            configMap?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesProjectedSourcesConfigMapPatch>;
            downwardAPI?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesProjectedSourcesDownwardAPIPatch>;
            secret?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesProjectedSourcesSecretPatch>;
            serviceAccountToken?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesProjectedSourcesServiceAccountTokenPatch>;
        }

        export interface JaegerSpecCollectorVolumesProjectedSourcesSecret {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesProjectedSourcesSecretItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecCollectorVolumesProjectedSourcesSecretItems {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesProjectedSourcesSecretItemsPatch {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesProjectedSourcesSecretPatch {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesProjectedSourcesSecretItemsPatch>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecCollectorVolumesProjectedSourcesServiceAccountToken {
            audience?: pulumi.Input<string>;
            expirationSeconds?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesProjectedSourcesServiceAccountTokenPatch {
            audience?: pulumi.Input<string>;
            expirationSeconds?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesQuobyte {
            group?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            registry?: pulumi.Input<string>;
            tenant?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
            volume?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesQuobytePatch {
            group?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            registry?: pulumi.Input<string>;
            tenant?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
            volume?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesRbd {
            fsType?: pulumi.Input<string>;
            image?: pulumi.Input<string>;
            keyring?: pulumi.Input<string>;
            monitors?: pulumi.Input<pulumi.Input<string>[]>;
            pool?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesRbdSecretRef>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesRbdPatch {
            fsType?: pulumi.Input<string>;
            image?: pulumi.Input<string>;
            keyring?: pulumi.Input<string>;
            monitors?: pulumi.Input<pulumi.Input<string>[]>;
            pool?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesRbdSecretRefPatch>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesRbdSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesRbdSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesScaleIO {
            fsType?: pulumi.Input<string>;
            gateway?: pulumi.Input<string>;
            protectionDomain?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesScaleIOSecretRef>;
            sslEnabled?: pulumi.Input<boolean>;
            storageMode?: pulumi.Input<string>;
            storagePool?: pulumi.Input<string>;
            system?: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesScaleIOPatch {
            fsType?: pulumi.Input<string>;
            gateway?: pulumi.Input<string>;
            protectionDomain?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesScaleIOSecretRefPatch>;
            sslEnabled?: pulumi.Input<boolean>;
            storageMode?: pulumi.Input<string>;
            storagePool?: pulumi.Input<string>;
            system?: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesScaleIOSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesScaleIOSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesSecret {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesSecretItems>[]>;
            optional?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesSecretItems {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesSecretItemsPatch {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesSecretPatch {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesSecretItemsPatch>[]>;
            optional?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesStorageos {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesStorageosSecretRef>;
            volumeName?: pulumi.Input<string>;
            volumeNamespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesStorageosPatch {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorVolumesStorageosSecretRefPatch>;
            volumeName?: pulumi.Input<string>;
            volumeNamespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesStorageosSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesStorageosSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesVsphereVolume {
            fsType?: pulumi.Input<string>;
            storagePolicyID?: pulumi.Input<string>;
            storagePolicyName?: pulumi.Input<string>;
            volumePath?: pulumi.Input<string>;
        }

        export interface JaegerSpecCollectorVolumesVsphereVolumePatch {
            fsType?: pulumi.Input<string>;
            storagePolicyID?: pulumi.Input<string>;
            storagePolicyName?: pulumi.Input<string>;
            volumePath?: pulumi.Input<string>;
        }

        export interface JaegerSpecContainerSecurityContext {
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            capabilities?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecContainerSecurityContextCapabilities>;
            privileged?: pulumi.Input<boolean>;
            procMount?: pulumi.Input<string>;
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecContainerSecurityContextSeLinuxOptions>;
            seccompProfile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecContainerSecurityContextSeccompProfile>;
            windowsOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecContainerSecurityContextWindowsOptions>;
        }

        export interface JaegerSpecContainerSecurityContextCapabilities {
            add?: pulumi.Input<pulumi.Input<string>[]>;
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecContainerSecurityContextCapabilitiesPatch {
            add?: pulumi.Input<pulumi.Input<string>[]>;
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecContainerSecurityContextPatch {
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            capabilities?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecContainerSecurityContextCapabilitiesPatch>;
            privileged?: pulumi.Input<boolean>;
            procMount?: pulumi.Input<string>;
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecContainerSecurityContextSeLinuxOptionsPatch>;
            seccompProfile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecContainerSecurityContextSeccompProfilePatch>;
            windowsOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecContainerSecurityContextWindowsOptionsPatch>;
        }

        export interface JaegerSpecContainerSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecContainerSecurityContextSeLinuxOptionsPatch {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecContainerSecurityContextSeccompProfile {
            localhostProfile?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecContainerSecurityContextSeccompProfilePatch {
            localhostProfile?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecContainerSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            hostProcess?: pulumi.Input<boolean>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface JaegerSpecContainerSecurityContextWindowsOptionsPatch {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            hostProcess?: pulumi.Input<boolean>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface JaegerSpecImagePullSecrets {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecImagePullSecretsPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngester {
            affinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinity>;
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            autoscale?: pulumi.Input<boolean>;
            config?: pulumi.Input<{[key: string]: any}>;
            containerSecurityContext?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterContainerSecurityContext>;
            image?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterImagePullSecrets>[]>;
            kafkaSecretName?: pulumi.Input<string>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            livenessProbe?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterLivenessProbe>;
            maxReplicas?: pulumi.Input<number>;
            minReplicas?: pulumi.Input<number>;
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            options?: pulumi.Input<{[key: string]: any}>;
            replicas?: pulumi.Input<number>;
            resources?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterResources>;
            securityContext?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterSecurityContext>;
            serviceAccount?: pulumi.Input<string>;
            strategy?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterStrategy>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterTolerations>[]>;
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumeMounts>[]>;
            volumes?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumes>[]>;
        }

        export interface JaegerSpecIngesterAffinity {
            nodeAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityNodeAffinity>;
            podAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityPodAffinity>;
            podAntiAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityPodAntiAffinity>;
        }

        export interface JaegerSpecIngesterAffinityNodeAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution>;
        }

        export interface JaegerSpecIngesterAffinityNodeAffinityPatch {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch>;
        }

        export interface JaegerSpecIngesterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecIngesterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            preference?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecIngesterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields>[]>;
        }

        export interface JaegerSpecIngesterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngesterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngesterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngesterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngesterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch>[]>;
        }

        export interface JaegerSpecIngesterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            nodeSelectorTerms?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms>[]>;
        }

        export interface JaegerSpecIngesterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields>[]>;
        }

        export interface JaegerSpecIngesterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngesterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngesterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngesterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngesterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch>[]>;
        }

        export interface JaegerSpecIngesterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            nodeSelectorTerms?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch>[]>;
        }

        export interface JaegerSpecIngesterAffinityPatch {
            nodeAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityNodeAffinityPatch>;
            podAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityPodAffinityPatch>;
            podAntiAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityPodAntiAffinityPatch>;
        }

        export interface JaegerSpecIngesterAffinityPodAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface JaegerSpecIngesterAffinityPodAffinityPatch {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
        }

        export interface JaegerSpecIngesterAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecIngesterAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecIngesterAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecIngesterAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngesterAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngesterAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecIngesterAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecIngesterAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngesterAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngesterAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecIngesterAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecIngesterAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngesterAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngesterAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecIngesterAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecIngesterAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngesterAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngesterAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecIngesterAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterAffinityPodAntiAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface JaegerSpecIngesterAffinityPodAntiAffinityPatch {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
        }

        export interface JaegerSpecIngesterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecIngesterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecIngesterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecIngesterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngesterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngesterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecIngesterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecIngesterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngesterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngesterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecIngesterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecIngesterAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngesterAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngesterAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecIngesterAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecIngesterAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngesterAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngesterAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecIngesterAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterContainerSecurityContext {
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            capabilities?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterContainerSecurityContextCapabilities>;
            privileged?: pulumi.Input<boolean>;
            procMount?: pulumi.Input<string>;
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterContainerSecurityContextSeLinuxOptions>;
            seccompProfile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterContainerSecurityContextSeccompProfile>;
            windowsOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterContainerSecurityContextWindowsOptions>;
        }

        export interface JaegerSpecIngesterContainerSecurityContextCapabilities {
            add?: pulumi.Input<pulumi.Input<string>[]>;
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngesterContainerSecurityContextCapabilitiesPatch {
            add?: pulumi.Input<pulumi.Input<string>[]>;
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngesterContainerSecurityContextPatch {
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            capabilities?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterContainerSecurityContextCapabilitiesPatch>;
            privileged?: pulumi.Input<boolean>;
            procMount?: pulumi.Input<string>;
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterContainerSecurityContextSeLinuxOptionsPatch>;
            seccompProfile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterContainerSecurityContextSeccompProfilePatch>;
            windowsOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterContainerSecurityContextWindowsOptionsPatch>;
        }

        export interface JaegerSpecIngesterContainerSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterContainerSecurityContextSeLinuxOptionsPatch {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterContainerSecurityContextSeccompProfile {
            localhostProfile?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterContainerSecurityContextSeccompProfilePatch {
            localhostProfile?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterContainerSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            hostProcess?: pulumi.Input<boolean>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterContainerSecurityContextWindowsOptionsPatch {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            hostProcess?: pulumi.Input<boolean>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterImagePullSecrets {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterImagePullSecretsPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterLivenessProbe {
            exec?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterLivenessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            grpc?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterLivenessProbeGrpc>;
            httpGet?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterLivenessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterLivenessProbeTcpSocket>;
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface JaegerSpecIngesterLivenessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngesterLivenessProbeExecPatch {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngesterLivenessProbeGrpc {
            port?: pulumi.Input<number>;
            service?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterLivenessProbeGrpcPatch {
            port?: pulumi.Input<number>;
            service?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterLivenessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterLivenessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port?: pulumi.Input<number | string>;
            scheme?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterLivenessProbeHttpGetHttpHeaders {
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterLivenessProbeHttpGetHttpHeadersPatch {
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterLivenessProbeHttpGetPatch {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterLivenessProbeHttpGetHttpHeadersPatch>[]>;
            path?: pulumi.Input<string>;
            port?: pulumi.Input<number | string>;
            scheme?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterLivenessProbePatch {
            exec?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterLivenessProbeExecPatch>;
            failureThreshold?: pulumi.Input<number>;
            grpc?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterLivenessProbeGrpcPatch>;
            httpGet?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterLivenessProbeHttpGetPatch>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterLivenessProbeTcpSocketPatch>;
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface JaegerSpecIngesterLivenessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port?: pulumi.Input<number | string>;
        }

        export interface JaegerSpecIngesterLivenessProbeTcpSocketPatch {
            host?: pulumi.Input<string>;
            port?: pulumi.Input<number | string>;
        }

        export interface JaegerSpecIngesterPatch {
            affinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterAffinityPatch>;
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            autoscale?: pulumi.Input<boolean>;
            config?: pulumi.Input<{[key: string]: any}>;
            containerSecurityContext?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterContainerSecurityContextPatch>;
            image?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterImagePullSecretsPatch>[]>;
            kafkaSecretName?: pulumi.Input<string>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            livenessProbe?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterLivenessProbePatch>;
            maxReplicas?: pulumi.Input<number>;
            minReplicas?: pulumi.Input<number>;
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            options?: pulumi.Input<{[key: string]: any}>;
            replicas?: pulumi.Input<number>;
            resources?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterResourcesPatch>;
            securityContext?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterSecurityContextPatch>;
            serviceAccount?: pulumi.Input<string>;
            strategy?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterStrategyPatch>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterTolerationsPatch>[]>;
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumeMountsPatch>[]>;
            volumes?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesPatch>[]>;
        }

        export interface JaegerSpecIngesterResources {
            claims?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterResourcesClaims>[]>;
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        export interface JaegerSpecIngesterResourcesClaims {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterResourcesClaimsPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterResourcesPatch {
            claims?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterResourcesClaimsPatch>[]>;
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        export interface JaegerSpecIngesterSecurityContext {
            fsGroup?: pulumi.Input<number>;
            fsGroupChangePolicy?: pulumi.Input<string>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterSecurityContextSeLinuxOptions>;
            seccompProfile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterSecurityContextSeccompProfile>;
            supplementalGroups?: pulumi.Input<pulumi.Input<number>[]>;
            sysctls?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterSecurityContextSysctls>[]>;
            windowsOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterSecurityContextWindowsOptions>;
        }

        export interface JaegerSpecIngesterSecurityContextPatch {
            fsGroup?: pulumi.Input<number>;
            fsGroupChangePolicy?: pulumi.Input<string>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterSecurityContextSeLinuxOptionsPatch>;
            seccompProfile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterSecurityContextSeccompProfilePatch>;
            supplementalGroups?: pulumi.Input<pulumi.Input<number>[]>;
            sysctls?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterSecurityContextSysctlsPatch>[]>;
            windowsOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterSecurityContextWindowsOptionsPatch>;
        }

        export interface JaegerSpecIngesterSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterSecurityContextSeLinuxOptionsPatch {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterSecurityContextSeccompProfile {
            localhostProfile?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterSecurityContextSeccompProfilePatch {
            localhostProfile?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterSecurityContextSysctls {
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterSecurityContextSysctlsPatch {
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            hostProcess?: pulumi.Input<boolean>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterSecurityContextWindowsOptionsPatch {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            hostProcess?: pulumi.Input<boolean>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterStrategy {
            rollingUpdate?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterStrategyRollingUpdate>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterStrategyPatch {
            rollingUpdate?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterStrategyRollingUpdatePatch>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterStrategyRollingUpdate {
            maxSurge?: pulumi.Input<number | string>;
            maxUnavailable?: pulumi.Input<number | string>;
        }

        export interface JaegerSpecIngesterStrategyRollingUpdatePatch {
            maxSurge?: pulumi.Input<number | string>;
            maxUnavailable?: pulumi.Input<number | string>;
        }

        export interface JaegerSpecIngesterTolerations {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterTolerationsPatch {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumeMounts {
            mountPath?: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumeMountsPatch {
            mountPath?: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumes {
            awsElasticBlockStore?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesAwsElasticBlockStore>;
            azureDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesAzureDisk>;
            azureFile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesAzureFile>;
            cephfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesCephfs>;
            cinder?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesCinder>;
            configMap?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesConfigMap>;
            csi?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesCsi>;
            downwardAPI?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesDownwardAPI>;
            emptyDir?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesEmptyDir>;
            ephemeral?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesEphemeral>;
            fc?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesFc>;
            flexVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesFlexVolume>;
            flocker?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesFlocker>;
            gcePersistentDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesGcePersistentDisk>;
            gitRepo?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesGitRepo>;
            glusterfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesGlusterfs>;
            hostPath?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesHostPath>;
            iscsi?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesIscsi>;
            name?: pulumi.Input<string>;
            nfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesNfs>;
            persistentVolumeClaim?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesPersistentVolumeClaim>;
            photonPersistentDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesPhotonPersistentDisk>;
            portworxVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesPortworxVolume>;
            projected?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesProjected>;
            quobyte?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesQuobyte>;
            rbd?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesRbd>;
            scaleIO?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesScaleIO>;
            secret?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesSecret>;
            storageos?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesStorageos>;
            vsphereVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesVsphereVolume>;
        }

        export interface JaegerSpecIngesterVolumesAwsElasticBlockStore {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesAwsElasticBlockStorePatch {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesAzureDisk {
            cachingMode?: pulumi.Input<string>;
            diskName?: pulumi.Input<string>;
            diskURI?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecIngesterVolumesAzureDiskPatch {
            cachingMode?: pulumi.Input<string>;
            diskName?: pulumi.Input<string>;
            diskURI?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecIngesterVolumesAzureFile {
            readOnly?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
            shareName?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesAzureFilePatch {
            readOnly?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
            shareName?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesCephfs {
            monitors?: pulumi.Input<pulumi.Input<string>[]>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretFile?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesCephfsSecretRef>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesCephfsPatch {
            monitors?: pulumi.Input<pulumi.Input<string>[]>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretFile?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesCephfsSecretRefPatch>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesCephfsSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesCephfsSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesCinder {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesCinderSecretRef>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesCinderPatch {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesCinderSecretRefPatch>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesCinderSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesCinderSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesConfigMap {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecIngesterVolumesConfigMapItems {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesConfigMapItemsPatch {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesConfigMapPatch {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesConfigMapItemsPatch>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecIngesterVolumesCsi {
            driver?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            nodePublishSecretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesCsiNodePublishSecretRef>;
            readOnly?: pulumi.Input<boolean>;
            volumeAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecIngesterVolumesCsiNodePublishSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesCsiNodePublishSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesCsiPatch {
            driver?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            nodePublishSecretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesCsiNodePublishSecretRefPatch>;
            readOnly?: pulumi.Input<boolean>;
            volumeAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecIngesterVolumesDownwardAPI {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesDownwardAPIItems>[]>;
        }

        export interface JaegerSpecIngesterVolumesDownwardAPIItems {
            fieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesDownwardAPIItemsFieldRef>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesDownwardAPIItemsResourceFieldRef>;
        }

        export interface JaegerSpecIngesterVolumesDownwardAPIItemsFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesDownwardAPIItemsFieldRefPatch {
            apiVersion?: pulumi.Input<string>;
            fieldPath?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesDownwardAPIItemsPatch {
            fieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesDownwardAPIItemsFieldRefPatch>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesDownwardAPIItemsResourceFieldRefPatch>;
        }

        export interface JaegerSpecIngesterVolumesDownwardAPIItemsResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<number | string>;
            resource?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesDownwardAPIItemsResourceFieldRefPatch {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<number | string>;
            resource?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesDownwardAPIPatch {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesDownwardAPIItemsPatch>[]>;
        }

        export interface JaegerSpecIngesterVolumesEmptyDir {
            medium?: pulumi.Input<string>;
            sizeLimit?: pulumi.Input<number | string>;
        }

        export interface JaegerSpecIngesterVolumesEmptyDirPatch {
            medium?: pulumi.Input<string>;
            sizeLimit?: pulumi.Input<number | string>;
        }

        export interface JaegerSpecIngesterVolumesEphemeral {
            volumeClaimTemplate?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesEphemeralVolumeClaimTemplate>;
        }

        export interface JaegerSpecIngesterVolumesEphemeralPatch {
            volumeClaimTemplate?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesEphemeralVolumeClaimTemplatePatch>;
        }

        export interface JaegerSpecIngesterVolumesEphemeralVolumeClaimTemplate {
            metadata?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesEphemeralVolumeClaimTemplateMetadata>;
            spec?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesEphemeralVolumeClaimTemplateSpec>;
        }

        export interface JaegerSpecIngesterVolumesEphemeralVolumeClaimTemplateMetadata {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesEphemeralVolumeClaimTemplateMetadataPatch {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesEphemeralVolumeClaimTemplatePatch {
            metadata?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesEphemeralVolumeClaimTemplateMetadataPatch>;
            spec?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesEphemeralVolumeClaimTemplateSpecPatch>;
        }

        export interface JaegerSpecIngesterVolumesEphemeralVolumeClaimTemplateSpec {
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            dataSource?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesEphemeralVolumeClaimTemplateSpecDataSource>;
            dataSourceRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef>;
            resources?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesEphemeralVolumeClaimTemplateSpecResources>;
            selector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesEphemeralVolumeClaimTemplateSpecSelector>;
            storageClassName?: pulumi.Input<string>;
            volumeMode?: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesEphemeralVolumeClaimTemplateSpecDataSource {
            apiGroup?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch {
            apiGroup?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef {
            apiGroup?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch {
            apiGroup?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesEphemeralVolumeClaimTemplateSpecPatch {
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            dataSource?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch>;
            dataSourceRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch>;
            resources?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesEphemeralVolumeClaimTemplateSpecResourcesPatch>;
            selector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesEphemeralVolumeClaimTemplateSpecSelectorPatch>;
            storageClassName?: pulumi.Input<string>;
            volumeMode?: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesEphemeralVolumeClaimTemplateSpecResources {
            claims?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesEphemeralVolumeClaimTemplateSpecResourcesClaims>[]>;
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        export interface JaegerSpecIngesterVolumesEphemeralVolumeClaimTemplateSpecResourcesClaims {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesEphemeralVolumeClaimTemplateSpecResourcesClaimsPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesEphemeralVolumeClaimTemplateSpecResourcesPatch {
            claims?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesEphemeralVolumeClaimTemplateSpecResourcesClaimsPatch>[]>;
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        export interface JaegerSpecIngesterVolumesEphemeralVolumeClaimTemplateSpecSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecIngesterVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngesterVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngesterVolumesEphemeralVolumeClaimTemplateSpecSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecIngesterVolumesFc {
            fsType?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            targetWWNs?: pulumi.Input<pulumi.Input<string>[]>;
            wwids?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngesterVolumesFcPatch {
            fsType?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            targetWWNs?: pulumi.Input<pulumi.Input<string>[]>;
            wwids?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngesterVolumesFlexVolume {
            driver?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesFlexVolumeSecretRef>;
        }

        export interface JaegerSpecIngesterVolumesFlexVolumePatch {
            driver?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesFlexVolumeSecretRefPatch>;
        }

        export interface JaegerSpecIngesterVolumesFlexVolumeSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesFlexVolumeSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesFlocker {
            datasetName?: pulumi.Input<string>;
            datasetUUID?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesFlockerPatch {
            datasetName?: pulumi.Input<string>;
            datasetUUID?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesGcePersistentDisk {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            pdName?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecIngesterVolumesGcePersistentDiskPatch {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            pdName?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecIngesterVolumesGitRepo {
            directory?: pulumi.Input<string>;
            repository?: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesGitRepoPatch {
            directory?: pulumi.Input<string>;
            repository?: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesGlusterfs {
            endpoints?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecIngesterVolumesGlusterfsPatch {
            endpoints?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecIngesterVolumesHostPath {
            path?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesHostPathPatch {
            path?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesIscsi {
            chapAuthDiscovery?: pulumi.Input<boolean>;
            chapAuthSession?: pulumi.Input<boolean>;
            fsType?: pulumi.Input<string>;
            initiatorName?: pulumi.Input<string>;
            iqn?: pulumi.Input<string>;
            iscsiInterface?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            portals?: pulumi.Input<pulumi.Input<string>[]>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesIscsiSecretRef>;
            targetPortal?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesIscsiPatch {
            chapAuthDiscovery?: pulumi.Input<boolean>;
            chapAuthSession?: pulumi.Input<boolean>;
            fsType?: pulumi.Input<string>;
            initiatorName?: pulumi.Input<string>;
            iqn?: pulumi.Input<string>;
            iscsiInterface?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            portals?: pulumi.Input<pulumi.Input<string>[]>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesIscsiSecretRefPatch>;
            targetPortal?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesIscsiSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesIscsiSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesNfs {
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            server?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesNfsPatch {
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            server?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesPatch {
            awsElasticBlockStore?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesAwsElasticBlockStorePatch>;
            azureDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesAzureDiskPatch>;
            azureFile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesAzureFilePatch>;
            cephfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesCephfsPatch>;
            cinder?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesCinderPatch>;
            configMap?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesConfigMapPatch>;
            csi?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesCsiPatch>;
            downwardAPI?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesDownwardAPIPatch>;
            emptyDir?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesEmptyDirPatch>;
            ephemeral?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesEphemeralPatch>;
            fc?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesFcPatch>;
            flexVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesFlexVolumePatch>;
            flocker?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesFlockerPatch>;
            gcePersistentDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesGcePersistentDiskPatch>;
            gitRepo?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesGitRepoPatch>;
            glusterfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesGlusterfsPatch>;
            hostPath?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesHostPathPatch>;
            iscsi?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesIscsiPatch>;
            name?: pulumi.Input<string>;
            nfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesNfsPatch>;
            persistentVolumeClaim?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesPersistentVolumeClaimPatch>;
            photonPersistentDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesPhotonPersistentDiskPatch>;
            portworxVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesPortworxVolumePatch>;
            projected?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesProjectedPatch>;
            quobyte?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesQuobytePatch>;
            rbd?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesRbdPatch>;
            scaleIO?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesScaleIOPatch>;
            secret?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesSecretPatch>;
            storageos?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesStorageosPatch>;
            vsphereVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesVsphereVolumePatch>;
        }

        export interface JaegerSpecIngesterVolumesPersistentVolumeClaim {
            claimName?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecIngesterVolumesPersistentVolumeClaimPatch {
            claimName?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecIngesterVolumesPhotonPersistentDisk {
            fsType?: pulumi.Input<string>;
            pdID?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesPhotonPersistentDiskPatch {
            fsType?: pulumi.Input<string>;
            pdID?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesPortworxVolume {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesPortworxVolumePatch {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesProjected {
            defaultMode?: pulumi.Input<number>;
            sources?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesProjectedSources>[]>;
        }

        export interface JaegerSpecIngesterVolumesProjectedPatch {
            defaultMode?: pulumi.Input<number>;
            sources?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesProjectedSourcesPatch>[]>;
        }

        export interface JaegerSpecIngesterVolumesProjectedSources {
            configMap?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesProjectedSourcesConfigMap>;
            downwardAPI?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesProjectedSourcesDownwardAPI>;
            secret?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesProjectedSourcesSecret>;
            serviceAccountToken?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesProjectedSourcesServiceAccountToken>;
        }

        export interface JaegerSpecIngesterVolumesProjectedSourcesConfigMap {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesProjectedSourcesConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecIngesterVolumesProjectedSourcesConfigMapItems {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesProjectedSourcesConfigMapItemsPatch {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesProjectedSourcesConfigMapPatch {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesProjectedSourcesConfigMapItemsPatch>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecIngesterVolumesProjectedSourcesDownwardAPI {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesProjectedSourcesDownwardAPIItems>[]>;
        }

        export interface JaegerSpecIngesterVolumesProjectedSourcesDownwardAPIItems {
            fieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesProjectedSourcesDownwardAPIItemsFieldRef>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef>;
        }

        export interface JaegerSpecIngesterVolumesProjectedSourcesDownwardAPIItemsFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesProjectedSourcesDownwardAPIItemsFieldRefPatch {
            apiVersion?: pulumi.Input<string>;
            fieldPath?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesProjectedSourcesDownwardAPIItemsPatch {
            fieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesProjectedSourcesDownwardAPIItemsFieldRefPatch>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatch>;
        }

        export interface JaegerSpecIngesterVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<number | string>;
            resource?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatch {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<number | string>;
            resource?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesProjectedSourcesDownwardAPIPatch {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesProjectedSourcesDownwardAPIItemsPatch>[]>;
        }

        export interface JaegerSpecIngesterVolumesProjectedSourcesPatch {
            configMap?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesProjectedSourcesConfigMapPatch>;
            downwardAPI?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesProjectedSourcesDownwardAPIPatch>;
            secret?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesProjectedSourcesSecretPatch>;
            serviceAccountToken?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesProjectedSourcesServiceAccountTokenPatch>;
        }

        export interface JaegerSpecIngesterVolumesProjectedSourcesSecret {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesProjectedSourcesSecretItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecIngesterVolumesProjectedSourcesSecretItems {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesProjectedSourcesSecretItemsPatch {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesProjectedSourcesSecretPatch {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesProjectedSourcesSecretItemsPatch>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecIngesterVolumesProjectedSourcesServiceAccountToken {
            audience?: pulumi.Input<string>;
            expirationSeconds?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesProjectedSourcesServiceAccountTokenPatch {
            audience?: pulumi.Input<string>;
            expirationSeconds?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesQuobyte {
            group?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            registry?: pulumi.Input<string>;
            tenant?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
            volume?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesQuobytePatch {
            group?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            registry?: pulumi.Input<string>;
            tenant?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
            volume?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesRbd {
            fsType?: pulumi.Input<string>;
            image?: pulumi.Input<string>;
            keyring?: pulumi.Input<string>;
            monitors?: pulumi.Input<pulumi.Input<string>[]>;
            pool?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesRbdSecretRef>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesRbdPatch {
            fsType?: pulumi.Input<string>;
            image?: pulumi.Input<string>;
            keyring?: pulumi.Input<string>;
            monitors?: pulumi.Input<pulumi.Input<string>[]>;
            pool?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesRbdSecretRefPatch>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesRbdSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesRbdSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesScaleIO {
            fsType?: pulumi.Input<string>;
            gateway?: pulumi.Input<string>;
            protectionDomain?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesScaleIOSecretRef>;
            sslEnabled?: pulumi.Input<boolean>;
            storageMode?: pulumi.Input<string>;
            storagePool?: pulumi.Input<string>;
            system?: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesScaleIOPatch {
            fsType?: pulumi.Input<string>;
            gateway?: pulumi.Input<string>;
            protectionDomain?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesScaleIOSecretRefPatch>;
            sslEnabled?: pulumi.Input<boolean>;
            storageMode?: pulumi.Input<string>;
            storagePool?: pulumi.Input<string>;
            system?: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesScaleIOSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesScaleIOSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesSecret {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesSecretItems>[]>;
            optional?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesSecretItems {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesSecretItemsPatch {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesSecretPatch {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesSecretItemsPatch>[]>;
            optional?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesStorageos {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesStorageosSecretRef>;
            volumeName?: pulumi.Input<string>;
            volumeNamespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesStorageosPatch {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterVolumesStorageosSecretRefPatch>;
            volumeName?: pulumi.Input<string>;
            volumeNamespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesStorageosSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesStorageosSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesVsphereVolume {
            fsType?: pulumi.Input<string>;
            storagePolicyID?: pulumi.Input<string>;
            storagePolicyName?: pulumi.Input<string>;
            volumePath?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngesterVolumesVsphereVolumePatch {
            fsType?: pulumi.Input<string>;
            storagePolicyID?: pulumi.Input<string>;
            storagePolicyName?: pulumi.Input<string>;
            volumePath?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngress {
            affinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinity>;
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            containerSecurityContext?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressContainerSecurityContext>;
            enabled?: pulumi.Input<boolean>;
            hosts?: pulumi.Input<pulumi.Input<string>[]>;
            imagePullPolicy?: pulumi.Input<string>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressImagePullSecrets>[]>;
            ingressClassName?: pulumi.Input<string>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            livenessProbe?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressLivenessProbe>;
            openshift?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressOpenshift>;
            options?: pulumi.Input<{[key: string]: any}>;
            pathType?: pulumi.Input<string>;
            resources?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressResources>;
            secretName?: pulumi.Input<string>;
            security?: pulumi.Input<string>;
            securityContext?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressSecurityContext>;
            serviceAccount?: pulumi.Input<string>;
            tls?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressTls>[]>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressTolerations>[]>;
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumeMounts>[]>;
            volumes?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumes>[]>;
        }

        export interface JaegerSpecIngressAffinity {
            nodeAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityNodeAffinity>;
            podAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityPodAffinity>;
            podAntiAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityPodAntiAffinity>;
        }

        export interface JaegerSpecIngressAffinityNodeAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution>;
        }

        export interface JaegerSpecIngressAffinityNodeAffinityPatch {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch>;
        }

        export interface JaegerSpecIngressAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecIngressAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            preference?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecIngressAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields>[]>;
        }

        export interface JaegerSpecIngressAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngressAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngressAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngressAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngressAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch>[]>;
        }

        export interface JaegerSpecIngressAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            nodeSelectorTerms?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms>[]>;
        }

        export interface JaegerSpecIngressAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields>[]>;
        }

        export interface JaegerSpecIngressAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngressAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngressAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngressAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngressAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch>[]>;
        }

        export interface JaegerSpecIngressAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            nodeSelectorTerms?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch>[]>;
        }

        export interface JaegerSpecIngressAffinityPatch {
            nodeAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityNodeAffinityPatch>;
            podAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityPodAffinityPatch>;
            podAntiAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityPodAntiAffinityPatch>;
        }

        export interface JaegerSpecIngressAffinityPodAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface JaegerSpecIngressAffinityPodAffinityPatch {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
        }

        export interface JaegerSpecIngressAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecIngressAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecIngressAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecIngressAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngressAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngressAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecIngressAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecIngressAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngressAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngressAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecIngressAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecIngressAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngressAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngressAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecIngressAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecIngressAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngressAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngressAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecIngressAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressAffinityPodAntiAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface JaegerSpecIngressAffinityPodAntiAffinityPatch {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
        }

        export interface JaegerSpecIngressAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecIngressAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecIngressAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecIngressAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngressAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngressAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecIngressAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecIngressAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngressAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngressAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecIngressAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecIngressAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngressAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngressAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecIngressAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecIngressAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngressAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngressAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecIngressAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressContainerSecurityContext {
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            capabilities?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressContainerSecurityContextCapabilities>;
            privileged?: pulumi.Input<boolean>;
            procMount?: pulumi.Input<string>;
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressContainerSecurityContextSeLinuxOptions>;
            seccompProfile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressContainerSecurityContextSeccompProfile>;
            windowsOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressContainerSecurityContextWindowsOptions>;
        }

        export interface JaegerSpecIngressContainerSecurityContextCapabilities {
            add?: pulumi.Input<pulumi.Input<string>[]>;
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngressContainerSecurityContextCapabilitiesPatch {
            add?: pulumi.Input<pulumi.Input<string>[]>;
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngressContainerSecurityContextPatch {
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            capabilities?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressContainerSecurityContextCapabilitiesPatch>;
            privileged?: pulumi.Input<boolean>;
            procMount?: pulumi.Input<string>;
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressContainerSecurityContextSeLinuxOptionsPatch>;
            seccompProfile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressContainerSecurityContextSeccompProfilePatch>;
            windowsOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressContainerSecurityContextWindowsOptionsPatch>;
        }

        export interface JaegerSpecIngressContainerSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressContainerSecurityContextSeLinuxOptionsPatch {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressContainerSecurityContextSeccompProfile {
            localhostProfile?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressContainerSecurityContextSeccompProfilePatch {
            localhostProfile?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressContainerSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            hostProcess?: pulumi.Input<boolean>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressContainerSecurityContextWindowsOptionsPatch {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            hostProcess?: pulumi.Input<boolean>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressImagePullSecrets {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressImagePullSecretsPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressLivenessProbe {
            exec?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressLivenessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            grpc?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressLivenessProbeGrpc>;
            httpGet?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressLivenessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressLivenessProbeTcpSocket>;
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface JaegerSpecIngressLivenessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngressLivenessProbeExecPatch {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngressLivenessProbeGrpc {
            port?: pulumi.Input<number>;
            service?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressLivenessProbeGrpcPatch {
            port?: pulumi.Input<number>;
            service?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressLivenessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressLivenessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port?: pulumi.Input<number | string>;
            scheme?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressLivenessProbeHttpGetHttpHeaders {
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressLivenessProbeHttpGetHttpHeadersPatch {
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressLivenessProbeHttpGetPatch {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressLivenessProbeHttpGetHttpHeadersPatch>[]>;
            path?: pulumi.Input<string>;
            port?: pulumi.Input<number | string>;
            scheme?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressLivenessProbePatch {
            exec?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressLivenessProbeExecPatch>;
            failureThreshold?: pulumi.Input<number>;
            grpc?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressLivenessProbeGrpcPatch>;
            httpGet?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressLivenessProbeHttpGetPatch>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressLivenessProbeTcpSocketPatch>;
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface JaegerSpecIngressLivenessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port?: pulumi.Input<number | string>;
        }

        export interface JaegerSpecIngressLivenessProbeTcpSocketPatch {
            host?: pulumi.Input<string>;
            port?: pulumi.Input<number | string>;
        }

        export interface JaegerSpecIngressOpenshift {
            delegateUrls?: pulumi.Input<string>;
            htpasswdFile?: pulumi.Input<string>;
            sar?: pulumi.Input<string>;
            skipLogout?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecIngressOpenshiftPatch {
            delegateUrls?: pulumi.Input<string>;
            htpasswdFile?: pulumi.Input<string>;
            sar?: pulumi.Input<string>;
            skipLogout?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecIngressPatch {
            affinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressAffinityPatch>;
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            containerSecurityContext?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressContainerSecurityContextPatch>;
            enabled?: pulumi.Input<boolean>;
            hosts?: pulumi.Input<pulumi.Input<string>[]>;
            imagePullPolicy?: pulumi.Input<string>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressImagePullSecretsPatch>[]>;
            ingressClassName?: pulumi.Input<string>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            livenessProbe?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressLivenessProbePatch>;
            openshift?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressOpenshiftPatch>;
            options?: pulumi.Input<{[key: string]: any}>;
            pathType?: pulumi.Input<string>;
            resources?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressResourcesPatch>;
            secretName?: pulumi.Input<string>;
            security?: pulumi.Input<string>;
            securityContext?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressSecurityContextPatch>;
            serviceAccount?: pulumi.Input<string>;
            tls?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressTlsPatch>[]>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressTolerationsPatch>[]>;
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumeMountsPatch>[]>;
            volumes?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesPatch>[]>;
        }

        export interface JaegerSpecIngressResources {
            claims?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressResourcesClaims>[]>;
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        export interface JaegerSpecIngressResourcesClaims {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressResourcesClaimsPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressResourcesPatch {
            claims?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressResourcesClaimsPatch>[]>;
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        export interface JaegerSpecIngressSecurityContext {
            fsGroup?: pulumi.Input<number>;
            fsGroupChangePolicy?: pulumi.Input<string>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressSecurityContextSeLinuxOptions>;
            seccompProfile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressSecurityContextSeccompProfile>;
            supplementalGroups?: pulumi.Input<pulumi.Input<number>[]>;
            sysctls?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressSecurityContextSysctls>[]>;
            windowsOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressSecurityContextWindowsOptions>;
        }

        export interface JaegerSpecIngressSecurityContextPatch {
            fsGroup?: pulumi.Input<number>;
            fsGroupChangePolicy?: pulumi.Input<string>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressSecurityContextSeLinuxOptionsPatch>;
            seccompProfile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressSecurityContextSeccompProfilePatch>;
            supplementalGroups?: pulumi.Input<pulumi.Input<number>[]>;
            sysctls?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressSecurityContextSysctlsPatch>[]>;
            windowsOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressSecurityContextWindowsOptionsPatch>;
        }

        export interface JaegerSpecIngressSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressSecurityContextSeLinuxOptionsPatch {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressSecurityContextSeccompProfile {
            localhostProfile?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressSecurityContextSeccompProfilePatch {
            localhostProfile?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressSecurityContextSysctls {
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressSecurityContextSysctlsPatch {
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            hostProcess?: pulumi.Input<boolean>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressSecurityContextWindowsOptionsPatch {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            hostProcess?: pulumi.Input<boolean>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressTls {
            hosts?: pulumi.Input<pulumi.Input<string>[]>;
            secretName?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressTlsPatch {
            hosts?: pulumi.Input<pulumi.Input<string>[]>;
            secretName?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressTolerations {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressTolerationsPatch {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumeMounts {
            mountPath?: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumeMountsPatch {
            mountPath?: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumes {
            awsElasticBlockStore?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesAwsElasticBlockStore>;
            azureDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesAzureDisk>;
            azureFile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesAzureFile>;
            cephfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesCephfs>;
            cinder?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesCinder>;
            configMap?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesConfigMap>;
            csi?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesCsi>;
            downwardAPI?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesDownwardAPI>;
            emptyDir?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesEmptyDir>;
            ephemeral?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesEphemeral>;
            fc?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesFc>;
            flexVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesFlexVolume>;
            flocker?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesFlocker>;
            gcePersistentDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesGcePersistentDisk>;
            gitRepo?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesGitRepo>;
            glusterfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesGlusterfs>;
            hostPath?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesHostPath>;
            iscsi?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesIscsi>;
            name?: pulumi.Input<string>;
            nfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesNfs>;
            persistentVolumeClaim?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesPersistentVolumeClaim>;
            photonPersistentDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesPhotonPersistentDisk>;
            portworxVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesPortworxVolume>;
            projected?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesProjected>;
            quobyte?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesQuobyte>;
            rbd?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesRbd>;
            scaleIO?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesScaleIO>;
            secret?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesSecret>;
            storageos?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesStorageos>;
            vsphereVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesVsphereVolume>;
        }

        export interface JaegerSpecIngressVolumesAwsElasticBlockStore {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesAwsElasticBlockStorePatch {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesAzureDisk {
            cachingMode?: pulumi.Input<string>;
            diskName?: pulumi.Input<string>;
            diskURI?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecIngressVolumesAzureDiskPatch {
            cachingMode?: pulumi.Input<string>;
            diskName?: pulumi.Input<string>;
            diskURI?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecIngressVolumesAzureFile {
            readOnly?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
            shareName?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesAzureFilePatch {
            readOnly?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
            shareName?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesCephfs {
            monitors?: pulumi.Input<pulumi.Input<string>[]>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretFile?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesCephfsSecretRef>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesCephfsPatch {
            monitors?: pulumi.Input<pulumi.Input<string>[]>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretFile?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesCephfsSecretRefPatch>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesCephfsSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesCephfsSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesCinder {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesCinderSecretRef>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesCinderPatch {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesCinderSecretRefPatch>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesCinderSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesCinderSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesConfigMap {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecIngressVolumesConfigMapItems {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesConfigMapItemsPatch {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesConfigMapPatch {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesConfigMapItemsPatch>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecIngressVolumesCsi {
            driver?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            nodePublishSecretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesCsiNodePublishSecretRef>;
            readOnly?: pulumi.Input<boolean>;
            volumeAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecIngressVolumesCsiNodePublishSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesCsiNodePublishSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesCsiPatch {
            driver?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            nodePublishSecretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesCsiNodePublishSecretRefPatch>;
            readOnly?: pulumi.Input<boolean>;
            volumeAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecIngressVolumesDownwardAPI {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesDownwardAPIItems>[]>;
        }

        export interface JaegerSpecIngressVolumesDownwardAPIItems {
            fieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesDownwardAPIItemsFieldRef>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesDownwardAPIItemsResourceFieldRef>;
        }

        export interface JaegerSpecIngressVolumesDownwardAPIItemsFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesDownwardAPIItemsFieldRefPatch {
            apiVersion?: pulumi.Input<string>;
            fieldPath?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesDownwardAPIItemsPatch {
            fieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesDownwardAPIItemsFieldRefPatch>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesDownwardAPIItemsResourceFieldRefPatch>;
        }

        export interface JaegerSpecIngressVolumesDownwardAPIItemsResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<number | string>;
            resource?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesDownwardAPIItemsResourceFieldRefPatch {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<number | string>;
            resource?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesDownwardAPIPatch {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesDownwardAPIItemsPatch>[]>;
        }

        export interface JaegerSpecIngressVolumesEmptyDir {
            medium?: pulumi.Input<string>;
            sizeLimit?: pulumi.Input<number | string>;
        }

        export interface JaegerSpecIngressVolumesEmptyDirPatch {
            medium?: pulumi.Input<string>;
            sizeLimit?: pulumi.Input<number | string>;
        }

        export interface JaegerSpecIngressVolumesEphemeral {
            volumeClaimTemplate?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesEphemeralVolumeClaimTemplate>;
        }

        export interface JaegerSpecIngressVolumesEphemeralPatch {
            volumeClaimTemplate?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesEphemeralVolumeClaimTemplatePatch>;
        }

        export interface JaegerSpecIngressVolumesEphemeralVolumeClaimTemplate {
            metadata?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesEphemeralVolumeClaimTemplateMetadata>;
            spec?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesEphemeralVolumeClaimTemplateSpec>;
        }

        export interface JaegerSpecIngressVolumesEphemeralVolumeClaimTemplateMetadata {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesEphemeralVolumeClaimTemplateMetadataPatch {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesEphemeralVolumeClaimTemplatePatch {
            metadata?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesEphemeralVolumeClaimTemplateMetadataPatch>;
            spec?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesEphemeralVolumeClaimTemplateSpecPatch>;
        }

        export interface JaegerSpecIngressVolumesEphemeralVolumeClaimTemplateSpec {
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            dataSource?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesEphemeralVolumeClaimTemplateSpecDataSource>;
            dataSourceRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef>;
            resources?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesEphemeralVolumeClaimTemplateSpecResources>;
            selector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesEphemeralVolumeClaimTemplateSpecSelector>;
            storageClassName?: pulumi.Input<string>;
            volumeMode?: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesEphemeralVolumeClaimTemplateSpecDataSource {
            apiGroup?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch {
            apiGroup?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef {
            apiGroup?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch {
            apiGroup?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesEphemeralVolumeClaimTemplateSpecPatch {
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            dataSource?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch>;
            dataSourceRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch>;
            resources?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesEphemeralVolumeClaimTemplateSpecResourcesPatch>;
            selector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesEphemeralVolumeClaimTemplateSpecSelectorPatch>;
            storageClassName?: pulumi.Input<string>;
            volumeMode?: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesEphemeralVolumeClaimTemplateSpecResources {
            claims?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesEphemeralVolumeClaimTemplateSpecResourcesClaims>[]>;
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        export interface JaegerSpecIngressVolumesEphemeralVolumeClaimTemplateSpecResourcesClaims {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesEphemeralVolumeClaimTemplateSpecResourcesClaimsPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesEphemeralVolumeClaimTemplateSpecResourcesPatch {
            claims?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesEphemeralVolumeClaimTemplateSpecResourcesClaimsPatch>[]>;
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        export interface JaegerSpecIngressVolumesEphemeralVolumeClaimTemplateSpecSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecIngressVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngressVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngressVolumesEphemeralVolumeClaimTemplateSpecSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecIngressVolumesFc {
            fsType?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            targetWWNs?: pulumi.Input<pulumi.Input<string>[]>;
            wwids?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngressVolumesFcPatch {
            fsType?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            targetWWNs?: pulumi.Input<pulumi.Input<string>[]>;
            wwids?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecIngressVolumesFlexVolume {
            driver?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesFlexVolumeSecretRef>;
        }

        export interface JaegerSpecIngressVolumesFlexVolumePatch {
            driver?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesFlexVolumeSecretRefPatch>;
        }

        export interface JaegerSpecIngressVolumesFlexVolumeSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesFlexVolumeSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesFlocker {
            datasetName?: pulumi.Input<string>;
            datasetUUID?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesFlockerPatch {
            datasetName?: pulumi.Input<string>;
            datasetUUID?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesGcePersistentDisk {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            pdName?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecIngressVolumesGcePersistentDiskPatch {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            pdName?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecIngressVolumesGitRepo {
            directory?: pulumi.Input<string>;
            repository?: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesGitRepoPatch {
            directory?: pulumi.Input<string>;
            repository?: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesGlusterfs {
            endpoints?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecIngressVolumesGlusterfsPatch {
            endpoints?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecIngressVolumesHostPath {
            path?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesHostPathPatch {
            path?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesIscsi {
            chapAuthDiscovery?: pulumi.Input<boolean>;
            chapAuthSession?: pulumi.Input<boolean>;
            fsType?: pulumi.Input<string>;
            initiatorName?: pulumi.Input<string>;
            iqn?: pulumi.Input<string>;
            iscsiInterface?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            portals?: pulumi.Input<pulumi.Input<string>[]>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesIscsiSecretRef>;
            targetPortal?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesIscsiPatch {
            chapAuthDiscovery?: pulumi.Input<boolean>;
            chapAuthSession?: pulumi.Input<boolean>;
            fsType?: pulumi.Input<string>;
            initiatorName?: pulumi.Input<string>;
            iqn?: pulumi.Input<string>;
            iscsiInterface?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            portals?: pulumi.Input<pulumi.Input<string>[]>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesIscsiSecretRefPatch>;
            targetPortal?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesIscsiSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesIscsiSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesNfs {
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            server?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesNfsPatch {
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            server?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesPatch {
            awsElasticBlockStore?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesAwsElasticBlockStorePatch>;
            azureDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesAzureDiskPatch>;
            azureFile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesAzureFilePatch>;
            cephfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesCephfsPatch>;
            cinder?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesCinderPatch>;
            configMap?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesConfigMapPatch>;
            csi?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesCsiPatch>;
            downwardAPI?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesDownwardAPIPatch>;
            emptyDir?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesEmptyDirPatch>;
            ephemeral?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesEphemeralPatch>;
            fc?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesFcPatch>;
            flexVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesFlexVolumePatch>;
            flocker?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesFlockerPatch>;
            gcePersistentDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesGcePersistentDiskPatch>;
            gitRepo?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesGitRepoPatch>;
            glusterfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesGlusterfsPatch>;
            hostPath?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesHostPathPatch>;
            iscsi?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesIscsiPatch>;
            name?: pulumi.Input<string>;
            nfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesNfsPatch>;
            persistentVolumeClaim?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesPersistentVolumeClaimPatch>;
            photonPersistentDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesPhotonPersistentDiskPatch>;
            portworxVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesPortworxVolumePatch>;
            projected?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesProjectedPatch>;
            quobyte?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesQuobytePatch>;
            rbd?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesRbdPatch>;
            scaleIO?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesScaleIOPatch>;
            secret?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesSecretPatch>;
            storageos?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesStorageosPatch>;
            vsphereVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesVsphereVolumePatch>;
        }

        export interface JaegerSpecIngressVolumesPersistentVolumeClaim {
            claimName?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecIngressVolumesPersistentVolumeClaimPatch {
            claimName?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecIngressVolumesPhotonPersistentDisk {
            fsType?: pulumi.Input<string>;
            pdID?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesPhotonPersistentDiskPatch {
            fsType?: pulumi.Input<string>;
            pdID?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesPortworxVolume {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesPortworxVolumePatch {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesProjected {
            defaultMode?: pulumi.Input<number>;
            sources?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesProjectedSources>[]>;
        }

        export interface JaegerSpecIngressVolumesProjectedPatch {
            defaultMode?: pulumi.Input<number>;
            sources?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesProjectedSourcesPatch>[]>;
        }

        export interface JaegerSpecIngressVolumesProjectedSources {
            configMap?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesProjectedSourcesConfigMap>;
            downwardAPI?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesProjectedSourcesDownwardAPI>;
            secret?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesProjectedSourcesSecret>;
            serviceAccountToken?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesProjectedSourcesServiceAccountToken>;
        }

        export interface JaegerSpecIngressVolumesProjectedSourcesConfigMap {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesProjectedSourcesConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecIngressVolumesProjectedSourcesConfigMapItems {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesProjectedSourcesConfigMapItemsPatch {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesProjectedSourcesConfigMapPatch {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesProjectedSourcesConfigMapItemsPatch>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecIngressVolumesProjectedSourcesDownwardAPI {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesProjectedSourcesDownwardAPIItems>[]>;
        }

        export interface JaegerSpecIngressVolumesProjectedSourcesDownwardAPIItems {
            fieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesProjectedSourcesDownwardAPIItemsFieldRef>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef>;
        }

        export interface JaegerSpecIngressVolumesProjectedSourcesDownwardAPIItemsFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesProjectedSourcesDownwardAPIItemsFieldRefPatch {
            apiVersion?: pulumi.Input<string>;
            fieldPath?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesProjectedSourcesDownwardAPIItemsPatch {
            fieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesProjectedSourcesDownwardAPIItemsFieldRefPatch>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatch>;
        }

        export interface JaegerSpecIngressVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<number | string>;
            resource?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatch {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<number | string>;
            resource?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesProjectedSourcesDownwardAPIPatch {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesProjectedSourcesDownwardAPIItemsPatch>[]>;
        }

        export interface JaegerSpecIngressVolumesProjectedSourcesPatch {
            configMap?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesProjectedSourcesConfigMapPatch>;
            downwardAPI?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesProjectedSourcesDownwardAPIPatch>;
            secret?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesProjectedSourcesSecretPatch>;
            serviceAccountToken?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesProjectedSourcesServiceAccountTokenPatch>;
        }

        export interface JaegerSpecIngressVolumesProjectedSourcesSecret {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesProjectedSourcesSecretItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecIngressVolumesProjectedSourcesSecretItems {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesProjectedSourcesSecretItemsPatch {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesProjectedSourcesSecretPatch {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesProjectedSourcesSecretItemsPatch>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecIngressVolumesProjectedSourcesServiceAccountToken {
            audience?: pulumi.Input<string>;
            expirationSeconds?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesProjectedSourcesServiceAccountTokenPatch {
            audience?: pulumi.Input<string>;
            expirationSeconds?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesQuobyte {
            group?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            registry?: pulumi.Input<string>;
            tenant?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
            volume?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesQuobytePatch {
            group?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            registry?: pulumi.Input<string>;
            tenant?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
            volume?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesRbd {
            fsType?: pulumi.Input<string>;
            image?: pulumi.Input<string>;
            keyring?: pulumi.Input<string>;
            monitors?: pulumi.Input<pulumi.Input<string>[]>;
            pool?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesRbdSecretRef>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesRbdPatch {
            fsType?: pulumi.Input<string>;
            image?: pulumi.Input<string>;
            keyring?: pulumi.Input<string>;
            monitors?: pulumi.Input<pulumi.Input<string>[]>;
            pool?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesRbdSecretRefPatch>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesRbdSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesRbdSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesScaleIO {
            fsType?: pulumi.Input<string>;
            gateway?: pulumi.Input<string>;
            protectionDomain?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesScaleIOSecretRef>;
            sslEnabled?: pulumi.Input<boolean>;
            storageMode?: pulumi.Input<string>;
            storagePool?: pulumi.Input<string>;
            system?: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesScaleIOPatch {
            fsType?: pulumi.Input<string>;
            gateway?: pulumi.Input<string>;
            protectionDomain?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesScaleIOSecretRefPatch>;
            sslEnabled?: pulumi.Input<boolean>;
            storageMode?: pulumi.Input<string>;
            storagePool?: pulumi.Input<string>;
            system?: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesScaleIOSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesScaleIOSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesSecret {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesSecretItems>[]>;
            optional?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesSecretItems {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesSecretItemsPatch {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesSecretPatch {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesSecretItemsPatch>[]>;
            optional?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesStorageos {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesStorageosSecretRef>;
            volumeName?: pulumi.Input<string>;
            volumeNamespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesStorageosPatch {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressVolumesStorageosSecretRefPatch>;
            volumeName?: pulumi.Input<string>;
            volumeNamespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesStorageosSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesStorageosSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesVsphereVolume {
            fsType?: pulumi.Input<string>;
            storagePolicyID?: pulumi.Input<string>;
            storagePolicyName?: pulumi.Input<string>;
            volumePath?: pulumi.Input<string>;
        }

        export interface JaegerSpecIngressVolumesVsphereVolumePatch {
            fsType?: pulumi.Input<string>;
            storagePolicyID?: pulumi.Input<string>;
            storagePolicyName?: pulumi.Input<string>;
            volumePath?: pulumi.Input<string>;
        }

        export interface JaegerSpecLivenessProbe {
            exec?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecLivenessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            grpc?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecLivenessProbeGrpc>;
            httpGet?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecLivenessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecLivenessProbeTcpSocket>;
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface JaegerSpecLivenessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecLivenessProbeExecPatch {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecLivenessProbeGrpc {
            port?: pulumi.Input<number>;
            service?: pulumi.Input<string>;
        }

        export interface JaegerSpecLivenessProbeGrpcPatch {
            port?: pulumi.Input<number>;
            service?: pulumi.Input<string>;
        }

        export interface JaegerSpecLivenessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecLivenessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port?: pulumi.Input<number | string>;
            scheme?: pulumi.Input<string>;
        }

        export interface JaegerSpecLivenessProbeHttpGetHttpHeaders {
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecLivenessProbeHttpGetHttpHeadersPatch {
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecLivenessProbeHttpGetPatch {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecLivenessProbeHttpGetHttpHeadersPatch>[]>;
            path?: pulumi.Input<string>;
            port?: pulumi.Input<number | string>;
            scheme?: pulumi.Input<string>;
        }

        export interface JaegerSpecLivenessProbePatch {
            exec?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecLivenessProbeExecPatch>;
            failureThreshold?: pulumi.Input<number>;
            grpc?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecLivenessProbeGrpcPatch>;
            httpGet?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecLivenessProbeHttpGetPatch>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecLivenessProbeTcpSocketPatch>;
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface JaegerSpecLivenessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port?: pulumi.Input<number | string>;
        }

        export interface JaegerSpecLivenessProbeTcpSocketPatch {
            host?: pulumi.Input<string>;
            port?: pulumi.Input<number | string>;
        }

        export interface JaegerSpecPatch {
            affinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAffinityPatch>;
            agent?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAgentPatch>;
            allInOne?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecAllInOnePatch>;
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            collector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecCollectorPatch>;
            containerSecurityContext?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecContainerSecurityContextPatch>;
            imagePullPolicy?: pulumi.Input<string>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecImagePullSecretsPatch>[]>;
            ingester?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngesterPatch>;
            ingress?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecIngressPatch>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            livenessProbe?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecLivenessProbePatch>;
            query?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryPatch>;
            resources?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecResourcesPatch>;
            sampling?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecSamplingPatch>;
            securityContext?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecSecurityContextPatch>;
            serviceAccount?: pulumi.Input<string>;
            storage?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStoragePatch>;
            strategy?: pulumi.Input<string>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecTolerationsPatch>[]>;
            ui?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecUiPatch>;
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumeMountsPatch>[]>;
            volumes?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesPatch>[]>;
        }

        export interface JaegerSpecQuery {
            affinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinity>;
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            containerSecurityContext?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryContainerSecurityContext>;
            grpcNodePort?: pulumi.Input<number>;
            image?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryImagePullSecrets>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            livenessProbe?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryLivenessProbe>;
            metricsStorage?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryMetricsStorage>;
            nodePort?: pulumi.Input<number>;
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            options?: pulumi.Input<{[key: string]: any}>;
            priorityClassName?: pulumi.Input<string>;
            replicas?: pulumi.Input<number>;
            resources?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryResources>;
            securityContext?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQuerySecurityContext>;
            serviceAccount?: pulumi.Input<string>;
            serviceType?: pulumi.Input<string>;
            strategy?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryStrategy>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryTolerations>[]>;
            tracingEnabled?: pulumi.Input<boolean>;
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumeMounts>[]>;
            volumes?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumes>[]>;
        }

        export interface JaegerSpecQueryAffinity {
            nodeAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityNodeAffinity>;
            podAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityPodAffinity>;
            podAntiAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityPodAntiAffinity>;
        }

        export interface JaegerSpecQueryAffinityNodeAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution>;
        }

        export interface JaegerSpecQueryAffinityNodeAffinityPatch {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch>;
        }

        export interface JaegerSpecQueryAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecQueryAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            preference?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecQueryAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields>[]>;
        }

        export interface JaegerSpecQueryAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecQueryAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecQueryAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecQueryAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecQueryAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch>[]>;
        }

        export interface JaegerSpecQueryAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            nodeSelectorTerms?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms>[]>;
        }

        export interface JaegerSpecQueryAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields>[]>;
        }

        export interface JaegerSpecQueryAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecQueryAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecQueryAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecQueryAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecQueryAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch>[]>;
        }

        export interface JaegerSpecQueryAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            nodeSelectorTerms?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch>[]>;
        }

        export interface JaegerSpecQueryAffinityPatch {
            nodeAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityNodeAffinityPatch>;
            podAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityPodAffinityPatch>;
            podAntiAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityPodAntiAffinityPatch>;
        }

        export interface JaegerSpecQueryAffinityPodAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface JaegerSpecQueryAffinityPodAffinityPatch {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
        }

        export interface JaegerSpecQueryAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecQueryAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecQueryAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecQueryAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecQueryAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecQueryAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecQueryAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecQueryAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecQueryAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecQueryAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecQueryAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecQueryAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecQueryAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecQueryAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecQueryAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecQueryAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecQueryAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecQueryAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecQueryAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryAffinityPodAntiAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface JaegerSpecQueryAffinityPodAntiAffinityPatch {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
        }

        export interface JaegerSpecQueryAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecQueryAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecQueryAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecQueryAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecQueryAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecQueryAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecQueryAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecQueryAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecQueryAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecQueryAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecQueryAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecQueryAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecQueryAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecQueryAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecQueryAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecQueryAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecQueryAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecQueryAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecQueryAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryContainerSecurityContext {
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            capabilities?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryContainerSecurityContextCapabilities>;
            privileged?: pulumi.Input<boolean>;
            procMount?: pulumi.Input<string>;
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryContainerSecurityContextSeLinuxOptions>;
            seccompProfile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryContainerSecurityContextSeccompProfile>;
            windowsOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryContainerSecurityContextWindowsOptions>;
        }

        export interface JaegerSpecQueryContainerSecurityContextCapabilities {
            add?: pulumi.Input<pulumi.Input<string>[]>;
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecQueryContainerSecurityContextCapabilitiesPatch {
            add?: pulumi.Input<pulumi.Input<string>[]>;
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecQueryContainerSecurityContextPatch {
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            capabilities?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryContainerSecurityContextCapabilitiesPatch>;
            privileged?: pulumi.Input<boolean>;
            procMount?: pulumi.Input<string>;
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryContainerSecurityContextSeLinuxOptionsPatch>;
            seccompProfile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryContainerSecurityContextSeccompProfilePatch>;
            windowsOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryContainerSecurityContextWindowsOptionsPatch>;
        }

        export interface JaegerSpecQueryContainerSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryContainerSecurityContextSeLinuxOptionsPatch {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryContainerSecurityContextSeccompProfile {
            localhostProfile?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryContainerSecurityContextSeccompProfilePatch {
            localhostProfile?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryContainerSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            hostProcess?: pulumi.Input<boolean>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryContainerSecurityContextWindowsOptionsPatch {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            hostProcess?: pulumi.Input<boolean>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryImagePullSecrets {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryImagePullSecretsPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryLivenessProbe {
            exec?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryLivenessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            grpc?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryLivenessProbeGrpc>;
            httpGet?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryLivenessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryLivenessProbeTcpSocket>;
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface JaegerSpecQueryLivenessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecQueryLivenessProbeExecPatch {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecQueryLivenessProbeGrpc {
            port?: pulumi.Input<number>;
            service?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryLivenessProbeGrpcPatch {
            port?: pulumi.Input<number>;
            service?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryLivenessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryLivenessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port?: pulumi.Input<number | string>;
            scheme?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryLivenessProbeHttpGetHttpHeaders {
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryLivenessProbeHttpGetHttpHeadersPatch {
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryLivenessProbeHttpGetPatch {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryLivenessProbeHttpGetHttpHeadersPatch>[]>;
            path?: pulumi.Input<string>;
            port?: pulumi.Input<number | string>;
            scheme?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryLivenessProbePatch {
            exec?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryLivenessProbeExecPatch>;
            failureThreshold?: pulumi.Input<number>;
            grpc?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryLivenessProbeGrpcPatch>;
            httpGet?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryLivenessProbeHttpGetPatch>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryLivenessProbeTcpSocketPatch>;
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface JaegerSpecQueryLivenessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port?: pulumi.Input<number | string>;
        }

        export interface JaegerSpecQueryLivenessProbeTcpSocketPatch {
            host?: pulumi.Input<string>;
            port?: pulumi.Input<number | string>;
        }

        export interface JaegerSpecQueryMetricsStorage {
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryMetricsStoragePatch {
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryPatch {
            affinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryAffinityPatch>;
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            containerSecurityContext?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryContainerSecurityContextPatch>;
            grpcNodePort?: pulumi.Input<number>;
            image?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryImagePullSecretsPatch>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            livenessProbe?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryLivenessProbePatch>;
            metricsStorage?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryMetricsStoragePatch>;
            nodePort?: pulumi.Input<number>;
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            options?: pulumi.Input<{[key: string]: any}>;
            priorityClassName?: pulumi.Input<string>;
            replicas?: pulumi.Input<number>;
            resources?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryResourcesPatch>;
            securityContext?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQuerySecurityContextPatch>;
            serviceAccount?: pulumi.Input<string>;
            serviceType?: pulumi.Input<string>;
            strategy?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryStrategyPatch>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryTolerationsPatch>[]>;
            tracingEnabled?: pulumi.Input<boolean>;
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumeMountsPatch>[]>;
            volumes?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesPatch>[]>;
        }

        export interface JaegerSpecQueryResources {
            claims?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryResourcesClaims>[]>;
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        export interface JaegerSpecQueryResourcesClaims {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryResourcesClaimsPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryResourcesPatch {
            claims?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryResourcesClaimsPatch>[]>;
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        export interface JaegerSpecQuerySecurityContext {
            fsGroup?: pulumi.Input<number>;
            fsGroupChangePolicy?: pulumi.Input<string>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQuerySecurityContextSeLinuxOptions>;
            seccompProfile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQuerySecurityContextSeccompProfile>;
            supplementalGroups?: pulumi.Input<pulumi.Input<number>[]>;
            sysctls?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQuerySecurityContextSysctls>[]>;
            windowsOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQuerySecurityContextWindowsOptions>;
        }

        export interface JaegerSpecQuerySecurityContextPatch {
            fsGroup?: pulumi.Input<number>;
            fsGroupChangePolicy?: pulumi.Input<string>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQuerySecurityContextSeLinuxOptionsPatch>;
            seccompProfile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQuerySecurityContextSeccompProfilePatch>;
            supplementalGroups?: pulumi.Input<pulumi.Input<number>[]>;
            sysctls?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQuerySecurityContextSysctlsPatch>[]>;
            windowsOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQuerySecurityContextWindowsOptionsPatch>;
        }

        export interface JaegerSpecQuerySecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecQuerySecurityContextSeLinuxOptionsPatch {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecQuerySecurityContextSeccompProfile {
            localhostProfile?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecQuerySecurityContextSeccompProfilePatch {
            localhostProfile?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecQuerySecurityContextSysctls {
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecQuerySecurityContextSysctlsPatch {
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecQuerySecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            hostProcess?: pulumi.Input<boolean>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface JaegerSpecQuerySecurityContextWindowsOptionsPatch {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            hostProcess?: pulumi.Input<boolean>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryStrategy {
            rollingUpdate?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryStrategyRollingUpdate>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryStrategyPatch {
            rollingUpdate?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryStrategyRollingUpdatePatch>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryStrategyRollingUpdate {
            maxSurge?: pulumi.Input<number | string>;
            maxUnavailable?: pulumi.Input<number | string>;
        }

        export interface JaegerSpecQueryStrategyRollingUpdatePatch {
            maxSurge?: pulumi.Input<number | string>;
            maxUnavailable?: pulumi.Input<number | string>;
        }

        export interface JaegerSpecQueryTolerations {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryTolerationsPatch {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumeMounts {
            mountPath?: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumeMountsPatch {
            mountPath?: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumes {
            awsElasticBlockStore?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesAwsElasticBlockStore>;
            azureDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesAzureDisk>;
            azureFile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesAzureFile>;
            cephfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesCephfs>;
            cinder?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesCinder>;
            configMap?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesConfigMap>;
            csi?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesCsi>;
            downwardAPI?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesDownwardAPI>;
            emptyDir?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesEmptyDir>;
            ephemeral?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesEphemeral>;
            fc?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesFc>;
            flexVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesFlexVolume>;
            flocker?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesFlocker>;
            gcePersistentDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesGcePersistentDisk>;
            gitRepo?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesGitRepo>;
            glusterfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesGlusterfs>;
            hostPath?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesHostPath>;
            iscsi?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesIscsi>;
            name?: pulumi.Input<string>;
            nfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesNfs>;
            persistentVolumeClaim?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesPersistentVolumeClaim>;
            photonPersistentDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesPhotonPersistentDisk>;
            portworxVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesPortworxVolume>;
            projected?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesProjected>;
            quobyte?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesQuobyte>;
            rbd?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesRbd>;
            scaleIO?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesScaleIO>;
            secret?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesSecret>;
            storageos?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesStorageos>;
            vsphereVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesVsphereVolume>;
        }

        export interface JaegerSpecQueryVolumesAwsElasticBlockStore {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesAwsElasticBlockStorePatch {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesAzureDisk {
            cachingMode?: pulumi.Input<string>;
            diskName?: pulumi.Input<string>;
            diskURI?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecQueryVolumesAzureDiskPatch {
            cachingMode?: pulumi.Input<string>;
            diskName?: pulumi.Input<string>;
            diskURI?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecQueryVolumesAzureFile {
            readOnly?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
            shareName?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesAzureFilePatch {
            readOnly?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
            shareName?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesCephfs {
            monitors?: pulumi.Input<pulumi.Input<string>[]>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretFile?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesCephfsSecretRef>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesCephfsPatch {
            monitors?: pulumi.Input<pulumi.Input<string>[]>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretFile?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesCephfsSecretRefPatch>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesCephfsSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesCephfsSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesCinder {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesCinderSecretRef>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesCinderPatch {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesCinderSecretRefPatch>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesCinderSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesCinderSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesConfigMap {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecQueryVolumesConfigMapItems {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesConfigMapItemsPatch {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesConfigMapPatch {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesConfigMapItemsPatch>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecQueryVolumesCsi {
            driver?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            nodePublishSecretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesCsiNodePublishSecretRef>;
            readOnly?: pulumi.Input<boolean>;
            volumeAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecQueryVolumesCsiNodePublishSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesCsiNodePublishSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesCsiPatch {
            driver?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            nodePublishSecretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesCsiNodePublishSecretRefPatch>;
            readOnly?: pulumi.Input<boolean>;
            volumeAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecQueryVolumesDownwardAPI {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesDownwardAPIItems>[]>;
        }

        export interface JaegerSpecQueryVolumesDownwardAPIItems {
            fieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesDownwardAPIItemsFieldRef>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesDownwardAPIItemsResourceFieldRef>;
        }

        export interface JaegerSpecQueryVolumesDownwardAPIItemsFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesDownwardAPIItemsFieldRefPatch {
            apiVersion?: pulumi.Input<string>;
            fieldPath?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesDownwardAPIItemsPatch {
            fieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesDownwardAPIItemsFieldRefPatch>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesDownwardAPIItemsResourceFieldRefPatch>;
        }

        export interface JaegerSpecQueryVolumesDownwardAPIItemsResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<number | string>;
            resource?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesDownwardAPIItemsResourceFieldRefPatch {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<number | string>;
            resource?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesDownwardAPIPatch {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesDownwardAPIItemsPatch>[]>;
        }

        export interface JaegerSpecQueryVolumesEmptyDir {
            medium?: pulumi.Input<string>;
            sizeLimit?: pulumi.Input<number | string>;
        }

        export interface JaegerSpecQueryVolumesEmptyDirPatch {
            medium?: pulumi.Input<string>;
            sizeLimit?: pulumi.Input<number | string>;
        }

        export interface JaegerSpecQueryVolumesEphemeral {
            volumeClaimTemplate?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesEphemeralVolumeClaimTemplate>;
        }

        export interface JaegerSpecQueryVolumesEphemeralPatch {
            volumeClaimTemplate?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesEphemeralVolumeClaimTemplatePatch>;
        }

        export interface JaegerSpecQueryVolumesEphemeralVolumeClaimTemplate {
            metadata?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesEphemeralVolumeClaimTemplateMetadata>;
            spec?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesEphemeralVolumeClaimTemplateSpec>;
        }

        export interface JaegerSpecQueryVolumesEphemeralVolumeClaimTemplateMetadata {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesEphemeralVolumeClaimTemplateMetadataPatch {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesEphemeralVolumeClaimTemplatePatch {
            metadata?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesEphemeralVolumeClaimTemplateMetadataPatch>;
            spec?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesEphemeralVolumeClaimTemplateSpecPatch>;
        }

        export interface JaegerSpecQueryVolumesEphemeralVolumeClaimTemplateSpec {
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            dataSource?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesEphemeralVolumeClaimTemplateSpecDataSource>;
            dataSourceRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef>;
            resources?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesEphemeralVolumeClaimTemplateSpecResources>;
            selector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesEphemeralVolumeClaimTemplateSpecSelector>;
            storageClassName?: pulumi.Input<string>;
            volumeMode?: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesEphemeralVolumeClaimTemplateSpecDataSource {
            apiGroup?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch {
            apiGroup?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef {
            apiGroup?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch {
            apiGroup?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesEphemeralVolumeClaimTemplateSpecPatch {
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            dataSource?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch>;
            dataSourceRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch>;
            resources?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesEphemeralVolumeClaimTemplateSpecResourcesPatch>;
            selector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesEphemeralVolumeClaimTemplateSpecSelectorPatch>;
            storageClassName?: pulumi.Input<string>;
            volumeMode?: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesEphemeralVolumeClaimTemplateSpecResources {
            claims?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesEphemeralVolumeClaimTemplateSpecResourcesClaims>[]>;
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        export interface JaegerSpecQueryVolumesEphemeralVolumeClaimTemplateSpecResourcesClaims {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesEphemeralVolumeClaimTemplateSpecResourcesClaimsPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesEphemeralVolumeClaimTemplateSpecResourcesPatch {
            claims?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesEphemeralVolumeClaimTemplateSpecResourcesClaimsPatch>[]>;
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        export interface JaegerSpecQueryVolumesEphemeralVolumeClaimTemplateSpecSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecQueryVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecQueryVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecQueryVolumesEphemeralVolumeClaimTemplateSpecSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecQueryVolumesFc {
            fsType?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            targetWWNs?: pulumi.Input<pulumi.Input<string>[]>;
            wwids?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecQueryVolumesFcPatch {
            fsType?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            targetWWNs?: pulumi.Input<pulumi.Input<string>[]>;
            wwids?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecQueryVolumesFlexVolume {
            driver?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesFlexVolumeSecretRef>;
        }

        export interface JaegerSpecQueryVolumesFlexVolumePatch {
            driver?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesFlexVolumeSecretRefPatch>;
        }

        export interface JaegerSpecQueryVolumesFlexVolumeSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesFlexVolumeSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesFlocker {
            datasetName?: pulumi.Input<string>;
            datasetUUID?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesFlockerPatch {
            datasetName?: pulumi.Input<string>;
            datasetUUID?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesGcePersistentDisk {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            pdName?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecQueryVolumesGcePersistentDiskPatch {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            pdName?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecQueryVolumesGitRepo {
            directory?: pulumi.Input<string>;
            repository?: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesGitRepoPatch {
            directory?: pulumi.Input<string>;
            repository?: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesGlusterfs {
            endpoints?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecQueryVolumesGlusterfsPatch {
            endpoints?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecQueryVolumesHostPath {
            path?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesHostPathPatch {
            path?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesIscsi {
            chapAuthDiscovery?: pulumi.Input<boolean>;
            chapAuthSession?: pulumi.Input<boolean>;
            fsType?: pulumi.Input<string>;
            initiatorName?: pulumi.Input<string>;
            iqn?: pulumi.Input<string>;
            iscsiInterface?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            portals?: pulumi.Input<pulumi.Input<string>[]>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesIscsiSecretRef>;
            targetPortal?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesIscsiPatch {
            chapAuthDiscovery?: pulumi.Input<boolean>;
            chapAuthSession?: pulumi.Input<boolean>;
            fsType?: pulumi.Input<string>;
            initiatorName?: pulumi.Input<string>;
            iqn?: pulumi.Input<string>;
            iscsiInterface?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            portals?: pulumi.Input<pulumi.Input<string>[]>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesIscsiSecretRefPatch>;
            targetPortal?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesIscsiSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesIscsiSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesNfs {
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            server?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesNfsPatch {
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            server?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesPatch {
            awsElasticBlockStore?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesAwsElasticBlockStorePatch>;
            azureDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesAzureDiskPatch>;
            azureFile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesAzureFilePatch>;
            cephfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesCephfsPatch>;
            cinder?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesCinderPatch>;
            configMap?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesConfigMapPatch>;
            csi?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesCsiPatch>;
            downwardAPI?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesDownwardAPIPatch>;
            emptyDir?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesEmptyDirPatch>;
            ephemeral?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesEphemeralPatch>;
            fc?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesFcPatch>;
            flexVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesFlexVolumePatch>;
            flocker?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesFlockerPatch>;
            gcePersistentDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesGcePersistentDiskPatch>;
            gitRepo?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesGitRepoPatch>;
            glusterfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesGlusterfsPatch>;
            hostPath?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesHostPathPatch>;
            iscsi?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesIscsiPatch>;
            name?: pulumi.Input<string>;
            nfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesNfsPatch>;
            persistentVolumeClaim?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesPersistentVolumeClaimPatch>;
            photonPersistentDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesPhotonPersistentDiskPatch>;
            portworxVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesPortworxVolumePatch>;
            projected?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesProjectedPatch>;
            quobyte?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesQuobytePatch>;
            rbd?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesRbdPatch>;
            scaleIO?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesScaleIOPatch>;
            secret?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesSecretPatch>;
            storageos?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesStorageosPatch>;
            vsphereVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesVsphereVolumePatch>;
        }

        export interface JaegerSpecQueryVolumesPersistentVolumeClaim {
            claimName?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecQueryVolumesPersistentVolumeClaimPatch {
            claimName?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecQueryVolumesPhotonPersistentDisk {
            fsType?: pulumi.Input<string>;
            pdID?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesPhotonPersistentDiskPatch {
            fsType?: pulumi.Input<string>;
            pdID?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesPortworxVolume {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesPortworxVolumePatch {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesProjected {
            defaultMode?: pulumi.Input<number>;
            sources?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesProjectedSources>[]>;
        }

        export interface JaegerSpecQueryVolumesProjectedPatch {
            defaultMode?: pulumi.Input<number>;
            sources?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesProjectedSourcesPatch>[]>;
        }

        export interface JaegerSpecQueryVolumesProjectedSources {
            configMap?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesProjectedSourcesConfigMap>;
            downwardAPI?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesProjectedSourcesDownwardAPI>;
            secret?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesProjectedSourcesSecret>;
            serviceAccountToken?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesProjectedSourcesServiceAccountToken>;
        }

        export interface JaegerSpecQueryVolumesProjectedSourcesConfigMap {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesProjectedSourcesConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecQueryVolumesProjectedSourcesConfigMapItems {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesProjectedSourcesConfigMapItemsPatch {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesProjectedSourcesConfigMapPatch {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesProjectedSourcesConfigMapItemsPatch>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecQueryVolumesProjectedSourcesDownwardAPI {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesProjectedSourcesDownwardAPIItems>[]>;
        }

        export interface JaegerSpecQueryVolumesProjectedSourcesDownwardAPIItems {
            fieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesProjectedSourcesDownwardAPIItemsFieldRef>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef>;
        }

        export interface JaegerSpecQueryVolumesProjectedSourcesDownwardAPIItemsFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesProjectedSourcesDownwardAPIItemsFieldRefPatch {
            apiVersion?: pulumi.Input<string>;
            fieldPath?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesProjectedSourcesDownwardAPIItemsPatch {
            fieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesProjectedSourcesDownwardAPIItemsFieldRefPatch>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatch>;
        }

        export interface JaegerSpecQueryVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<number | string>;
            resource?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatch {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<number | string>;
            resource?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesProjectedSourcesDownwardAPIPatch {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesProjectedSourcesDownwardAPIItemsPatch>[]>;
        }

        export interface JaegerSpecQueryVolumesProjectedSourcesPatch {
            configMap?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesProjectedSourcesConfigMapPatch>;
            downwardAPI?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesProjectedSourcesDownwardAPIPatch>;
            secret?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesProjectedSourcesSecretPatch>;
            serviceAccountToken?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesProjectedSourcesServiceAccountTokenPatch>;
        }

        export interface JaegerSpecQueryVolumesProjectedSourcesSecret {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesProjectedSourcesSecretItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecQueryVolumesProjectedSourcesSecretItems {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesProjectedSourcesSecretItemsPatch {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesProjectedSourcesSecretPatch {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesProjectedSourcesSecretItemsPatch>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecQueryVolumesProjectedSourcesServiceAccountToken {
            audience?: pulumi.Input<string>;
            expirationSeconds?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesProjectedSourcesServiceAccountTokenPatch {
            audience?: pulumi.Input<string>;
            expirationSeconds?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesQuobyte {
            group?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            registry?: pulumi.Input<string>;
            tenant?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
            volume?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesQuobytePatch {
            group?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            registry?: pulumi.Input<string>;
            tenant?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
            volume?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesRbd {
            fsType?: pulumi.Input<string>;
            image?: pulumi.Input<string>;
            keyring?: pulumi.Input<string>;
            monitors?: pulumi.Input<pulumi.Input<string>[]>;
            pool?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesRbdSecretRef>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesRbdPatch {
            fsType?: pulumi.Input<string>;
            image?: pulumi.Input<string>;
            keyring?: pulumi.Input<string>;
            monitors?: pulumi.Input<pulumi.Input<string>[]>;
            pool?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesRbdSecretRefPatch>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesRbdSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesRbdSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesScaleIO {
            fsType?: pulumi.Input<string>;
            gateway?: pulumi.Input<string>;
            protectionDomain?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesScaleIOSecretRef>;
            sslEnabled?: pulumi.Input<boolean>;
            storageMode?: pulumi.Input<string>;
            storagePool?: pulumi.Input<string>;
            system?: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesScaleIOPatch {
            fsType?: pulumi.Input<string>;
            gateway?: pulumi.Input<string>;
            protectionDomain?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesScaleIOSecretRefPatch>;
            sslEnabled?: pulumi.Input<boolean>;
            storageMode?: pulumi.Input<string>;
            storagePool?: pulumi.Input<string>;
            system?: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesScaleIOSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesScaleIOSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesSecret {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesSecretItems>[]>;
            optional?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesSecretItems {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesSecretItemsPatch {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesSecretPatch {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesSecretItemsPatch>[]>;
            optional?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesStorageos {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesStorageosSecretRef>;
            volumeName?: pulumi.Input<string>;
            volumeNamespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesStorageosPatch {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecQueryVolumesStorageosSecretRefPatch>;
            volumeName?: pulumi.Input<string>;
            volumeNamespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesStorageosSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesStorageosSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesVsphereVolume {
            fsType?: pulumi.Input<string>;
            storagePolicyID?: pulumi.Input<string>;
            storagePolicyName?: pulumi.Input<string>;
            volumePath?: pulumi.Input<string>;
        }

        export interface JaegerSpecQueryVolumesVsphereVolumePatch {
            fsType?: pulumi.Input<string>;
            storagePolicyID?: pulumi.Input<string>;
            storagePolicyName?: pulumi.Input<string>;
            volumePath?: pulumi.Input<string>;
        }

        export interface JaegerSpecResources {
            claims?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecResourcesClaims>[]>;
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        export interface JaegerSpecResourcesClaims {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecResourcesClaimsPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecResourcesPatch {
            claims?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecResourcesClaimsPatch>[]>;
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        export interface JaegerSpecSampling {
            options?: pulumi.Input<{[key: string]: any}>;
        }

        export interface JaegerSpecSamplingPatch {
            options?: pulumi.Input<{[key: string]: any}>;
        }

        export interface JaegerSpecSecurityContext {
            fsGroup?: pulumi.Input<number>;
            fsGroupChangePolicy?: pulumi.Input<string>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecSecurityContextSeLinuxOptions>;
            seccompProfile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecSecurityContextSeccompProfile>;
            supplementalGroups?: pulumi.Input<pulumi.Input<number>[]>;
            sysctls?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecSecurityContextSysctls>[]>;
            windowsOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecSecurityContextWindowsOptions>;
        }

        export interface JaegerSpecSecurityContextPatch {
            fsGroup?: pulumi.Input<number>;
            fsGroupChangePolicy?: pulumi.Input<string>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecSecurityContextSeLinuxOptionsPatch>;
            seccompProfile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecSecurityContextSeccompProfilePatch>;
            supplementalGroups?: pulumi.Input<pulumi.Input<number>[]>;
            sysctls?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecSecurityContextSysctlsPatch>[]>;
            windowsOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecSecurityContextWindowsOptionsPatch>;
        }

        export interface JaegerSpecSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecSecurityContextSeLinuxOptionsPatch {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecSecurityContextSeccompProfile {
            localhostProfile?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecSecurityContextSeccompProfilePatch {
            localhostProfile?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecSecurityContextSysctls {
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecSecurityContextSysctlsPatch {
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            hostProcess?: pulumi.Input<boolean>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface JaegerSpecSecurityContextWindowsOptionsPatch {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            hostProcess?: pulumi.Input<boolean>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorage {
            cassandraCreateSchema?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchema>;
            dependencies?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependencies>;
            elasticsearch?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageElasticsearch>;
            esIndexCleaner?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleaner>;
            esRollover?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRollover>;
            grpcPlugin?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageGrpcPlugin>;
            options?: pulumi.Input<{[key: string]: any}>;
            secretName?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageCassandraCreateSchema {
            affinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinity>;
            datacenter?: pulumi.Input<string>;
            enabled?: pulumi.Input<boolean>;
            image?: pulumi.Input<string>;
            mode?: pulumi.Input<string>;
            timeout?: pulumi.Input<string>;
            traceTTL?: pulumi.Input<string>;
            ttlSecondsAfterFinished?: pulumi.Input<number>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinity {
            nodeAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityNodeAffinity>;
            podAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityPodAffinity>;
            podAntiAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityPodAntiAffinity>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityNodeAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityNodeAffinityPatch {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            preference?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields>[]>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch>[]>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            nodeSelectorTerms?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms>[]>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields>[]>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch>[]>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            nodeSelectorTerms?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch>[]>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityPatch {
            nodeAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityNodeAffinityPatch>;
            podAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityPodAffinityPatch>;
            podAntiAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityPodAntiAffinityPatch>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityPodAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityPodAffinityPatch {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityPodAntiAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityPodAntiAffinityPatch {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageCassandraCreateSchemaPatch {
            affinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaAffinityPatch>;
            datacenter?: pulumi.Input<string>;
            enabled?: pulumi.Input<boolean>;
            image?: pulumi.Input<string>;
            mode?: pulumi.Input<string>;
            timeout?: pulumi.Input<string>;
            traceTTL?: pulumi.Input<string>;
            ttlSecondsAfterFinished?: pulumi.Input<number>;
        }

        export interface JaegerSpecStorageDependencies {
            affinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinity>;
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            backoffLimit?: pulumi.Input<number>;
            cassandraClientAuthEnabled?: pulumi.Input<boolean>;
            containerSecurityContext?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesContainerSecurityContext>;
            elasticsearchClientNodeOnly?: pulumi.Input<boolean>;
            elasticsearchNodesWanOnly?: pulumi.Input<boolean>;
            elasticsearchTimeRange?: pulumi.Input<string>;
            enabled?: pulumi.Input<boolean>;
            image?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesImagePullSecrets>[]>;
            javaOpts?: pulumi.Input<string>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            livenessProbe?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesLivenessProbe>;
            resources?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesResources>;
            schedule?: pulumi.Input<string>;
            securityContext?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesSecurityContext>;
            serviceAccount?: pulumi.Input<string>;
            sparkMaster?: pulumi.Input<string>;
            successfulJobsHistoryLimit?: pulumi.Input<number>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesTolerations>[]>;
            ttlSecondsAfterFinished?: pulumi.Input<number>;
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumeMounts>[]>;
            volumes?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumes>[]>;
        }

        export interface JaegerSpecStorageDependenciesAffinity {
            nodeAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityNodeAffinity>;
            podAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityPodAffinity>;
            podAntiAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityPodAntiAffinity>;
        }

        export interface JaegerSpecStorageDependenciesAffinityNodeAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution>;
        }

        export interface JaegerSpecStorageDependenciesAffinityNodeAffinityPatch {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch>;
        }

        export interface JaegerSpecStorageDependenciesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecStorageDependenciesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            preference?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecStorageDependenciesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields>[]>;
        }

        export interface JaegerSpecStorageDependenciesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageDependenciesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageDependenciesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageDependenciesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageDependenciesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch>[]>;
        }

        export interface JaegerSpecStorageDependenciesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            nodeSelectorTerms?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms>[]>;
        }

        export interface JaegerSpecStorageDependenciesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields>[]>;
        }

        export interface JaegerSpecStorageDependenciesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageDependenciesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageDependenciesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageDependenciesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageDependenciesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch>[]>;
        }

        export interface JaegerSpecStorageDependenciesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            nodeSelectorTerms?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch>[]>;
        }

        export interface JaegerSpecStorageDependenciesAffinityPatch {
            nodeAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityNodeAffinityPatch>;
            podAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityPodAffinityPatch>;
            podAntiAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityPodAntiAffinityPatch>;
        }

        export interface JaegerSpecStorageDependenciesAffinityPodAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface JaegerSpecStorageDependenciesAffinityPodAffinityPatch {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
        }

        export interface JaegerSpecStorageDependenciesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecStorageDependenciesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecStorageDependenciesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageDependenciesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageDependenciesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageDependenciesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageDependenciesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageDependenciesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageDependenciesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageDependenciesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageDependenciesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageDependenciesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageDependenciesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageDependenciesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageDependenciesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageDependenciesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageDependenciesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageDependenciesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageDependenciesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesAffinityPodAntiAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface JaegerSpecStorageDependenciesAffinityPodAntiAffinityPatch {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
        }

        export interface JaegerSpecStorageDependenciesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecStorageDependenciesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecStorageDependenciesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageDependenciesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageDependenciesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageDependenciesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageDependenciesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageDependenciesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageDependenciesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageDependenciesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageDependenciesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageDependenciesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageDependenciesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageDependenciesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageDependenciesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageDependenciesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageDependenciesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageDependenciesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageDependenciesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesContainerSecurityContext {
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            capabilities?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesContainerSecurityContextCapabilities>;
            privileged?: pulumi.Input<boolean>;
            procMount?: pulumi.Input<string>;
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesContainerSecurityContextSeLinuxOptions>;
            seccompProfile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesContainerSecurityContextSeccompProfile>;
            windowsOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesContainerSecurityContextWindowsOptions>;
        }

        export interface JaegerSpecStorageDependenciesContainerSecurityContextCapabilities {
            add?: pulumi.Input<pulumi.Input<string>[]>;
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageDependenciesContainerSecurityContextCapabilitiesPatch {
            add?: pulumi.Input<pulumi.Input<string>[]>;
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageDependenciesContainerSecurityContextPatch {
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            capabilities?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesContainerSecurityContextCapabilitiesPatch>;
            privileged?: pulumi.Input<boolean>;
            procMount?: pulumi.Input<string>;
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesContainerSecurityContextSeLinuxOptionsPatch>;
            seccompProfile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesContainerSecurityContextSeccompProfilePatch>;
            windowsOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesContainerSecurityContextWindowsOptionsPatch>;
        }

        export interface JaegerSpecStorageDependenciesContainerSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesContainerSecurityContextSeLinuxOptionsPatch {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesContainerSecurityContextSeccompProfile {
            localhostProfile?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesContainerSecurityContextSeccompProfilePatch {
            localhostProfile?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesContainerSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            hostProcess?: pulumi.Input<boolean>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesContainerSecurityContextWindowsOptionsPatch {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            hostProcess?: pulumi.Input<boolean>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesImagePullSecrets {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesImagePullSecretsPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesLivenessProbe {
            exec?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesLivenessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            grpc?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesLivenessProbeGrpc>;
            httpGet?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesLivenessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesLivenessProbeTcpSocket>;
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface JaegerSpecStorageDependenciesLivenessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageDependenciesLivenessProbeExecPatch {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageDependenciesLivenessProbeGrpc {
            port?: pulumi.Input<number>;
            service?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesLivenessProbeGrpcPatch {
            port?: pulumi.Input<number>;
            service?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesLivenessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesLivenessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port?: pulumi.Input<number | string>;
            scheme?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesLivenessProbeHttpGetHttpHeaders {
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesLivenessProbeHttpGetHttpHeadersPatch {
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesLivenessProbeHttpGetPatch {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesLivenessProbeHttpGetHttpHeadersPatch>[]>;
            path?: pulumi.Input<string>;
            port?: pulumi.Input<number | string>;
            scheme?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesLivenessProbePatch {
            exec?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesLivenessProbeExecPatch>;
            failureThreshold?: pulumi.Input<number>;
            grpc?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesLivenessProbeGrpcPatch>;
            httpGet?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesLivenessProbeHttpGetPatch>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesLivenessProbeTcpSocketPatch>;
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface JaegerSpecStorageDependenciesLivenessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port?: pulumi.Input<number | string>;
        }

        export interface JaegerSpecStorageDependenciesLivenessProbeTcpSocketPatch {
            host?: pulumi.Input<string>;
            port?: pulumi.Input<number | string>;
        }

        export interface JaegerSpecStorageDependenciesPatch {
            affinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesAffinityPatch>;
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            backoffLimit?: pulumi.Input<number>;
            cassandraClientAuthEnabled?: pulumi.Input<boolean>;
            containerSecurityContext?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesContainerSecurityContextPatch>;
            elasticsearchClientNodeOnly?: pulumi.Input<boolean>;
            elasticsearchNodesWanOnly?: pulumi.Input<boolean>;
            elasticsearchTimeRange?: pulumi.Input<string>;
            enabled?: pulumi.Input<boolean>;
            image?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesImagePullSecretsPatch>[]>;
            javaOpts?: pulumi.Input<string>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            livenessProbe?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesLivenessProbePatch>;
            resources?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesResourcesPatch>;
            schedule?: pulumi.Input<string>;
            securityContext?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesSecurityContextPatch>;
            serviceAccount?: pulumi.Input<string>;
            sparkMaster?: pulumi.Input<string>;
            successfulJobsHistoryLimit?: pulumi.Input<number>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesTolerationsPatch>[]>;
            ttlSecondsAfterFinished?: pulumi.Input<number>;
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumeMountsPatch>[]>;
            volumes?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesPatch>[]>;
        }

        export interface JaegerSpecStorageDependenciesResources {
            claims?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesResourcesClaims>[]>;
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        export interface JaegerSpecStorageDependenciesResourcesClaims {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesResourcesClaimsPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesResourcesPatch {
            claims?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesResourcesClaimsPatch>[]>;
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        export interface JaegerSpecStorageDependenciesSecurityContext {
            fsGroup?: pulumi.Input<number>;
            fsGroupChangePolicy?: pulumi.Input<string>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesSecurityContextSeLinuxOptions>;
            seccompProfile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesSecurityContextSeccompProfile>;
            supplementalGroups?: pulumi.Input<pulumi.Input<number>[]>;
            sysctls?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesSecurityContextSysctls>[]>;
            windowsOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesSecurityContextWindowsOptions>;
        }

        export interface JaegerSpecStorageDependenciesSecurityContextPatch {
            fsGroup?: pulumi.Input<number>;
            fsGroupChangePolicy?: pulumi.Input<string>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesSecurityContextSeLinuxOptionsPatch>;
            seccompProfile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesSecurityContextSeccompProfilePatch>;
            supplementalGroups?: pulumi.Input<pulumi.Input<number>[]>;
            sysctls?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesSecurityContextSysctlsPatch>[]>;
            windowsOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesSecurityContextWindowsOptionsPatch>;
        }

        export interface JaegerSpecStorageDependenciesSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesSecurityContextSeLinuxOptionsPatch {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesSecurityContextSeccompProfile {
            localhostProfile?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesSecurityContextSeccompProfilePatch {
            localhostProfile?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesSecurityContextSysctls {
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesSecurityContextSysctlsPatch {
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            hostProcess?: pulumi.Input<boolean>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesSecurityContextWindowsOptionsPatch {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            hostProcess?: pulumi.Input<boolean>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesTolerations {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesTolerationsPatch {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumeMounts {
            mountPath?: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumeMountsPatch {
            mountPath?: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumes {
            awsElasticBlockStore?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesAwsElasticBlockStore>;
            azureDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesAzureDisk>;
            azureFile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesAzureFile>;
            cephfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesCephfs>;
            cinder?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesCinder>;
            configMap?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesConfigMap>;
            csi?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesCsi>;
            downwardAPI?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesDownwardAPI>;
            emptyDir?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesEmptyDir>;
            ephemeral?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesEphemeral>;
            fc?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesFc>;
            flexVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesFlexVolume>;
            flocker?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesFlocker>;
            gcePersistentDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesGcePersistentDisk>;
            gitRepo?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesGitRepo>;
            glusterfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesGlusterfs>;
            hostPath?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesHostPath>;
            iscsi?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesIscsi>;
            name?: pulumi.Input<string>;
            nfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesNfs>;
            persistentVolumeClaim?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesPersistentVolumeClaim>;
            photonPersistentDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesPhotonPersistentDisk>;
            portworxVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesPortworxVolume>;
            projected?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesProjected>;
            quobyte?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesQuobyte>;
            rbd?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesRbd>;
            scaleIO?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesScaleIO>;
            secret?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesSecret>;
            storageos?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesStorageos>;
            vsphereVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesVsphereVolume>;
        }

        export interface JaegerSpecStorageDependenciesVolumesAwsElasticBlockStore {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesAwsElasticBlockStorePatch {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesAzureDisk {
            cachingMode?: pulumi.Input<string>;
            diskName?: pulumi.Input<string>;
            diskURI?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecStorageDependenciesVolumesAzureDiskPatch {
            cachingMode?: pulumi.Input<string>;
            diskName?: pulumi.Input<string>;
            diskURI?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecStorageDependenciesVolumesAzureFile {
            readOnly?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
            shareName?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesAzureFilePatch {
            readOnly?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
            shareName?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesCephfs {
            monitors?: pulumi.Input<pulumi.Input<string>[]>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretFile?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesCephfsSecretRef>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesCephfsPatch {
            monitors?: pulumi.Input<pulumi.Input<string>[]>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretFile?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesCephfsSecretRefPatch>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesCephfsSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesCephfsSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesCinder {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesCinderSecretRef>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesCinderPatch {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesCinderSecretRefPatch>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesCinderSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesCinderSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesConfigMap {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecStorageDependenciesVolumesConfigMapItems {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesConfigMapItemsPatch {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesConfigMapPatch {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesConfigMapItemsPatch>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecStorageDependenciesVolumesCsi {
            driver?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            nodePublishSecretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesCsiNodePublishSecretRef>;
            readOnly?: pulumi.Input<boolean>;
            volumeAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageDependenciesVolumesCsiNodePublishSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesCsiNodePublishSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesCsiPatch {
            driver?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            nodePublishSecretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesCsiNodePublishSecretRefPatch>;
            readOnly?: pulumi.Input<boolean>;
            volumeAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageDependenciesVolumesDownwardAPI {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesDownwardAPIItems>[]>;
        }

        export interface JaegerSpecStorageDependenciesVolumesDownwardAPIItems {
            fieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesDownwardAPIItemsFieldRef>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesDownwardAPIItemsResourceFieldRef>;
        }

        export interface JaegerSpecStorageDependenciesVolumesDownwardAPIItemsFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesDownwardAPIItemsFieldRefPatch {
            apiVersion?: pulumi.Input<string>;
            fieldPath?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesDownwardAPIItemsPatch {
            fieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesDownwardAPIItemsFieldRefPatch>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesDownwardAPIItemsResourceFieldRefPatch>;
        }

        export interface JaegerSpecStorageDependenciesVolumesDownwardAPIItemsResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<number | string>;
            resource?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesDownwardAPIItemsResourceFieldRefPatch {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<number | string>;
            resource?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesDownwardAPIPatch {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesDownwardAPIItemsPatch>[]>;
        }

        export interface JaegerSpecStorageDependenciesVolumesEmptyDir {
            medium?: pulumi.Input<string>;
            sizeLimit?: pulumi.Input<number | string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesEmptyDirPatch {
            medium?: pulumi.Input<string>;
            sizeLimit?: pulumi.Input<number | string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesEphemeral {
            volumeClaimTemplate?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesEphemeralVolumeClaimTemplate>;
        }

        export interface JaegerSpecStorageDependenciesVolumesEphemeralPatch {
            volumeClaimTemplate?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesEphemeralVolumeClaimTemplatePatch>;
        }

        export interface JaegerSpecStorageDependenciesVolumesEphemeralVolumeClaimTemplate {
            metadata?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesEphemeralVolumeClaimTemplateMetadata>;
            spec?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesEphemeralVolumeClaimTemplateSpec>;
        }

        export interface JaegerSpecStorageDependenciesVolumesEphemeralVolumeClaimTemplateMetadata {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesEphemeralVolumeClaimTemplateMetadataPatch {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesEphemeralVolumeClaimTemplatePatch {
            metadata?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesEphemeralVolumeClaimTemplateMetadataPatch>;
            spec?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesEphemeralVolumeClaimTemplateSpecPatch>;
        }

        export interface JaegerSpecStorageDependenciesVolumesEphemeralVolumeClaimTemplateSpec {
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            dataSource?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesEphemeralVolumeClaimTemplateSpecDataSource>;
            dataSourceRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef>;
            resources?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesEphemeralVolumeClaimTemplateSpecResources>;
            selector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesEphemeralVolumeClaimTemplateSpecSelector>;
            storageClassName?: pulumi.Input<string>;
            volumeMode?: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesEphemeralVolumeClaimTemplateSpecDataSource {
            apiGroup?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch {
            apiGroup?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef {
            apiGroup?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch {
            apiGroup?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesEphemeralVolumeClaimTemplateSpecPatch {
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            dataSource?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch>;
            dataSourceRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch>;
            resources?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesEphemeralVolumeClaimTemplateSpecResourcesPatch>;
            selector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesEphemeralVolumeClaimTemplateSpecSelectorPatch>;
            storageClassName?: pulumi.Input<string>;
            volumeMode?: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesEphemeralVolumeClaimTemplateSpecResources {
            claims?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesEphemeralVolumeClaimTemplateSpecResourcesClaims>[]>;
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        export interface JaegerSpecStorageDependenciesVolumesEphemeralVolumeClaimTemplateSpecResourcesClaims {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesEphemeralVolumeClaimTemplateSpecResourcesClaimsPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesEphemeralVolumeClaimTemplateSpecResourcesPatch {
            claims?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesEphemeralVolumeClaimTemplateSpecResourcesClaimsPatch>[]>;
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        export interface JaegerSpecStorageDependenciesVolumesEphemeralVolumeClaimTemplateSpecSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageDependenciesVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageDependenciesVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageDependenciesVolumesEphemeralVolumeClaimTemplateSpecSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageDependenciesVolumesFc {
            fsType?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            targetWWNs?: pulumi.Input<pulumi.Input<string>[]>;
            wwids?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageDependenciesVolumesFcPatch {
            fsType?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            targetWWNs?: pulumi.Input<pulumi.Input<string>[]>;
            wwids?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageDependenciesVolumesFlexVolume {
            driver?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesFlexVolumeSecretRef>;
        }

        export interface JaegerSpecStorageDependenciesVolumesFlexVolumePatch {
            driver?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesFlexVolumeSecretRefPatch>;
        }

        export interface JaegerSpecStorageDependenciesVolumesFlexVolumeSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesFlexVolumeSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesFlocker {
            datasetName?: pulumi.Input<string>;
            datasetUUID?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesFlockerPatch {
            datasetName?: pulumi.Input<string>;
            datasetUUID?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesGcePersistentDisk {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            pdName?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecStorageDependenciesVolumesGcePersistentDiskPatch {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            pdName?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecStorageDependenciesVolumesGitRepo {
            directory?: pulumi.Input<string>;
            repository?: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesGitRepoPatch {
            directory?: pulumi.Input<string>;
            repository?: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesGlusterfs {
            endpoints?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecStorageDependenciesVolumesGlusterfsPatch {
            endpoints?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecStorageDependenciesVolumesHostPath {
            path?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesHostPathPatch {
            path?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesIscsi {
            chapAuthDiscovery?: pulumi.Input<boolean>;
            chapAuthSession?: pulumi.Input<boolean>;
            fsType?: pulumi.Input<string>;
            initiatorName?: pulumi.Input<string>;
            iqn?: pulumi.Input<string>;
            iscsiInterface?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            portals?: pulumi.Input<pulumi.Input<string>[]>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesIscsiSecretRef>;
            targetPortal?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesIscsiPatch {
            chapAuthDiscovery?: pulumi.Input<boolean>;
            chapAuthSession?: pulumi.Input<boolean>;
            fsType?: pulumi.Input<string>;
            initiatorName?: pulumi.Input<string>;
            iqn?: pulumi.Input<string>;
            iscsiInterface?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            portals?: pulumi.Input<pulumi.Input<string>[]>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesIscsiSecretRefPatch>;
            targetPortal?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesIscsiSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesIscsiSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesNfs {
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            server?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesNfsPatch {
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            server?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesPatch {
            awsElasticBlockStore?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesAwsElasticBlockStorePatch>;
            azureDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesAzureDiskPatch>;
            azureFile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesAzureFilePatch>;
            cephfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesCephfsPatch>;
            cinder?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesCinderPatch>;
            configMap?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesConfigMapPatch>;
            csi?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesCsiPatch>;
            downwardAPI?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesDownwardAPIPatch>;
            emptyDir?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesEmptyDirPatch>;
            ephemeral?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesEphemeralPatch>;
            fc?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesFcPatch>;
            flexVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesFlexVolumePatch>;
            flocker?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesFlockerPatch>;
            gcePersistentDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesGcePersistentDiskPatch>;
            gitRepo?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesGitRepoPatch>;
            glusterfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesGlusterfsPatch>;
            hostPath?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesHostPathPatch>;
            iscsi?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesIscsiPatch>;
            name?: pulumi.Input<string>;
            nfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesNfsPatch>;
            persistentVolumeClaim?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesPersistentVolumeClaimPatch>;
            photonPersistentDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesPhotonPersistentDiskPatch>;
            portworxVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesPortworxVolumePatch>;
            projected?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesProjectedPatch>;
            quobyte?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesQuobytePatch>;
            rbd?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesRbdPatch>;
            scaleIO?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesScaleIOPatch>;
            secret?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesSecretPatch>;
            storageos?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesStorageosPatch>;
            vsphereVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesVsphereVolumePatch>;
        }

        export interface JaegerSpecStorageDependenciesVolumesPersistentVolumeClaim {
            claimName?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecStorageDependenciesVolumesPersistentVolumeClaimPatch {
            claimName?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecStorageDependenciesVolumesPhotonPersistentDisk {
            fsType?: pulumi.Input<string>;
            pdID?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesPhotonPersistentDiskPatch {
            fsType?: pulumi.Input<string>;
            pdID?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesPortworxVolume {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesPortworxVolumePatch {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesProjected {
            defaultMode?: pulumi.Input<number>;
            sources?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesProjectedSources>[]>;
        }

        export interface JaegerSpecStorageDependenciesVolumesProjectedPatch {
            defaultMode?: pulumi.Input<number>;
            sources?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesProjectedSourcesPatch>[]>;
        }

        export interface JaegerSpecStorageDependenciesVolumesProjectedSources {
            configMap?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesProjectedSourcesConfigMap>;
            downwardAPI?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesProjectedSourcesDownwardAPI>;
            secret?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesProjectedSourcesSecret>;
            serviceAccountToken?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesProjectedSourcesServiceAccountToken>;
        }

        export interface JaegerSpecStorageDependenciesVolumesProjectedSourcesConfigMap {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesProjectedSourcesConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecStorageDependenciesVolumesProjectedSourcesConfigMapItems {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesProjectedSourcesConfigMapItemsPatch {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesProjectedSourcesConfigMapPatch {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesProjectedSourcesConfigMapItemsPatch>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecStorageDependenciesVolumesProjectedSourcesDownwardAPI {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesProjectedSourcesDownwardAPIItems>[]>;
        }

        export interface JaegerSpecStorageDependenciesVolumesProjectedSourcesDownwardAPIItems {
            fieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesProjectedSourcesDownwardAPIItemsFieldRef>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef>;
        }

        export interface JaegerSpecStorageDependenciesVolumesProjectedSourcesDownwardAPIItemsFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesProjectedSourcesDownwardAPIItemsFieldRefPatch {
            apiVersion?: pulumi.Input<string>;
            fieldPath?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesProjectedSourcesDownwardAPIItemsPatch {
            fieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesProjectedSourcesDownwardAPIItemsFieldRefPatch>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatch>;
        }

        export interface JaegerSpecStorageDependenciesVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<number | string>;
            resource?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatch {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<number | string>;
            resource?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesProjectedSourcesDownwardAPIPatch {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesProjectedSourcesDownwardAPIItemsPatch>[]>;
        }

        export interface JaegerSpecStorageDependenciesVolumesProjectedSourcesPatch {
            configMap?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesProjectedSourcesConfigMapPatch>;
            downwardAPI?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesProjectedSourcesDownwardAPIPatch>;
            secret?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesProjectedSourcesSecretPatch>;
            serviceAccountToken?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesProjectedSourcesServiceAccountTokenPatch>;
        }

        export interface JaegerSpecStorageDependenciesVolumesProjectedSourcesSecret {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesProjectedSourcesSecretItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecStorageDependenciesVolumesProjectedSourcesSecretItems {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesProjectedSourcesSecretItemsPatch {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesProjectedSourcesSecretPatch {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesProjectedSourcesSecretItemsPatch>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecStorageDependenciesVolumesProjectedSourcesServiceAccountToken {
            audience?: pulumi.Input<string>;
            expirationSeconds?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesProjectedSourcesServiceAccountTokenPatch {
            audience?: pulumi.Input<string>;
            expirationSeconds?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesQuobyte {
            group?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            registry?: pulumi.Input<string>;
            tenant?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
            volume?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesQuobytePatch {
            group?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            registry?: pulumi.Input<string>;
            tenant?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
            volume?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesRbd {
            fsType?: pulumi.Input<string>;
            image?: pulumi.Input<string>;
            keyring?: pulumi.Input<string>;
            monitors?: pulumi.Input<pulumi.Input<string>[]>;
            pool?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesRbdSecretRef>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesRbdPatch {
            fsType?: pulumi.Input<string>;
            image?: pulumi.Input<string>;
            keyring?: pulumi.Input<string>;
            monitors?: pulumi.Input<pulumi.Input<string>[]>;
            pool?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesRbdSecretRefPatch>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesRbdSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesRbdSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesScaleIO {
            fsType?: pulumi.Input<string>;
            gateway?: pulumi.Input<string>;
            protectionDomain?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesScaleIOSecretRef>;
            sslEnabled?: pulumi.Input<boolean>;
            storageMode?: pulumi.Input<string>;
            storagePool?: pulumi.Input<string>;
            system?: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesScaleIOPatch {
            fsType?: pulumi.Input<string>;
            gateway?: pulumi.Input<string>;
            protectionDomain?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesScaleIOSecretRefPatch>;
            sslEnabled?: pulumi.Input<boolean>;
            storageMode?: pulumi.Input<string>;
            storagePool?: pulumi.Input<string>;
            system?: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesScaleIOSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesScaleIOSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesSecret {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesSecretItems>[]>;
            optional?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesSecretItems {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesSecretItemsPatch {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesSecretPatch {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesSecretItemsPatch>[]>;
            optional?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesStorageos {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesStorageosSecretRef>;
            volumeName?: pulumi.Input<string>;
            volumeNamespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesStorageosPatch {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesVolumesStorageosSecretRefPatch>;
            volumeName?: pulumi.Input<string>;
            volumeNamespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesStorageosSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesStorageosSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesVsphereVolume {
            fsType?: pulumi.Input<string>;
            storagePolicyID?: pulumi.Input<string>;
            storagePolicyName?: pulumi.Input<string>;
            volumePath?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageDependenciesVolumesVsphereVolumePatch {
            fsType?: pulumi.Input<string>;
            storagePolicyID?: pulumi.Input<string>;
            storagePolicyName?: pulumi.Input<string>;
            volumePath?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageElasticsearch {
            doNotProvision?: pulumi.Input<boolean>;
            image?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            nodeCount?: pulumi.Input<number>;
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            proxyResources?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageElasticsearchProxyResources>;
            redundancyPolicy?: pulumi.Input<string>;
            resources?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageElasticsearchResources>;
            storage?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageElasticsearchStorage>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageElasticsearchTolerations>[]>;
            useCertManagement?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecStorageElasticsearchPatch {
            doNotProvision?: pulumi.Input<boolean>;
            image?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            nodeCount?: pulumi.Input<number>;
            nodeSelector?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            proxyResources?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageElasticsearchProxyResourcesPatch>;
            redundancyPolicy?: pulumi.Input<string>;
            resources?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageElasticsearchResourcesPatch>;
            storage?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageElasticsearchStoragePatch>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageElasticsearchTolerationsPatch>[]>;
            useCertManagement?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecStorageElasticsearchProxyResources {
            claims?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageElasticsearchProxyResourcesClaims>[]>;
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        export interface JaegerSpecStorageElasticsearchProxyResourcesClaims {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageElasticsearchProxyResourcesClaimsPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageElasticsearchProxyResourcesPatch {
            claims?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageElasticsearchProxyResourcesClaimsPatch>[]>;
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        export interface JaegerSpecStorageElasticsearchResources {
            claims?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageElasticsearchResourcesClaims>[]>;
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        export interface JaegerSpecStorageElasticsearchResourcesClaims {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageElasticsearchResourcesClaimsPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageElasticsearchResourcesPatch {
            claims?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageElasticsearchResourcesClaimsPatch>[]>;
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        export interface JaegerSpecStorageElasticsearchStorage {
            size?: pulumi.Input<number | string>;
            storageClassName?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageElasticsearchStoragePatch {
            size?: pulumi.Input<number | string>;
            storageClassName?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageElasticsearchTolerations {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageElasticsearchTolerationsPatch {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleaner {
            affinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinity>;
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            backoffLimit?: pulumi.Input<number>;
            containerSecurityContext?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerContainerSecurityContext>;
            enabled?: pulumi.Input<boolean>;
            image?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerImagePullSecrets>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            livenessProbe?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerLivenessProbe>;
            numberOfDays?: pulumi.Input<number>;
            priorityClassName?: pulumi.Input<string>;
            resources?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerResources>;
            schedule?: pulumi.Input<string>;
            securityContext?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerSecurityContext>;
            serviceAccount?: pulumi.Input<string>;
            successfulJobsHistoryLimit?: pulumi.Input<number>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerTolerations>[]>;
            ttlSecondsAfterFinished?: pulumi.Input<number>;
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumeMounts>[]>;
            volumes?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumes>[]>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinity {
            nodeAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityNodeAffinity>;
            podAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityPodAffinity>;
            podAntiAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityPodAntiAffinity>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityNodeAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityNodeAffinityPatch {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            preference?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields>[]>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch>[]>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            nodeSelectorTerms?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms>[]>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields>[]>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch>[]>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            nodeSelectorTerms?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch>[]>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityPatch {
            nodeAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityNodeAffinityPatch>;
            podAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityPodAffinityPatch>;
            podAntiAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityPodAntiAffinityPatch>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityPodAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityPodAffinityPatch {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityPodAntiAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityPodAntiAffinityPatch {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageEsIndexCleanerAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerContainerSecurityContext {
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            capabilities?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerContainerSecurityContextCapabilities>;
            privileged?: pulumi.Input<boolean>;
            procMount?: pulumi.Input<string>;
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerContainerSecurityContextSeLinuxOptions>;
            seccompProfile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerContainerSecurityContextSeccompProfile>;
            windowsOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerContainerSecurityContextWindowsOptions>;
        }

        export interface JaegerSpecStorageEsIndexCleanerContainerSecurityContextCapabilities {
            add?: pulumi.Input<pulumi.Input<string>[]>;
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsIndexCleanerContainerSecurityContextCapabilitiesPatch {
            add?: pulumi.Input<pulumi.Input<string>[]>;
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsIndexCleanerContainerSecurityContextPatch {
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            capabilities?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerContainerSecurityContextCapabilitiesPatch>;
            privileged?: pulumi.Input<boolean>;
            procMount?: pulumi.Input<string>;
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerContainerSecurityContextSeLinuxOptionsPatch>;
            seccompProfile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerContainerSecurityContextSeccompProfilePatch>;
            windowsOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerContainerSecurityContextWindowsOptionsPatch>;
        }

        export interface JaegerSpecStorageEsIndexCleanerContainerSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerContainerSecurityContextSeLinuxOptionsPatch {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerContainerSecurityContextSeccompProfile {
            localhostProfile?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerContainerSecurityContextSeccompProfilePatch {
            localhostProfile?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerContainerSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            hostProcess?: pulumi.Input<boolean>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerContainerSecurityContextWindowsOptionsPatch {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            hostProcess?: pulumi.Input<boolean>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerImagePullSecrets {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerImagePullSecretsPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerLivenessProbe {
            exec?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerLivenessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            grpc?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerLivenessProbeGrpc>;
            httpGet?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerLivenessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerLivenessProbeTcpSocket>;
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface JaegerSpecStorageEsIndexCleanerLivenessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsIndexCleanerLivenessProbeExecPatch {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsIndexCleanerLivenessProbeGrpc {
            port?: pulumi.Input<number>;
            service?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerLivenessProbeGrpcPatch {
            port?: pulumi.Input<number>;
            service?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerLivenessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerLivenessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port?: pulumi.Input<number | string>;
            scheme?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerLivenessProbeHttpGetHttpHeaders {
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerLivenessProbeHttpGetHttpHeadersPatch {
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerLivenessProbeHttpGetPatch {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerLivenessProbeHttpGetHttpHeadersPatch>[]>;
            path?: pulumi.Input<string>;
            port?: pulumi.Input<number | string>;
            scheme?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerLivenessProbePatch {
            exec?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerLivenessProbeExecPatch>;
            failureThreshold?: pulumi.Input<number>;
            grpc?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerLivenessProbeGrpcPatch>;
            httpGet?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerLivenessProbeHttpGetPatch>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerLivenessProbeTcpSocketPatch>;
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface JaegerSpecStorageEsIndexCleanerLivenessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port?: pulumi.Input<number | string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerLivenessProbeTcpSocketPatch {
            host?: pulumi.Input<string>;
            port?: pulumi.Input<number | string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerPatch {
            affinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerAffinityPatch>;
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            backoffLimit?: pulumi.Input<number>;
            containerSecurityContext?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerContainerSecurityContextPatch>;
            enabled?: pulumi.Input<boolean>;
            image?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerImagePullSecretsPatch>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            livenessProbe?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerLivenessProbePatch>;
            numberOfDays?: pulumi.Input<number>;
            priorityClassName?: pulumi.Input<string>;
            resources?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerResourcesPatch>;
            schedule?: pulumi.Input<string>;
            securityContext?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerSecurityContextPatch>;
            serviceAccount?: pulumi.Input<string>;
            successfulJobsHistoryLimit?: pulumi.Input<number>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerTolerationsPatch>[]>;
            ttlSecondsAfterFinished?: pulumi.Input<number>;
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumeMountsPatch>[]>;
            volumes?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesPatch>[]>;
        }

        export interface JaegerSpecStorageEsIndexCleanerResources {
            claims?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerResourcesClaims>[]>;
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        export interface JaegerSpecStorageEsIndexCleanerResourcesClaims {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerResourcesClaimsPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerResourcesPatch {
            claims?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerResourcesClaimsPatch>[]>;
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        export interface JaegerSpecStorageEsIndexCleanerSecurityContext {
            fsGroup?: pulumi.Input<number>;
            fsGroupChangePolicy?: pulumi.Input<string>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerSecurityContextSeLinuxOptions>;
            seccompProfile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerSecurityContextSeccompProfile>;
            supplementalGroups?: pulumi.Input<pulumi.Input<number>[]>;
            sysctls?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerSecurityContextSysctls>[]>;
            windowsOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerSecurityContextWindowsOptions>;
        }

        export interface JaegerSpecStorageEsIndexCleanerSecurityContextPatch {
            fsGroup?: pulumi.Input<number>;
            fsGroupChangePolicy?: pulumi.Input<string>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerSecurityContextSeLinuxOptionsPatch>;
            seccompProfile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerSecurityContextSeccompProfilePatch>;
            supplementalGroups?: pulumi.Input<pulumi.Input<number>[]>;
            sysctls?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerSecurityContextSysctlsPatch>[]>;
            windowsOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerSecurityContextWindowsOptionsPatch>;
        }

        export interface JaegerSpecStorageEsIndexCleanerSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerSecurityContextSeLinuxOptionsPatch {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerSecurityContextSeccompProfile {
            localhostProfile?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerSecurityContextSeccompProfilePatch {
            localhostProfile?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerSecurityContextSysctls {
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerSecurityContextSysctlsPatch {
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            hostProcess?: pulumi.Input<boolean>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerSecurityContextWindowsOptionsPatch {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            hostProcess?: pulumi.Input<boolean>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerTolerations {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerTolerationsPatch {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumeMounts {
            mountPath?: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumeMountsPatch {
            mountPath?: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumes {
            awsElasticBlockStore?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesAwsElasticBlockStore>;
            azureDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesAzureDisk>;
            azureFile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesAzureFile>;
            cephfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesCephfs>;
            cinder?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesCinder>;
            configMap?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesConfigMap>;
            csi?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesCsi>;
            downwardAPI?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesDownwardAPI>;
            emptyDir?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesEmptyDir>;
            ephemeral?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesEphemeral>;
            fc?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesFc>;
            flexVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesFlexVolume>;
            flocker?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesFlocker>;
            gcePersistentDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesGcePersistentDisk>;
            gitRepo?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesGitRepo>;
            glusterfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesGlusterfs>;
            hostPath?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesHostPath>;
            iscsi?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesIscsi>;
            name?: pulumi.Input<string>;
            nfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesNfs>;
            persistentVolumeClaim?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesPersistentVolumeClaim>;
            photonPersistentDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesPhotonPersistentDisk>;
            portworxVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesPortworxVolume>;
            projected?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesProjected>;
            quobyte?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesQuobyte>;
            rbd?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesRbd>;
            scaleIO?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesScaleIO>;
            secret?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesSecret>;
            storageos?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesStorageos>;
            vsphereVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesVsphereVolume>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesAwsElasticBlockStore {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesAwsElasticBlockStorePatch {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesAzureDisk {
            cachingMode?: pulumi.Input<string>;
            diskName?: pulumi.Input<string>;
            diskURI?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesAzureDiskPatch {
            cachingMode?: pulumi.Input<string>;
            diskName?: pulumi.Input<string>;
            diskURI?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesAzureFile {
            readOnly?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
            shareName?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesAzureFilePatch {
            readOnly?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
            shareName?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesCephfs {
            monitors?: pulumi.Input<pulumi.Input<string>[]>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretFile?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesCephfsSecretRef>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesCephfsPatch {
            monitors?: pulumi.Input<pulumi.Input<string>[]>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretFile?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesCephfsSecretRefPatch>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesCephfsSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesCephfsSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesCinder {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesCinderSecretRef>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesCinderPatch {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesCinderSecretRefPatch>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesCinderSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesCinderSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesConfigMap {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesConfigMapItems {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesConfigMapItemsPatch {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesConfigMapPatch {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesConfigMapItemsPatch>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesCsi {
            driver?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            nodePublishSecretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesCsiNodePublishSecretRef>;
            readOnly?: pulumi.Input<boolean>;
            volumeAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesCsiNodePublishSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesCsiNodePublishSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesCsiPatch {
            driver?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            nodePublishSecretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesCsiNodePublishSecretRefPatch>;
            readOnly?: pulumi.Input<boolean>;
            volumeAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesDownwardAPI {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesDownwardAPIItems>[]>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesDownwardAPIItems {
            fieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesDownwardAPIItemsFieldRef>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesDownwardAPIItemsResourceFieldRef>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesDownwardAPIItemsFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesDownwardAPIItemsFieldRefPatch {
            apiVersion?: pulumi.Input<string>;
            fieldPath?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesDownwardAPIItemsPatch {
            fieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesDownwardAPIItemsFieldRefPatch>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesDownwardAPIItemsResourceFieldRefPatch>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesDownwardAPIItemsResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<number | string>;
            resource?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesDownwardAPIItemsResourceFieldRefPatch {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<number | string>;
            resource?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesDownwardAPIPatch {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesDownwardAPIItemsPatch>[]>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesEmptyDir {
            medium?: pulumi.Input<string>;
            sizeLimit?: pulumi.Input<number | string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesEmptyDirPatch {
            medium?: pulumi.Input<string>;
            sizeLimit?: pulumi.Input<number | string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesEphemeral {
            volumeClaimTemplate?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesEphemeralVolumeClaimTemplate>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesEphemeralPatch {
            volumeClaimTemplate?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesEphemeralVolumeClaimTemplatePatch>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesEphemeralVolumeClaimTemplate {
            metadata?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesEphemeralVolumeClaimTemplateMetadata>;
            spec?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesEphemeralVolumeClaimTemplateSpec>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesEphemeralVolumeClaimTemplateMetadata {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesEphemeralVolumeClaimTemplateMetadataPatch {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesEphemeralVolumeClaimTemplatePatch {
            metadata?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesEphemeralVolumeClaimTemplateMetadataPatch>;
            spec?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesEphemeralVolumeClaimTemplateSpecPatch>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesEphemeralVolumeClaimTemplateSpec {
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            dataSource?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesEphemeralVolumeClaimTemplateSpecDataSource>;
            dataSourceRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef>;
            resources?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesEphemeralVolumeClaimTemplateSpecResources>;
            selector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesEphemeralVolumeClaimTemplateSpecSelector>;
            storageClassName?: pulumi.Input<string>;
            volumeMode?: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesEphemeralVolumeClaimTemplateSpecDataSource {
            apiGroup?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch {
            apiGroup?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef {
            apiGroup?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch {
            apiGroup?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesEphemeralVolumeClaimTemplateSpecPatch {
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            dataSource?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch>;
            dataSourceRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch>;
            resources?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesEphemeralVolumeClaimTemplateSpecResourcesPatch>;
            selector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesEphemeralVolumeClaimTemplateSpecSelectorPatch>;
            storageClassName?: pulumi.Input<string>;
            volumeMode?: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesEphemeralVolumeClaimTemplateSpecResources {
            claims?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesEphemeralVolumeClaimTemplateSpecResourcesClaims>[]>;
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesEphemeralVolumeClaimTemplateSpecResourcesClaims {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesEphemeralVolumeClaimTemplateSpecResourcesClaimsPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesEphemeralVolumeClaimTemplateSpecResourcesPatch {
            claims?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesEphemeralVolumeClaimTemplateSpecResourcesClaimsPatch>[]>;
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesEphemeralVolumeClaimTemplateSpecSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesEphemeralVolumeClaimTemplateSpecSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesFc {
            fsType?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            targetWWNs?: pulumi.Input<pulumi.Input<string>[]>;
            wwids?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesFcPatch {
            fsType?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            targetWWNs?: pulumi.Input<pulumi.Input<string>[]>;
            wwids?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesFlexVolume {
            driver?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesFlexVolumeSecretRef>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesFlexVolumePatch {
            driver?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesFlexVolumeSecretRefPatch>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesFlexVolumeSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesFlexVolumeSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesFlocker {
            datasetName?: pulumi.Input<string>;
            datasetUUID?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesFlockerPatch {
            datasetName?: pulumi.Input<string>;
            datasetUUID?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesGcePersistentDisk {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            pdName?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesGcePersistentDiskPatch {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            pdName?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesGitRepo {
            directory?: pulumi.Input<string>;
            repository?: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesGitRepoPatch {
            directory?: pulumi.Input<string>;
            repository?: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesGlusterfs {
            endpoints?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesGlusterfsPatch {
            endpoints?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesHostPath {
            path?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesHostPathPatch {
            path?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesIscsi {
            chapAuthDiscovery?: pulumi.Input<boolean>;
            chapAuthSession?: pulumi.Input<boolean>;
            fsType?: pulumi.Input<string>;
            initiatorName?: pulumi.Input<string>;
            iqn?: pulumi.Input<string>;
            iscsiInterface?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            portals?: pulumi.Input<pulumi.Input<string>[]>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesIscsiSecretRef>;
            targetPortal?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesIscsiPatch {
            chapAuthDiscovery?: pulumi.Input<boolean>;
            chapAuthSession?: pulumi.Input<boolean>;
            fsType?: pulumi.Input<string>;
            initiatorName?: pulumi.Input<string>;
            iqn?: pulumi.Input<string>;
            iscsiInterface?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            portals?: pulumi.Input<pulumi.Input<string>[]>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesIscsiSecretRefPatch>;
            targetPortal?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesIscsiSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesIscsiSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesNfs {
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            server?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesNfsPatch {
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            server?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesPatch {
            awsElasticBlockStore?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesAwsElasticBlockStorePatch>;
            azureDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesAzureDiskPatch>;
            azureFile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesAzureFilePatch>;
            cephfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesCephfsPatch>;
            cinder?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesCinderPatch>;
            configMap?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesConfigMapPatch>;
            csi?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesCsiPatch>;
            downwardAPI?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesDownwardAPIPatch>;
            emptyDir?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesEmptyDirPatch>;
            ephemeral?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesEphemeralPatch>;
            fc?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesFcPatch>;
            flexVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesFlexVolumePatch>;
            flocker?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesFlockerPatch>;
            gcePersistentDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesGcePersistentDiskPatch>;
            gitRepo?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesGitRepoPatch>;
            glusterfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesGlusterfsPatch>;
            hostPath?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesHostPathPatch>;
            iscsi?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesIscsiPatch>;
            name?: pulumi.Input<string>;
            nfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesNfsPatch>;
            persistentVolumeClaim?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesPersistentVolumeClaimPatch>;
            photonPersistentDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesPhotonPersistentDiskPatch>;
            portworxVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesPortworxVolumePatch>;
            projected?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesProjectedPatch>;
            quobyte?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesQuobytePatch>;
            rbd?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesRbdPatch>;
            scaleIO?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesScaleIOPatch>;
            secret?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesSecretPatch>;
            storageos?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesStorageosPatch>;
            vsphereVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesVsphereVolumePatch>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesPersistentVolumeClaim {
            claimName?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesPersistentVolumeClaimPatch {
            claimName?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesPhotonPersistentDisk {
            fsType?: pulumi.Input<string>;
            pdID?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesPhotonPersistentDiskPatch {
            fsType?: pulumi.Input<string>;
            pdID?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesPortworxVolume {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesPortworxVolumePatch {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesProjected {
            defaultMode?: pulumi.Input<number>;
            sources?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesProjectedSources>[]>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesProjectedPatch {
            defaultMode?: pulumi.Input<number>;
            sources?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesProjectedSourcesPatch>[]>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesProjectedSources {
            configMap?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesProjectedSourcesConfigMap>;
            downwardAPI?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesProjectedSourcesDownwardAPI>;
            secret?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesProjectedSourcesSecret>;
            serviceAccountToken?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesProjectedSourcesServiceAccountToken>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesProjectedSourcesConfigMap {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesProjectedSourcesConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesProjectedSourcesConfigMapItems {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesProjectedSourcesConfigMapItemsPatch {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesProjectedSourcesConfigMapPatch {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesProjectedSourcesConfigMapItemsPatch>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesProjectedSourcesDownwardAPI {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesProjectedSourcesDownwardAPIItems>[]>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesProjectedSourcesDownwardAPIItems {
            fieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesProjectedSourcesDownwardAPIItemsFieldRef>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesProjectedSourcesDownwardAPIItemsFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesProjectedSourcesDownwardAPIItemsFieldRefPatch {
            apiVersion?: pulumi.Input<string>;
            fieldPath?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesProjectedSourcesDownwardAPIItemsPatch {
            fieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesProjectedSourcesDownwardAPIItemsFieldRefPatch>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatch>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<number | string>;
            resource?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatch {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<number | string>;
            resource?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesProjectedSourcesDownwardAPIPatch {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesProjectedSourcesDownwardAPIItemsPatch>[]>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesProjectedSourcesPatch {
            configMap?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesProjectedSourcesConfigMapPatch>;
            downwardAPI?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesProjectedSourcesDownwardAPIPatch>;
            secret?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesProjectedSourcesSecretPatch>;
            serviceAccountToken?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesProjectedSourcesServiceAccountTokenPatch>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesProjectedSourcesSecret {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesProjectedSourcesSecretItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesProjectedSourcesSecretItems {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesProjectedSourcesSecretItemsPatch {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesProjectedSourcesSecretPatch {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesProjectedSourcesSecretItemsPatch>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesProjectedSourcesServiceAccountToken {
            audience?: pulumi.Input<string>;
            expirationSeconds?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesProjectedSourcesServiceAccountTokenPatch {
            audience?: pulumi.Input<string>;
            expirationSeconds?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesQuobyte {
            group?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            registry?: pulumi.Input<string>;
            tenant?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
            volume?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesQuobytePatch {
            group?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            registry?: pulumi.Input<string>;
            tenant?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
            volume?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesRbd {
            fsType?: pulumi.Input<string>;
            image?: pulumi.Input<string>;
            keyring?: pulumi.Input<string>;
            monitors?: pulumi.Input<pulumi.Input<string>[]>;
            pool?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesRbdSecretRef>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesRbdPatch {
            fsType?: pulumi.Input<string>;
            image?: pulumi.Input<string>;
            keyring?: pulumi.Input<string>;
            monitors?: pulumi.Input<pulumi.Input<string>[]>;
            pool?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesRbdSecretRefPatch>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesRbdSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesRbdSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesScaleIO {
            fsType?: pulumi.Input<string>;
            gateway?: pulumi.Input<string>;
            protectionDomain?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesScaleIOSecretRef>;
            sslEnabled?: pulumi.Input<boolean>;
            storageMode?: pulumi.Input<string>;
            storagePool?: pulumi.Input<string>;
            system?: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesScaleIOPatch {
            fsType?: pulumi.Input<string>;
            gateway?: pulumi.Input<string>;
            protectionDomain?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesScaleIOSecretRefPatch>;
            sslEnabled?: pulumi.Input<boolean>;
            storageMode?: pulumi.Input<string>;
            storagePool?: pulumi.Input<string>;
            system?: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesScaleIOSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesScaleIOSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesSecret {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesSecretItems>[]>;
            optional?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesSecretItems {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesSecretItemsPatch {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesSecretPatch {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesSecretItemsPatch>[]>;
            optional?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesStorageos {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesStorageosSecretRef>;
            volumeName?: pulumi.Input<string>;
            volumeNamespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesStorageosPatch {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerVolumesStorageosSecretRefPatch>;
            volumeName?: pulumi.Input<string>;
            volumeNamespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesStorageosSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesStorageosSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesVsphereVolume {
            fsType?: pulumi.Input<string>;
            storagePolicyID?: pulumi.Input<string>;
            storagePolicyName?: pulumi.Input<string>;
            volumePath?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsIndexCleanerVolumesVsphereVolumePatch {
            fsType?: pulumi.Input<string>;
            storagePolicyID?: pulumi.Input<string>;
            storagePolicyName?: pulumi.Input<string>;
            volumePath?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRollover {
            affinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinity>;
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            backoffLimit?: pulumi.Input<number>;
            conditions?: pulumi.Input<string>;
            containerSecurityContext?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverContainerSecurityContext>;
            image?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverImagePullSecrets>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            livenessProbe?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverLivenessProbe>;
            readTTL?: pulumi.Input<string>;
            resources?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverResources>;
            schedule?: pulumi.Input<string>;
            securityContext?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverSecurityContext>;
            serviceAccount?: pulumi.Input<string>;
            successfulJobsHistoryLimit?: pulumi.Input<number>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverTolerations>[]>;
            ttlSecondsAfterFinished?: pulumi.Input<number>;
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumeMounts>[]>;
            volumes?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumes>[]>;
        }

        export interface JaegerSpecStorageEsRolloverAffinity {
            nodeAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityNodeAffinity>;
            podAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityPodAffinity>;
            podAntiAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityPodAntiAffinity>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityNodeAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityNodeAffinityPatch {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            preference?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            preference?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields>[]>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferencePatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsPatch>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsPatch>[]>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            nodeSelectorTerms?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms>[]>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields>[]>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsPatch>[]>;
            matchFields?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsPatch>[]>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            nodeSelectorTerms?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsPatch>[]>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityPatch {
            nodeAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityNodeAffinityPatch>;
            podAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityPodAffinityPatch>;
            podAntiAffinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityPodAntiAffinityPatch>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityPodAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityPodAffinityPatch {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityPodAntiAffinity {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution>[]>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityPodAntiAffinityPatch {
            preferredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
            requiredDuringSchedulingIgnoredDuringExecution?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch>[]>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution {
            podAffinityTerm?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPatch {
            podAffinityTerm?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch>;
            weight?: pulumi.Input<number>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermPatch {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorPatch>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermNamespaceSelectorPatch>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageEsRolloverAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionPatch {
            labelSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorPatch>;
            namespaceSelector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionNamespaceSelectorPatch>;
            namespaces?: pulumi.Input<pulumi.Input<string>[]>;
            topologyKey?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverContainerSecurityContext {
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            capabilities?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverContainerSecurityContextCapabilities>;
            privileged?: pulumi.Input<boolean>;
            procMount?: pulumi.Input<string>;
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverContainerSecurityContextSeLinuxOptions>;
            seccompProfile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverContainerSecurityContextSeccompProfile>;
            windowsOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverContainerSecurityContextWindowsOptions>;
        }

        export interface JaegerSpecStorageEsRolloverContainerSecurityContextCapabilities {
            add?: pulumi.Input<pulumi.Input<string>[]>;
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsRolloverContainerSecurityContextCapabilitiesPatch {
            add?: pulumi.Input<pulumi.Input<string>[]>;
            drop?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsRolloverContainerSecurityContextPatch {
            allowPrivilegeEscalation?: pulumi.Input<boolean>;
            capabilities?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverContainerSecurityContextCapabilitiesPatch>;
            privileged?: pulumi.Input<boolean>;
            procMount?: pulumi.Input<string>;
            readOnlyRootFilesystem?: pulumi.Input<boolean>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverContainerSecurityContextSeLinuxOptionsPatch>;
            seccompProfile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverContainerSecurityContextSeccompProfilePatch>;
            windowsOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverContainerSecurityContextWindowsOptionsPatch>;
        }

        export interface JaegerSpecStorageEsRolloverContainerSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverContainerSecurityContextSeLinuxOptionsPatch {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverContainerSecurityContextSeccompProfile {
            localhostProfile?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverContainerSecurityContextSeccompProfilePatch {
            localhostProfile?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverContainerSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            hostProcess?: pulumi.Input<boolean>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverContainerSecurityContextWindowsOptionsPatch {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            hostProcess?: pulumi.Input<boolean>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverImagePullSecrets {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverImagePullSecretsPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverLivenessProbe {
            exec?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverLivenessProbeExec>;
            failureThreshold?: pulumi.Input<number>;
            grpc?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverLivenessProbeGrpc>;
            httpGet?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverLivenessProbeHttpGet>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverLivenessProbeTcpSocket>;
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface JaegerSpecStorageEsRolloverLivenessProbeExec {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsRolloverLivenessProbeExecPatch {
            command?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsRolloverLivenessProbeGrpc {
            port?: pulumi.Input<number>;
            service?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverLivenessProbeGrpcPatch {
            port?: pulumi.Input<number>;
            service?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverLivenessProbeHttpGet {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverLivenessProbeHttpGetHttpHeaders>[]>;
            path?: pulumi.Input<string>;
            port?: pulumi.Input<number | string>;
            scheme?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverLivenessProbeHttpGetHttpHeaders {
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverLivenessProbeHttpGetHttpHeadersPatch {
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverLivenessProbeHttpGetPatch {
            host?: pulumi.Input<string>;
            httpHeaders?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverLivenessProbeHttpGetHttpHeadersPatch>[]>;
            path?: pulumi.Input<string>;
            port?: pulumi.Input<number | string>;
            scheme?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverLivenessProbePatch {
            exec?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverLivenessProbeExecPatch>;
            failureThreshold?: pulumi.Input<number>;
            grpc?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverLivenessProbeGrpcPatch>;
            httpGet?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverLivenessProbeHttpGetPatch>;
            initialDelaySeconds?: pulumi.Input<number>;
            periodSeconds?: pulumi.Input<number>;
            successThreshold?: pulumi.Input<number>;
            tcpSocket?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverLivenessProbeTcpSocketPatch>;
            terminationGracePeriodSeconds?: pulumi.Input<number>;
            timeoutSeconds?: pulumi.Input<number>;
        }

        export interface JaegerSpecStorageEsRolloverLivenessProbeTcpSocket {
            host?: pulumi.Input<string>;
            port?: pulumi.Input<number | string>;
        }

        export interface JaegerSpecStorageEsRolloverLivenessProbeTcpSocketPatch {
            host?: pulumi.Input<string>;
            port?: pulumi.Input<number | string>;
        }

        export interface JaegerSpecStorageEsRolloverPatch {
            affinity?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverAffinityPatch>;
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            backoffLimit?: pulumi.Input<number>;
            conditions?: pulumi.Input<string>;
            containerSecurityContext?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverContainerSecurityContextPatch>;
            image?: pulumi.Input<string>;
            imagePullPolicy?: pulumi.Input<string>;
            imagePullSecrets?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverImagePullSecretsPatch>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            livenessProbe?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverLivenessProbePatch>;
            readTTL?: pulumi.Input<string>;
            resources?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverResourcesPatch>;
            schedule?: pulumi.Input<string>;
            securityContext?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverSecurityContextPatch>;
            serviceAccount?: pulumi.Input<string>;
            successfulJobsHistoryLimit?: pulumi.Input<number>;
            tolerations?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverTolerationsPatch>[]>;
            ttlSecondsAfterFinished?: pulumi.Input<number>;
            volumeMounts?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumeMountsPatch>[]>;
            volumes?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesPatch>[]>;
        }

        export interface JaegerSpecStorageEsRolloverResources {
            claims?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverResourcesClaims>[]>;
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        export interface JaegerSpecStorageEsRolloverResourcesClaims {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverResourcesClaimsPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverResourcesPatch {
            claims?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverResourcesClaimsPatch>[]>;
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        export interface JaegerSpecStorageEsRolloverSecurityContext {
            fsGroup?: pulumi.Input<number>;
            fsGroupChangePolicy?: pulumi.Input<string>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverSecurityContextSeLinuxOptions>;
            seccompProfile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverSecurityContextSeccompProfile>;
            supplementalGroups?: pulumi.Input<pulumi.Input<number>[]>;
            sysctls?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverSecurityContextSysctls>[]>;
            windowsOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverSecurityContextWindowsOptions>;
        }

        export interface JaegerSpecStorageEsRolloverSecurityContextPatch {
            fsGroup?: pulumi.Input<number>;
            fsGroupChangePolicy?: pulumi.Input<string>;
            runAsGroup?: pulumi.Input<number>;
            runAsNonRoot?: pulumi.Input<boolean>;
            runAsUser?: pulumi.Input<number>;
            seLinuxOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverSecurityContextSeLinuxOptionsPatch>;
            seccompProfile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverSecurityContextSeccompProfilePatch>;
            supplementalGroups?: pulumi.Input<pulumi.Input<number>[]>;
            sysctls?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverSecurityContextSysctlsPatch>[]>;
            windowsOptions?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverSecurityContextWindowsOptionsPatch>;
        }

        export interface JaegerSpecStorageEsRolloverSecurityContextSeLinuxOptions {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverSecurityContextSeLinuxOptionsPatch {
            level?: pulumi.Input<string>;
            role?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverSecurityContextSeccompProfile {
            localhostProfile?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverSecurityContextSeccompProfilePatch {
            localhostProfile?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverSecurityContextSysctls {
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverSecurityContextSysctlsPatch {
            name?: pulumi.Input<string>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverSecurityContextWindowsOptions {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            hostProcess?: pulumi.Input<boolean>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverSecurityContextWindowsOptionsPatch {
            gmsaCredentialSpec?: pulumi.Input<string>;
            gmsaCredentialSpecName?: pulumi.Input<string>;
            hostProcess?: pulumi.Input<boolean>;
            runAsUserName?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverTolerations {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverTolerationsPatch {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumeMounts {
            mountPath?: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumeMountsPatch {
            mountPath?: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumes {
            awsElasticBlockStore?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesAwsElasticBlockStore>;
            azureDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesAzureDisk>;
            azureFile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesAzureFile>;
            cephfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesCephfs>;
            cinder?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesCinder>;
            configMap?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesConfigMap>;
            csi?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesCsi>;
            downwardAPI?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesDownwardAPI>;
            emptyDir?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesEmptyDir>;
            ephemeral?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesEphemeral>;
            fc?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesFc>;
            flexVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesFlexVolume>;
            flocker?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesFlocker>;
            gcePersistentDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesGcePersistentDisk>;
            gitRepo?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesGitRepo>;
            glusterfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesGlusterfs>;
            hostPath?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesHostPath>;
            iscsi?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesIscsi>;
            name?: pulumi.Input<string>;
            nfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesNfs>;
            persistentVolumeClaim?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesPersistentVolumeClaim>;
            photonPersistentDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesPhotonPersistentDisk>;
            portworxVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesPortworxVolume>;
            projected?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesProjected>;
            quobyte?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesQuobyte>;
            rbd?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesRbd>;
            scaleIO?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesScaleIO>;
            secret?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesSecret>;
            storageos?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesStorageos>;
            vsphereVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesVsphereVolume>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesAwsElasticBlockStore {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesAwsElasticBlockStorePatch {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesAzureDisk {
            cachingMode?: pulumi.Input<string>;
            diskName?: pulumi.Input<string>;
            diskURI?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesAzureDiskPatch {
            cachingMode?: pulumi.Input<string>;
            diskName?: pulumi.Input<string>;
            diskURI?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesAzureFile {
            readOnly?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
            shareName?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesAzureFilePatch {
            readOnly?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
            shareName?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesCephfs {
            monitors?: pulumi.Input<pulumi.Input<string>[]>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretFile?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesCephfsSecretRef>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesCephfsPatch {
            monitors?: pulumi.Input<pulumi.Input<string>[]>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretFile?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesCephfsSecretRefPatch>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesCephfsSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesCephfsSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesCinder {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesCinderSecretRef>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesCinderPatch {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesCinderSecretRefPatch>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesCinderSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesCinderSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesConfigMap {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesConfigMapItems {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesConfigMapItemsPatch {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesConfigMapPatch {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesConfigMapItemsPatch>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesCsi {
            driver?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            nodePublishSecretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesCsiNodePublishSecretRef>;
            readOnly?: pulumi.Input<boolean>;
            volumeAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesCsiNodePublishSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesCsiNodePublishSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesCsiPatch {
            driver?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            nodePublishSecretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesCsiNodePublishSecretRefPatch>;
            readOnly?: pulumi.Input<boolean>;
            volumeAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesDownwardAPI {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesDownwardAPIItems>[]>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesDownwardAPIItems {
            fieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesDownwardAPIItemsFieldRef>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesDownwardAPIItemsResourceFieldRef>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesDownwardAPIItemsFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesDownwardAPIItemsFieldRefPatch {
            apiVersion?: pulumi.Input<string>;
            fieldPath?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesDownwardAPIItemsPatch {
            fieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesDownwardAPIItemsFieldRefPatch>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesDownwardAPIItemsResourceFieldRefPatch>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesDownwardAPIItemsResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<number | string>;
            resource?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesDownwardAPIItemsResourceFieldRefPatch {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<number | string>;
            resource?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesDownwardAPIPatch {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesDownwardAPIItemsPatch>[]>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesEmptyDir {
            medium?: pulumi.Input<string>;
            sizeLimit?: pulumi.Input<number | string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesEmptyDirPatch {
            medium?: pulumi.Input<string>;
            sizeLimit?: pulumi.Input<number | string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesEphemeral {
            volumeClaimTemplate?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesEphemeralVolumeClaimTemplate>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesEphemeralPatch {
            volumeClaimTemplate?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesEphemeralVolumeClaimTemplatePatch>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesEphemeralVolumeClaimTemplate {
            metadata?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesEphemeralVolumeClaimTemplateMetadata>;
            spec?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesEphemeralVolumeClaimTemplateSpec>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesEphemeralVolumeClaimTemplateMetadata {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesEphemeralVolumeClaimTemplateMetadataPatch {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesEphemeralVolumeClaimTemplatePatch {
            metadata?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesEphemeralVolumeClaimTemplateMetadataPatch>;
            spec?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesEphemeralVolumeClaimTemplateSpecPatch>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesEphemeralVolumeClaimTemplateSpec {
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            dataSource?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesEphemeralVolumeClaimTemplateSpecDataSource>;
            dataSourceRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef>;
            resources?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesEphemeralVolumeClaimTemplateSpecResources>;
            selector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesEphemeralVolumeClaimTemplateSpecSelector>;
            storageClassName?: pulumi.Input<string>;
            volumeMode?: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesEphemeralVolumeClaimTemplateSpecDataSource {
            apiGroup?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch {
            apiGroup?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef {
            apiGroup?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch {
            apiGroup?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesEphemeralVolumeClaimTemplateSpecPatch {
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            dataSource?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch>;
            dataSourceRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch>;
            resources?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesEphemeralVolumeClaimTemplateSpecResourcesPatch>;
            selector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesEphemeralVolumeClaimTemplateSpecSelectorPatch>;
            storageClassName?: pulumi.Input<string>;
            volumeMode?: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesEphemeralVolumeClaimTemplateSpecResources {
            claims?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesEphemeralVolumeClaimTemplateSpecResourcesClaims>[]>;
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesEphemeralVolumeClaimTemplateSpecResourcesClaims {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesEphemeralVolumeClaimTemplateSpecResourcesClaimsPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesEphemeralVolumeClaimTemplateSpecResourcesPatch {
            claims?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesEphemeralVolumeClaimTemplateSpecResourcesClaimsPatch>[]>;
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesEphemeralVolumeClaimTemplateSpecSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesEphemeralVolumeClaimTemplateSpecSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesFc {
            fsType?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            targetWWNs?: pulumi.Input<pulumi.Input<string>[]>;
            wwids?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesFcPatch {
            fsType?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            targetWWNs?: pulumi.Input<pulumi.Input<string>[]>;
            wwids?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesFlexVolume {
            driver?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesFlexVolumeSecretRef>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesFlexVolumePatch {
            driver?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesFlexVolumeSecretRefPatch>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesFlexVolumeSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesFlexVolumeSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesFlocker {
            datasetName?: pulumi.Input<string>;
            datasetUUID?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesFlockerPatch {
            datasetName?: pulumi.Input<string>;
            datasetUUID?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesGcePersistentDisk {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            pdName?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesGcePersistentDiskPatch {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            pdName?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesGitRepo {
            directory?: pulumi.Input<string>;
            repository?: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesGitRepoPatch {
            directory?: pulumi.Input<string>;
            repository?: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesGlusterfs {
            endpoints?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesGlusterfsPatch {
            endpoints?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesHostPath {
            path?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesHostPathPatch {
            path?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesIscsi {
            chapAuthDiscovery?: pulumi.Input<boolean>;
            chapAuthSession?: pulumi.Input<boolean>;
            fsType?: pulumi.Input<string>;
            initiatorName?: pulumi.Input<string>;
            iqn?: pulumi.Input<string>;
            iscsiInterface?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            portals?: pulumi.Input<pulumi.Input<string>[]>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesIscsiSecretRef>;
            targetPortal?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesIscsiPatch {
            chapAuthDiscovery?: pulumi.Input<boolean>;
            chapAuthSession?: pulumi.Input<boolean>;
            fsType?: pulumi.Input<string>;
            initiatorName?: pulumi.Input<string>;
            iqn?: pulumi.Input<string>;
            iscsiInterface?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            portals?: pulumi.Input<pulumi.Input<string>[]>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesIscsiSecretRefPatch>;
            targetPortal?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesIscsiSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesIscsiSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesNfs {
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            server?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesNfsPatch {
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            server?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesPatch {
            awsElasticBlockStore?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesAwsElasticBlockStorePatch>;
            azureDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesAzureDiskPatch>;
            azureFile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesAzureFilePatch>;
            cephfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesCephfsPatch>;
            cinder?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesCinderPatch>;
            configMap?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesConfigMapPatch>;
            csi?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesCsiPatch>;
            downwardAPI?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesDownwardAPIPatch>;
            emptyDir?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesEmptyDirPatch>;
            ephemeral?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesEphemeralPatch>;
            fc?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesFcPatch>;
            flexVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesFlexVolumePatch>;
            flocker?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesFlockerPatch>;
            gcePersistentDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesGcePersistentDiskPatch>;
            gitRepo?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesGitRepoPatch>;
            glusterfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesGlusterfsPatch>;
            hostPath?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesHostPathPatch>;
            iscsi?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesIscsiPatch>;
            name?: pulumi.Input<string>;
            nfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesNfsPatch>;
            persistentVolumeClaim?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesPersistentVolumeClaimPatch>;
            photonPersistentDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesPhotonPersistentDiskPatch>;
            portworxVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesPortworxVolumePatch>;
            projected?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesProjectedPatch>;
            quobyte?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesQuobytePatch>;
            rbd?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesRbdPatch>;
            scaleIO?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesScaleIOPatch>;
            secret?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesSecretPatch>;
            storageos?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesStorageosPatch>;
            vsphereVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesVsphereVolumePatch>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesPersistentVolumeClaim {
            claimName?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesPersistentVolumeClaimPatch {
            claimName?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesPhotonPersistentDisk {
            fsType?: pulumi.Input<string>;
            pdID?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesPhotonPersistentDiskPatch {
            fsType?: pulumi.Input<string>;
            pdID?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesPortworxVolume {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesPortworxVolumePatch {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesProjected {
            defaultMode?: pulumi.Input<number>;
            sources?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesProjectedSources>[]>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesProjectedPatch {
            defaultMode?: pulumi.Input<number>;
            sources?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesProjectedSourcesPatch>[]>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesProjectedSources {
            configMap?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesProjectedSourcesConfigMap>;
            downwardAPI?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesProjectedSourcesDownwardAPI>;
            secret?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesProjectedSourcesSecret>;
            serviceAccountToken?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesProjectedSourcesServiceAccountToken>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesProjectedSourcesConfigMap {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesProjectedSourcesConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesProjectedSourcesConfigMapItems {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesProjectedSourcesConfigMapItemsPatch {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesProjectedSourcesConfigMapPatch {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesProjectedSourcesConfigMapItemsPatch>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesProjectedSourcesDownwardAPI {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesProjectedSourcesDownwardAPIItems>[]>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesProjectedSourcesDownwardAPIItems {
            fieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesProjectedSourcesDownwardAPIItemsFieldRef>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesProjectedSourcesDownwardAPIItemsFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesProjectedSourcesDownwardAPIItemsFieldRefPatch {
            apiVersion?: pulumi.Input<string>;
            fieldPath?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesProjectedSourcesDownwardAPIItemsPatch {
            fieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesProjectedSourcesDownwardAPIItemsFieldRefPatch>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatch>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<number | string>;
            resource?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatch {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<number | string>;
            resource?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesProjectedSourcesDownwardAPIPatch {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesProjectedSourcesDownwardAPIItemsPatch>[]>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesProjectedSourcesPatch {
            configMap?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesProjectedSourcesConfigMapPatch>;
            downwardAPI?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesProjectedSourcesDownwardAPIPatch>;
            secret?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesProjectedSourcesSecretPatch>;
            serviceAccountToken?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesProjectedSourcesServiceAccountTokenPatch>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesProjectedSourcesSecret {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesProjectedSourcesSecretItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesProjectedSourcesSecretItems {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesProjectedSourcesSecretItemsPatch {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesProjectedSourcesSecretPatch {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesProjectedSourcesSecretItemsPatch>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesProjectedSourcesServiceAccountToken {
            audience?: pulumi.Input<string>;
            expirationSeconds?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesProjectedSourcesServiceAccountTokenPatch {
            audience?: pulumi.Input<string>;
            expirationSeconds?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesQuobyte {
            group?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            registry?: pulumi.Input<string>;
            tenant?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
            volume?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesQuobytePatch {
            group?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            registry?: pulumi.Input<string>;
            tenant?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
            volume?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesRbd {
            fsType?: pulumi.Input<string>;
            image?: pulumi.Input<string>;
            keyring?: pulumi.Input<string>;
            monitors?: pulumi.Input<pulumi.Input<string>[]>;
            pool?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesRbdSecretRef>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesRbdPatch {
            fsType?: pulumi.Input<string>;
            image?: pulumi.Input<string>;
            keyring?: pulumi.Input<string>;
            monitors?: pulumi.Input<pulumi.Input<string>[]>;
            pool?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesRbdSecretRefPatch>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesRbdSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesRbdSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesScaleIO {
            fsType?: pulumi.Input<string>;
            gateway?: pulumi.Input<string>;
            protectionDomain?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesScaleIOSecretRef>;
            sslEnabled?: pulumi.Input<boolean>;
            storageMode?: pulumi.Input<string>;
            storagePool?: pulumi.Input<string>;
            system?: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesScaleIOPatch {
            fsType?: pulumi.Input<string>;
            gateway?: pulumi.Input<string>;
            protectionDomain?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesScaleIOSecretRefPatch>;
            sslEnabled?: pulumi.Input<boolean>;
            storageMode?: pulumi.Input<string>;
            storagePool?: pulumi.Input<string>;
            system?: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesScaleIOSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesScaleIOSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesSecret {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesSecretItems>[]>;
            optional?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesSecretItems {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesSecretItemsPatch {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesSecretPatch {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesSecretItemsPatch>[]>;
            optional?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesStorageos {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesStorageosSecretRef>;
            volumeName?: pulumi.Input<string>;
            volumeNamespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesStorageosPatch {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverVolumesStorageosSecretRefPatch>;
            volumeName?: pulumi.Input<string>;
            volumeNamespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesStorageosSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesStorageosSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesVsphereVolume {
            fsType?: pulumi.Input<string>;
            storagePolicyID?: pulumi.Input<string>;
            storagePolicyName?: pulumi.Input<string>;
            volumePath?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageEsRolloverVolumesVsphereVolumePatch {
            fsType?: pulumi.Input<string>;
            storagePolicyID?: pulumi.Input<string>;
            storagePolicyName?: pulumi.Input<string>;
            volumePath?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageGrpcPlugin {
            image?: pulumi.Input<string>;
        }

        export interface JaegerSpecStorageGrpcPluginPatch {
            image?: pulumi.Input<string>;
        }

        export interface JaegerSpecStoragePatch {
            cassandraCreateSchema?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageCassandraCreateSchemaPatch>;
            dependencies?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageDependenciesPatch>;
            elasticsearch?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageElasticsearchPatch>;
            esIndexCleaner?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsIndexCleanerPatch>;
            esRollover?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageEsRolloverPatch>;
            grpcPlugin?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecStorageGrpcPluginPatch>;
            options?: pulumi.Input<{[key: string]: any}>;
            secretName?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecTolerations {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecTolerationsPatch {
            effect?: pulumi.Input<string>;
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            tolerationSeconds?: pulumi.Input<number>;
            value?: pulumi.Input<string>;
        }

        export interface JaegerSpecUi {
            options?: pulumi.Input<{[key: string]: any}>;
        }

        export interface JaegerSpecUiPatch {
            options?: pulumi.Input<{[key: string]: any}>;
        }

        export interface JaegerSpecVolumeMounts {
            mountPath?: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumeMountsPatch {
            mountPath?: pulumi.Input<string>;
            mountPropagation?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            subPath?: pulumi.Input<string>;
            subPathExpr?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumes {
            awsElasticBlockStore?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesAwsElasticBlockStore>;
            azureDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesAzureDisk>;
            azureFile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesAzureFile>;
            cephfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesCephfs>;
            cinder?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesCinder>;
            configMap?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesConfigMap>;
            csi?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesCsi>;
            downwardAPI?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesDownwardAPI>;
            emptyDir?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesEmptyDir>;
            ephemeral?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesEphemeral>;
            fc?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesFc>;
            flexVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesFlexVolume>;
            flocker?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesFlocker>;
            gcePersistentDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesGcePersistentDisk>;
            gitRepo?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesGitRepo>;
            glusterfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesGlusterfs>;
            hostPath?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesHostPath>;
            iscsi?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesIscsi>;
            name?: pulumi.Input<string>;
            nfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesNfs>;
            persistentVolumeClaim?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesPersistentVolumeClaim>;
            photonPersistentDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesPhotonPersistentDisk>;
            portworxVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesPortworxVolume>;
            projected?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesProjected>;
            quobyte?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesQuobyte>;
            rbd?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesRbd>;
            scaleIO?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesScaleIO>;
            secret?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesSecret>;
            storageos?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesStorageos>;
            vsphereVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesVsphereVolume>;
        }

        export interface JaegerSpecVolumesAwsElasticBlockStore {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesAwsElasticBlockStorePatch {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesAzureDisk {
            cachingMode?: pulumi.Input<string>;
            diskName?: pulumi.Input<string>;
            diskURI?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecVolumesAzureDiskPatch {
            cachingMode?: pulumi.Input<string>;
            diskName?: pulumi.Input<string>;
            diskURI?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecVolumesAzureFile {
            readOnly?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
            shareName?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesAzureFilePatch {
            readOnly?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
            shareName?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesCephfs {
            monitors?: pulumi.Input<pulumi.Input<string>[]>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretFile?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesCephfsSecretRef>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesCephfsPatch {
            monitors?: pulumi.Input<pulumi.Input<string>[]>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretFile?: pulumi.Input<string>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesCephfsSecretRefPatch>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesCephfsSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesCephfsSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesCinder {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesCinderSecretRef>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesCinderPatch {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesCinderSecretRefPatch>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesCinderSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesCinderSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesConfigMap {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecVolumesConfigMapItems {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesConfigMapItemsPatch {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesConfigMapPatch {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesConfigMapItemsPatch>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecVolumesCsi {
            driver?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            nodePublishSecretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesCsiNodePublishSecretRef>;
            readOnly?: pulumi.Input<boolean>;
            volumeAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecVolumesCsiNodePublishSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesCsiNodePublishSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesCsiPatch {
            driver?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            nodePublishSecretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesCsiNodePublishSecretRefPatch>;
            readOnly?: pulumi.Input<boolean>;
            volumeAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecVolumesDownwardAPI {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesDownwardAPIItems>[]>;
        }

        export interface JaegerSpecVolumesDownwardAPIItems {
            fieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesDownwardAPIItemsFieldRef>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesDownwardAPIItemsResourceFieldRef>;
        }

        export interface JaegerSpecVolumesDownwardAPIItemsFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesDownwardAPIItemsFieldRefPatch {
            apiVersion?: pulumi.Input<string>;
            fieldPath?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesDownwardAPIItemsPatch {
            fieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesDownwardAPIItemsFieldRefPatch>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesDownwardAPIItemsResourceFieldRefPatch>;
        }

        export interface JaegerSpecVolumesDownwardAPIItemsResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<number | string>;
            resource?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesDownwardAPIItemsResourceFieldRefPatch {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<number | string>;
            resource?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesDownwardAPIPatch {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesDownwardAPIItemsPatch>[]>;
        }

        export interface JaegerSpecVolumesEmptyDir {
            medium?: pulumi.Input<string>;
            sizeLimit?: pulumi.Input<number | string>;
        }

        export interface JaegerSpecVolumesEmptyDirPatch {
            medium?: pulumi.Input<string>;
            sizeLimit?: pulumi.Input<number | string>;
        }

        export interface JaegerSpecVolumesEphemeral {
            volumeClaimTemplate?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesEphemeralVolumeClaimTemplate>;
        }

        export interface JaegerSpecVolumesEphemeralPatch {
            volumeClaimTemplate?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesEphemeralVolumeClaimTemplatePatch>;
        }

        export interface JaegerSpecVolumesEphemeralVolumeClaimTemplate {
            metadata?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesEphemeralVolumeClaimTemplateMetadata>;
            spec?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesEphemeralVolumeClaimTemplateSpec>;
        }

        export interface JaegerSpecVolumesEphemeralVolumeClaimTemplateMetadata {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesEphemeralVolumeClaimTemplateMetadataPatch {
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesEphemeralVolumeClaimTemplatePatch {
            metadata?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesEphemeralVolumeClaimTemplateMetadataPatch>;
            spec?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesEphemeralVolumeClaimTemplateSpecPatch>;
        }

        export interface JaegerSpecVolumesEphemeralVolumeClaimTemplateSpec {
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            dataSource?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource>;
            dataSourceRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef>;
            resources?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesEphemeralVolumeClaimTemplateSpecResources>;
            selector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesEphemeralVolumeClaimTemplateSpecSelector>;
            storageClassName?: pulumi.Input<string>;
            volumeMode?: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource {
            apiGroup?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch {
            apiGroup?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef {
            apiGroup?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch {
            apiGroup?: pulumi.Input<string>;
            kind?: pulumi.Input<string>;
            name?: pulumi.Input<string>;
            namespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesEphemeralVolumeClaimTemplateSpecPatch {
            accessModes?: pulumi.Input<pulumi.Input<string>[]>;
            dataSource?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch>;
            dataSourceRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch>;
            resources?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatch>;
            selector?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatch>;
            storageClassName?: pulumi.Input<string>;
            volumeMode?: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesEphemeralVolumeClaimTemplateSpecResources {
            claims?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesClaims>[]>;
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        export interface JaegerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesClaims {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesClaimsPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatch {
            claims?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesClaimsPatch>[]>;
            limits?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
            requests?: pulumi.Input<{[key: string]: pulumi.Input<number | string>}>;
        }

        export interface JaegerSpecVolumesEphemeralVolumeClaimTemplateSpecSelector {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch {
            key?: pulumi.Input<string>;
            operator?: pulumi.Input<string>;
            values?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatch {
            matchExpressions?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch>[]>;
            matchLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
        }

        export interface JaegerSpecVolumesFc {
            fsType?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            targetWWNs?: pulumi.Input<pulumi.Input<string>[]>;
            wwids?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecVolumesFcPatch {
            fsType?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            readOnly?: pulumi.Input<boolean>;
            targetWWNs?: pulumi.Input<pulumi.Input<string>[]>;
            wwids?: pulumi.Input<pulumi.Input<string>[]>;
        }

        export interface JaegerSpecVolumesFlexVolume {
            driver?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesFlexVolumeSecretRef>;
        }

        export interface JaegerSpecVolumesFlexVolumePatch {
            driver?: pulumi.Input<string>;
            fsType?: pulumi.Input<string>;
            options?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesFlexVolumeSecretRefPatch>;
        }

        export interface JaegerSpecVolumesFlexVolumeSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesFlexVolumeSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesFlocker {
            datasetName?: pulumi.Input<string>;
            datasetUUID?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesFlockerPatch {
            datasetName?: pulumi.Input<string>;
            datasetUUID?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesGcePersistentDisk {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            pdName?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecVolumesGcePersistentDiskPatch {
            fsType?: pulumi.Input<string>;
            partition?: pulumi.Input<number>;
            pdName?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecVolumesGitRepo {
            directory?: pulumi.Input<string>;
            repository?: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesGitRepoPatch {
            directory?: pulumi.Input<string>;
            repository?: pulumi.Input<string>;
            revision?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesGlusterfs {
            endpoints?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecVolumesGlusterfsPatch {
            endpoints?: pulumi.Input<string>;
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecVolumesHostPath {
            path?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesHostPathPatch {
            path?: pulumi.Input<string>;
            type?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesIscsi {
            chapAuthDiscovery?: pulumi.Input<boolean>;
            chapAuthSession?: pulumi.Input<boolean>;
            fsType?: pulumi.Input<string>;
            initiatorName?: pulumi.Input<string>;
            iqn?: pulumi.Input<string>;
            iscsiInterface?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            portals?: pulumi.Input<pulumi.Input<string>[]>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesIscsiSecretRef>;
            targetPortal?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesIscsiPatch {
            chapAuthDiscovery?: pulumi.Input<boolean>;
            chapAuthSession?: pulumi.Input<boolean>;
            fsType?: pulumi.Input<string>;
            initiatorName?: pulumi.Input<string>;
            iqn?: pulumi.Input<string>;
            iscsiInterface?: pulumi.Input<string>;
            lun?: pulumi.Input<number>;
            portals?: pulumi.Input<pulumi.Input<string>[]>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesIscsiSecretRefPatch>;
            targetPortal?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesIscsiSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesIscsiSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesNfs {
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            server?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesNfsPatch {
            path?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            server?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesPatch {
            awsElasticBlockStore?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesAwsElasticBlockStorePatch>;
            azureDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesAzureDiskPatch>;
            azureFile?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesAzureFilePatch>;
            cephfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesCephfsPatch>;
            cinder?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesCinderPatch>;
            configMap?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesConfigMapPatch>;
            csi?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesCsiPatch>;
            downwardAPI?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesDownwardAPIPatch>;
            emptyDir?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesEmptyDirPatch>;
            ephemeral?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesEphemeralPatch>;
            fc?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesFcPatch>;
            flexVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesFlexVolumePatch>;
            flocker?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesFlockerPatch>;
            gcePersistentDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesGcePersistentDiskPatch>;
            gitRepo?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesGitRepoPatch>;
            glusterfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesGlusterfsPatch>;
            hostPath?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesHostPathPatch>;
            iscsi?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesIscsiPatch>;
            name?: pulumi.Input<string>;
            nfs?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesNfsPatch>;
            persistentVolumeClaim?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesPersistentVolumeClaimPatch>;
            photonPersistentDisk?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesPhotonPersistentDiskPatch>;
            portworxVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesPortworxVolumePatch>;
            projected?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesProjectedPatch>;
            quobyte?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesQuobytePatch>;
            rbd?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesRbdPatch>;
            scaleIO?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesScaleIOPatch>;
            secret?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesSecretPatch>;
            storageos?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesStorageosPatch>;
            vsphereVolume?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesVsphereVolumePatch>;
        }

        export interface JaegerSpecVolumesPersistentVolumeClaim {
            claimName?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecVolumesPersistentVolumeClaimPatch {
            claimName?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecVolumesPhotonPersistentDisk {
            fsType?: pulumi.Input<string>;
            pdID?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesPhotonPersistentDiskPatch {
            fsType?: pulumi.Input<string>;
            pdID?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesPortworxVolume {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesPortworxVolumePatch {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            volumeID?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesProjected {
            defaultMode?: pulumi.Input<number>;
            sources?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesProjectedSources>[]>;
        }

        export interface JaegerSpecVolumesProjectedPatch {
            defaultMode?: pulumi.Input<number>;
            sources?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesProjectedSourcesPatch>[]>;
        }

        export interface JaegerSpecVolumesProjectedSources {
            configMap?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesProjectedSourcesConfigMap>;
            downwardAPI?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesProjectedSourcesDownwardAPI>;
            secret?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesProjectedSourcesSecret>;
            serviceAccountToken?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesProjectedSourcesServiceAccountToken>;
        }

        export interface JaegerSpecVolumesProjectedSourcesConfigMap {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesProjectedSourcesConfigMapItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecVolumesProjectedSourcesConfigMapItems {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesProjectedSourcesConfigMapItemsPatch {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesProjectedSourcesConfigMapPatch {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesProjectedSourcesConfigMapItemsPatch>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecVolumesProjectedSourcesDownwardAPI {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesProjectedSourcesDownwardAPIItems>[]>;
        }

        export interface JaegerSpecVolumesProjectedSourcesDownwardAPIItems {
            fieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef>;
        }

        export interface JaegerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef {
            apiVersion?: pulumi.Input<string>;
            fieldPath?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatch {
            apiVersion?: pulumi.Input<string>;
            fieldPath?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesProjectedSourcesDownwardAPIItemsPatch {
            fieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatch>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
            resourceFieldRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatch>;
        }

        export interface JaegerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<number | string>;
            resource?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatch {
            containerName?: pulumi.Input<string>;
            divisor?: pulumi.Input<number | string>;
            resource?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesProjectedSourcesDownwardAPIPatch {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesProjectedSourcesDownwardAPIItemsPatch>[]>;
        }

        export interface JaegerSpecVolumesProjectedSourcesPatch {
            configMap?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesProjectedSourcesConfigMapPatch>;
            downwardAPI?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesProjectedSourcesDownwardAPIPatch>;
            secret?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesProjectedSourcesSecretPatch>;
            serviceAccountToken?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesProjectedSourcesServiceAccountTokenPatch>;
        }

        export interface JaegerSpecVolumesProjectedSourcesSecret {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesProjectedSourcesSecretItems>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecVolumesProjectedSourcesSecretItems {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesProjectedSourcesSecretItemsPatch {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesProjectedSourcesSecretPatch {
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesProjectedSourcesSecretItemsPatch>[]>;
            name?: pulumi.Input<string>;
            optional?: pulumi.Input<boolean>;
        }

        export interface JaegerSpecVolumesProjectedSourcesServiceAccountToken {
            audience?: pulumi.Input<string>;
            expirationSeconds?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesProjectedSourcesServiceAccountTokenPatch {
            audience?: pulumi.Input<string>;
            expirationSeconds?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesQuobyte {
            group?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            registry?: pulumi.Input<string>;
            tenant?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
            volume?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesQuobytePatch {
            group?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            registry?: pulumi.Input<string>;
            tenant?: pulumi.Input<string>;
            user?: pulumi.Input<string>;
            volume?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesRbd {
            fsType?: pulumi.Input<string>;
            image?: pulumi.Input<string>;
            keyring?: pulumi.Input<string>;
            monitors?: pulumi.Input<pulumi.Input<string>[]>;
            pool?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesRbdSecretRef>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesRbdPatch {
            fsType?: pulumi.Input<string>;
            image?: pulumi.Input<string>;
            keyring?: pulumi.Input<string>;
            monitors?: pulumi.Input<pulumi.Input<string>[]>;
            pool?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesRbdSecretRefPatch>;
            user?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesRbdSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesRbdSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesScaleIO {
            fsType?: pulumi.Input<string>;
            gateway?: pulumi.Input<string>;
            protectionDomain?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesScaleIOSecretRef>;
            sslEnabled?: pulumi.Input<boolean>;
            storageMode?: pulumi.Input<string>;
            storagePool?: pulumi.Input<string>;
            system?: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesScaleIOPatch {
            fsType?: pulumi.Input<string>;
            gateway?: pulumi.Input<string>;
            protectionDomain?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesScaleIOSecretRefPatch>;
            sslEnabled?: pulumi.Input<boolean>;
            storageMode?: pulumi.Input<string>;
            storagePool?: pulumi.Input<string>;
            system?: pulumi.Input<string>;
            volumeName?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesScaleIOSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesScaleIOSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesSecret {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesSecretItems>[]>;
            optional?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesSecretItems {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesSecretItemsPatch {
            key?: pulumi.Input<string>;
            mode?: pulumi.Input<number>;
            path?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesSecretPatch {
            defaultMode?: pulumi.Input<number>;
            items?: pulumi.Input<pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesSecretItemsPatch>[]>;
            optional?: pulumi.Input<boolean>;
            secretName?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesStorageos {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesStorageosSecretRef>;
            volumeName?: pulumi.Input<string>;
            volumeNamespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesStorageosPatch {
            fsType?: pulumi.Input<string>;
            readOnly?: pulumi.Input<boolean>;
            secretRef?: pulumi.Input<inputs.jaegertracing.v1.JaegerSpecVolumesStorageosSecretRefPatch>;
            volumeName?: pulumi.Input<string>;
            volumeNamespace?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesStorageosSecretRef {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesStorageosSecretRefPatch {
            name?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesVsphereVolume {
            fsType?: pulumi.Input<string>;
            storagePolicyID?: pulumi.Input<string>;
            storagePolicyName?: pulumi.Input<string>;
            volumePath?: pulumi.Input<string>;
        }

        export interface JaegerSpecVolumesVsphereVolumePatch {
            fsType?: pulumi.Input<string>;
            storagePolicyID?: pulumi.Input<string>;
            storagePolicyName?: pulumi.Input<string>;
            volumePath?: pulumi.Input<string>;
        }

        export interface JaegerStatus {
            phase?: pulumi.Input<string>;
            version?: pulumi.Input<string>;
        }

    }
}

export namespace meta {
    export namespace v1 {
        /**
         * ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.
         */
        export interface ListMeta {
            /**
             * continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.
             */
            continue?: pulumi.Input<string>;
            /**
             * remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.
             */
            remainingItemCount?: pulumi.Input<number>;
            /**
             * String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
             */
            selfLink?: pulumi.Input<string>;
        }

        /**
         * ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.
         */
        export interface ManagedFieldsEntry {
            /**
             * APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"
             */
            fieldsType?: pulumi.Input<string>;
            /**
             * FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
             */
            fieldsV1?: any;
            /**
             * Manager is an identifier of the workflow managing these fields.
             */
            manager?: pulumi.Input<string>;
            /**
             * Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
             */
            operation?: pulumi.Input<string>;
            /**
             * Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.
             */
            subresource?: pulumi.Input<string>;
            /**
             * Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over.
             */
            time?: pulumi.Input<string>;
        }

        /**
         * ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.
         */
        export interface ManagedFieldsEntryPatch {
            /**
             * APIVersion defines the version of this resource that this field set applies to. The format is "group/version" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: "FieldsV1"
             */
            fieldsType?: pulumi.Input<string>;
            /**
             * FieldsV1 holds the first JSON version format as described in the "FieldsV1" type.
             */
            fieldsV1?: any;
            /**
             * Manager is an identifier of the workflow managing these fields.
             */
            manager?: pulumi.Input<string>;
            /**
             * Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.
             */
            operation?: pulumi.Input<string>;
            /**
             * Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.
             */
            subresource?: pulumi.Input<string>;
            /**
             * Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over.
             */
            time?: pulumi.Input<string>;
        }

        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        export interface ObjectMeta {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
             *
             * Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            creationTimestamp?: pulumi.Input<string>;
            /**
             * Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
             */
            deletionGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.
             *
             * Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            deletionTimestamp?: pulumi.Input<string>;
            /**
             * Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
             */
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
             *
             * If this field is specified and the generated name exists, the server will return a 409.
             *
             * Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
             */
            generateName?: pulumi.Input<string>;
            /**
             * A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
             */
            generation?: pulumi.Input<number>;
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
             */
            managedFields?: pulumi.Input<pulumi.Input<inputs.meta.v1.ManagedFieldsEntry>[]>;
            /**
             * Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
             *
             * Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
             */
            namespace?: pulumi.Input<string>;
            /**
             * List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
             */
            ownerReferences?: pulumi.Input<pulumi.Input<inputs.meta.v1.OwnerReference>[]>;
            /**
             * An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
             *
             * Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
             */
            selfLink?: pulumi.Input<string>;
            /**
             * UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
             *
             * Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.
         */
        export interface ObjectMetaPatch {
            /**
             * Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations
             */
            annotations?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.
             *
             * Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            creationTimestamp?: pulumi.Input<string>;
            /**
             * Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.
             */
            deletionGracePeriodSeconds?: pulumi.Input<number>;
            /**
             * DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.
             *
             * Populated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
             */
            deletionTimestamp?: pulumi.Input<string>;
            /**
             * Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.
             */
            finalizers?: pulumi.Input<pulumi.Input<string>[]>;
            /**
             * GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.
             *
             * If this field is specified and the generated name exists, the server will return a 409.
             *
             * Applied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
             */
            generateName?: pulumi.Input<string>;
            /**
             * A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.
             */
            generation?: pulumi.Input<number>;
            /**
             * Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels
             */
            labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
            /**
             * ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like "ci-cd". The set of fields is always in the version that the workflow used when modifying the object.
             */
            managedFields?: pulumi.Input<pulumi.Input<inputs.meta.v1.ManagedFieldsEntryPatch>[]>;
            /**
             * Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
             */
            name?: pulumi.Input<string>;
            /**
             * Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the "default" namespace, but "default" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.
             *
             * Must be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces
             */
            namespace?: pulumi.Input<string>;
            /**
             * List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.
             */
            ownerReferences?: pulumi.Input<pulumi.Input<inputs.meta.v1.OwnerReferencePatch>[]>;
            /**
             * An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.
             *
             * Populated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
             */
            resourceVersion?: pulumi.Input<string>;
            /**
             * Deprecated: selfLink is a legacy read-only field that is no longer populated by the system.
             */
            selfLink?: pulumi.Input<string>;
            /**
             * UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.
             *
             * Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
             */
            uid?: pulumi.Input<string>;
        }

        /**
         * OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
         */
        export interface OwnerReference {
            /**
             * API version of the referent.
             */
            apiVersion: pulumi.Input<string>;
            /**
             * If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
             */
            blockOwnerDeletion?: pulumi.Input<boolean>;
            /**
             * If true, this reference points to the managing controller.
             */
            controller?: pulumi.Input<boolean>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
             */
            name: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
             */
            uid: pulumi.Input<string>;
        }

        /**
         * OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.
         */
        export interface OwnerReferencePatch {
            /**
             * API version of the referent.
             */
            apiVersion?: pulumi.Input<string>;
            /**
             * If true, AND if the owner has the "foregroundDeletion" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs "delete" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.
             */
            blockOwnerDeletion?: pulumi.Input<boolean>;
            /**
             * If true, this reference points to the managing controller.
             */
            controller?: pulumi.Input<boolean>;
            /**
             * Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
             */
            kind?: pulumi.Input<string>;
            /**
             * Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names
             */
            name?: pulumi.Input<string>;
            /**
             * UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
             */
            uid?: pulumi.Input<string>;
        }

    }
}
