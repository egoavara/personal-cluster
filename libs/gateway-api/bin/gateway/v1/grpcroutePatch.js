"use strict";
// *** WARNING: this file was generated by crd2pulumi. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.GRPCRoutePatch = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../../utilities");
/**
 * Patch resources are used to modify existing Kubernetes resources by using
 * Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
 * one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
 * Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
 * [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
 * additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
 * GRPCRoute provides a way to route gRPC requests. This includes the capability
 * to match requests by hostname, gRPC service, gRPC method, or HTTP/2 header.
 * Filters can be used to specify additional processing steps. Backends specify
 * where matching requests will be routed.
 *
 * GRPCRoute falls under extended support within the Gateway API. Within the
 * following specification, the word "MUST" indicates that an implementation
 * supporting GRPCRoute must conform to the indicated requirement, but an
 * implementation not supporting this route type need not follow the requirement
 * unless explicitly indicated.
 *
 * Implementations supporting `GRPCRoute` with the `HTTPS` `ProtocolType` MUST
 * accept HTTP/2 connections without an initial upgrade from HTTP/1.1, i.e. via
 * ALPN. If the implementation does not support this, then it MUST set the
 * "Accepted" condition to "False" for the affected listener with a reason of
 * "UnsupportedProtocol".  Implementations MAY also accept HTTP/2 connections
 * with an upgrade from HTTP/1.
 *
 * Implementations supporting `GRPCRoute` with the `HTTP` `ProtocolType` MUST
 * support HTTP/2 over cleartext TCP (h2c,
 * https://www.rfc-editor.org/rfc/rfc7540#section-3.1) without an initial
 * upgrade from HTTP/1.1, i.e. with prior knowledge
 * (https://www.rfc-editor.org/rfc/rfc7540#section-3.4). If the implementation
 * does not support this, then it MUST set the "Accepted" condition to "False"
 * for the affected listener with a reason of "UnsupportedProtocol".
 * Implementations MAY also accept HTTP/2 connections with an upgrade from
 * HTTP/1, i.e. without prior knowledge.
 */
class GRPCRoutePatch extends pulumi.CustomResource {
    /**
     * Get an existing GRPCRoutePatch resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, opts) {
        return new GRPCRoutePatch(name, undefined, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of GRPCRoutePatch.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GRPCRoutePatch.__pulumiType;
    }
    /**
     * Create a GRPCRoutePatch resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name, args, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (!opts.id) {
            resourceInputs["apiVersion"] = "gateway.networking.k8s.io/v1";
            resourceInputs["kind"] = "GRPCRoute";
            resourceInputs["metadata"] = args ? args.metadata : undefined;
            resourceInputs["spec"] = args ? args.spec : undefined;
            resourceInputs["status"] = undefined /*out*/;
        }
        else {
            resourceInputs["apiVersion"] = undefined /*out*/;
            resourceInputs["kind"] = undefined /*out*/;
            resourceInputs["metadata"] = undefined /*out*/;
            resourceInputs["spec"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(GRPCRoutePatch.__pulumiType, name, resourceInputs, opts);
    }
}
exports.GRPCRoutePatch = GRPCRoutePatch;
/** @internal */
GRPCRoutePatch.__pulumiType = 'kubernetes:gateway.networking.k8s.io/v1:GRPCRoutePatch';
//# sourceMappingURL=grpcroutePatch.js.map